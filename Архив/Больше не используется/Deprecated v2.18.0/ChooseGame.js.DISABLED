const { User } = require(`../../../src/schemas/userdata`)
const chalk = require(`chalk`);
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType } = require(`discord.js`)
const ch_list = require(`../../../src/discord structure/channels.json`)
const { Guild } = require(`../../../src/schemas/guilddata`)
const { suffix } = require(`../../../src/functions`)
const linksInfo = require(`../../../src/discord structure/links.json`)
const wait = require(`node:timers/promises`).setTimeout
const { checkPlugin } = require("../../../src/functions");
const plugin = {
    id: "guildgames",
    name: "–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∏–≥—Ä—ã"
}
const Functions = require(`../exporter`)
/**
 * 
 * @param {import("../../../src/misc_functions/Exporter").StarpixelClient} client Discord Client
 */
async function randomGame(client) {
    try {
        const guild = await client.guilds.fetch(`320193302844669959`)
        if (!await checkPlugin("320193302844669959", plugin.id)) return;
        const guildData = await Guild.findOne({ id: guild.id })

        const channel = await guild.channels.fetch(ch_list.guildGamesVoice)
        const voice = await guild.channels.fetch(ch_list.guildGamesVoice)




        if (true) {
            const buttonNext = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`gg_nextgame`)
                        .setEmoji(`üéÆ`)
                        .setLabel(`–í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É`)
                        .setStyle(ButtonStyle.Primary)
                )

            const games = require(`../../../src/functions/GuildGames/GuildGamesSettings/Games List.json`)
            const type = games[Math.floor(Math.random() * games.length)]

            const rules = require(`../../../src/functions/GuildGames/GuildGamesSettings/Special Rules.json`)
            let rule = rules[Math.floor(Math.random() * rules.length)]

            //–í—ã–±–æ—Ä –∏–≥—Ä—ã
            if (type.type == `normal`) {
                const game = type.games[Math.floor(Math.random() * type.games.length)]
                const gameList = await guildData.guildgames.games.find(gm => gm.id == game.name)
                if (!gameList) {
                    guildData.guildgames.games.push({
                        id: game.name,
                        played: 1
                    })
                } else if (gameList.played >= game.max) {
                    return Functions.randomGame(client)
                } else {
                    gameList.played += 1
                }
                await channel.send(`‚óæ`)
                await channel.send({
                    content: `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó‚óä‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
**–°–û–í–ú–ï–°–¢–ù–ê–Ø –ò–ì–†–ê**
–ò–¥—ë—Ç –≤—ã–±–æ—Ä —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã...
:video_game: **${game.name}**
:game_die: –ú–∞–∫—Å–∏–º—É–º **${suffix(game.max)}** —Ä–∞–∑ –∑–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—É—é –∏–≥—Ä—É
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚óä‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`,
                    components: [buttonNext]
                })

                guildData.save()

            } else if (type.type == `vote`) {


                const game1 = type.games[Math.floor(Math.random() * type.games.length)]
                let game2 = type.games[Math.floor(Math.random() * type.games.length)]
                while (game2.name == game1.name) {
                    game2 = type.games[Math.floor(Math.random() * type.games.length)]
                }
                const buttonVote = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`gg_vote_1`)
                            .setEmoji(`üî∂`)
                            .setLabel(`${game1.name} (0)`)
                            .setStyle(ButtonStyle.Primary)
                    )
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`gg_vote_2`)
                            .setEmoji(`üî∑`)
                            .setLabel(`${game2.name} (0)`)
                            .setStyle(ButtonStyle.Primary)
                    )
                await channel.send(`‚óæ`)
                const msg = await channel.send({
                    content: `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó‚óä‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
**–°–û–í–ú–ï–°–¢–ù–ê–Ø –ò–ì–†–ê**
–ò–≥—Ä–æ–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É:
üî∂ **${game1.name}**
:game_die: –ú–∞–∫—Å–∏–º—É–º **${suffix(game1.max)}** –∑–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—É—é –∏–≥—Ä—É

üî∑ **${game2.name}**
:game_die: –ú–∞–∫—Å–∏–º—É–º **${suffix(game2.max)}** –∑–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—É—é –∏–≥—Ä—É
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚óä‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
–ü—Ä–æ–≥–æ–ª–æ—Å—É–π—Ç–µ —Ä–µ–∞–∫—Ü–∏—è–º–∏, —É –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥!`,
                    components: [buttonVote]
                })
                const filter = (i) => i.customId === 'gg_vote_1' || i.customId === 'gg_vote_2';

                const collector = msg.createMessageComponentCollector({
                    filter,
                    time: 30000,
                    componentType: ComponentType.Button,
                    dispose: true
                });
                collector.on('collect', async i => {
                    await i.deferUpdate()
                    const find = await collector.collected.find(int => int.user.id == i.user.id && int.id !== i.id)
                    if (find) {
                        await collector.dispose(find)
                        await collector.handleDispose(find)
                    }

                    const f = await collector.collected.filter(int => int.customId == `gg_vote_1`)
                    const s = await collector.collected.filter(int => int.customId == `gg_vote_2`)
                    const buttonVoteNew = new ActionRowBuilder()
                        .addComponents(
                            new ButtonBuilder()
                                .setCustomId(`gg_vote_1`)
                                .setEmoji(`üî∂`)
                                .setLabel(`${game1.name} (${f.size})`)
                                .setStyle(ButtonStyle.Primary)
                        )
                        .addComponents(
                            new ButtonBuilder()
                                .setCustomId(`gg_vote_2`)
                                .setEmoji(`üî∑`)
                                .setLabel(`${game2.name} (${s.size})`)
                                .setStyle(ButtonStyle.Primary)
                        )
                    await i.message.edit({
                        components: [buttonVoteNew]
                    })
                })
                collector.on('end', async (collected) => {
                    /* 
                        1. –ò–°–ü–†–ê–í–ò–¢–¨ –†–ï–ê–ö–¶–ò–ò –ù–ê –ö–ù–û–ü–ö–ò
                        2. –°–û–ë–ò–†–ê–¢–¨ –í–°–ï –ü–û–õ–£–ß–ï–ù–ù–´–ï INTERACTIONS
                        3. –°–û–ó–î–ê–¢–¨ –§–ê–ô–õ –í –ö–ù–û–ü–ö–ê–• RG.js
                        3.1. –°–î–ï–õ–ê–¢–¨ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï –î–õ–Ø –û–§–ò–¶–ï–†–û–í –ò –í–ï–î–£–©–ò–•!
                        4. –£–ë–†–ê–¢–¨ –ö–û–ú–ê–ù–î–£ /gg randomgame
                        5. –î–û–ë–ê–í–ò–¢–¨ –ö–ù–û–ü–ö–£ –í–´–ë–û–†–ê –ò–ì–†–´ –í Game Start.js
                        
                        –°–î–ï–õ–ê–¢–¨ –î–û –°–õ–ï–î–£–Æ–©–ï–ô –°–û–í–ú–ï–°–¢–ù–û–ô
                        
                    */
                    const f = await collected.filter(int => int.customId == `gg_vote_1`)
                    const s = await collected.filter(int => int.customId == `gg_vote_2`)
                    const buttonVoteNew = new ActionRowBuilder()
                        .addComponents(
                            new ButtonBuilder()
                                .setCustomId(`gg_vote_1`)
                                .setEmoji(`üî∂`)
                                .setLabel(`${game1.name} (${f.size})`)
                                .setStyle(ButtonStyle.Primary)
                                .setDisabled(true)
                        )
                        .addComponents(
                            new ButtonBuilder()
                                .setCustomId(`gg_vote_2`)
                                .setEmoji(`üî∑`)
                                .setLabel(`${game2.name} (${s.size})`)
                                .setStyle(ButtonStyle.Primary)
                                .setDisabled(true)
                        )
                    await msg.edit({
                        components: [buttonVoteNew]
                    })
                    const sort = await [f, s].sort((a, b) => {
                        return b.size - a.size
                    })
                    try {
                        if (!sort[0].first()) {
                            const gameList = await guildData.guildgames.games.find(gm => gm.id == game1.name)
                            if (!gameList) {
                                guildData.guildgames.games.push({
                                    id: game1.name,
                                    played: 1
                                })
                            } else if (gameList.played >= game1.max) {
                                await msg.reply({
                                    content: `–í—ã–±—Ä–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ (${game1.name}) –¥–æ—Å—Ç–∏–≥–ª–∞ —Å–≤–æ–µ–≥–æ –ª–∏–º–∏—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –∏–≥—Ä–µ... –ò–¥—ë—Ç –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –∏–≥—Ä—ã...`
                                })
                                return Functions.randomGame(client)
                            } else {
                                gameList.played += 1
                            }
                            await msg.reply({
                                content: `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó‚óä‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
**–°–û–í–ú–ï–°–¢–ù–ê–Ø –ò–ì–†–ê**
–ò–≥—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É...
:video_game: **${game1.name}**
:game_die: –ú–∞–∫—Å–∏–º—É–º **${suffix(game1.max)}** –∑–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—É—é –∏–≥—Ä—É
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚óä‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`,
                                components: [buttonNext]
                            })
                        } else if (sort[0].first().customId == `gg_vote_1`) {
                            const gameList = await guildData.guildgames.games.find(gm => gm.id == game1.name)
                            if (!gameList) {
                                guildData.guildgames.games.push({
                                    id: game1.name,
                                    played: 1
                                })
                            } else if (gameList.played >= game1.max) {
                                await msg.reply({
                                    content: `–í—ã–±—Ä–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ (${game1.name}) –¥–æ—Å—Ç–∏–≥–ª–∞ —Å–≤–æ–µ–≥–æ –ª–∏–º–∏—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –∏–≥—Ä–µ... –ò–¥—ë—Ç –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –∏–≥—Ä—ã...`
                                })
                                return Functions.randomGame(client)
                            } else {
                                gameList.played += 1
                            }
                            await msg.reply({
                                content: `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó‚óä‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
**–°–û–í–ú–ï–°–¢–ù–ê–Ø –ò–ì–†–ê**
–ò–≥—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É...
:video_game: **${game1.name}**
:game_die: –ú–∞–∫—Å–∏–º—É–º **${suffix(game1.max)}** –∑–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—É—é –∏–≥—Ä—É
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚óä‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`,
                                components: [buttonNext]
                            })

                            //guildData.save()
                        } else if (sort[0].first().customId == `gg_vote_2`) {
                            const gameList = await guildData.guildgames.games.find(gm => gm.id == game2.name)
                            if (!gameList) {
                                guildData.guildgames.games.push({
                                    id: game2.name,
                                    played: 1
                                })
                            } else if (gameList.played >= game2.max) {
                                await msg.reply({
                                    content: `–í—ã–±—Ä–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ (${game2.name}) –¥–æ—Å—Ç–∏–≥–ª–∞ —Å–≤–æ–µ–≥–æ –ª–∏–º–∏—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –∏–≥—Ä–µ... –ò–¥—ë—Ç –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –∏–≥—Ä—ã...`
                                })
                                return Functions.randomGame(client)
                            } else {
                                gameList.played += 1
                            }
                            await msg.reply({
                                content: `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó‚óä‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
**–°–û–í–ú–ï–°–¢–ù–ê–Ø –ò–ì–†–ê**
–ò–≥—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É...
:video_game: **${game2.name}**
:game_die: –ú–∞–∫—Å–∏–º—É–º **${suffix(game2.max)}** –∑–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—É—é –∏–≥—Ä—É
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚óä‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`,
                                components: [buttonNext]
                            })

                            //guildData.save()
                        }
                    }
                    catch (e) {
                        console.log(e)
                        const gameList = await guildData.guildgames.games.find(gm => gm.id == game1.name)
                        if (!gameList) {
                            guildData.guildgames.games.push({
                                id: game1.name,
                                played: 1
                            })
                        } else if (gameList.played >= game1.max) {
                            await msg.reply({
                                content: `–í—ã–±—Ä–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ (${game1.name}) –¥–æ—Å—Ç–∏–≥–ª–∞ —Å–≤–æ–µ–≥–æ –ª–∏–º–∏—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –∏–≥—Ä–µ... –ò–¥—ë—Ç –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –∏–≥—Ä—ã...`
                            })
                            return Functions.randomGame(client)
                        } else {
                            gameList.played += 1
                        }
                        await msg.reply({
                            content: `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó‚óä‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
**–°–û–í–ú–ï–°–¢–ù–ê–Ø –ò–ì–†–ê**
–ò–≥—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É...
:video_game: **${game1.name}**
:game_die: –ú–∞–∫—Å–∏–º—É–º **${suffix(game1.max)}** –∑–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—É—é –∏–≥—Ä—É
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚óä‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`,
                            components: [buttonNext]
                        })
                    }

                })
            } else if (type.type == `restrictment`) {
                const game = type.games[Math.floor(Math.random() * type.games.length)]
                const gameList = await guildData.guildgames.games.find(gm => gm.id == game.name)
                const voiceMembers = await voice.members.filter(member => member.user.bot === false)
                if (!gameList) {
                    guildData.guildgames.games.push({
                        id: game.name,
                        played: 1
                    })
                } else if (gameList.played >= game.max || voiceMembers.size >= game.rest_num) {
                    return Functions.randomGame(client)
                } else {
                    gameList.played += 1
                }
                await channel.send(`‚óæ`)
                await channel.send({
                    content: `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó‚óä‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
**–°–û–í–ú–ï–°–¢–ù–ê–Ø –ò–ì–†–ê**
–ò–¥—ë—Ç –≤—ã–±–æ—Ä —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã...
:video_game: **${game.name}**
:game_die: –ú–∞–∫—Å–∏–º—É–º **${suffix(game.max)}** –∑–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—É—é –∏–≥—Ä—É
:warning: –î–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ. __${game.rest}!__
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚óä‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`,
                    components: [buttonNext]
                })

                guildData.save()
            }

            if (!rule.restrictment || rule.restrictment == `SkyWars`) {
                await channel.send({
                    content: `:warning: –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ:
${rule.description}`
                })
            } else if (rule.restrictment == `randomMember`) {
                const randomNumber = Math.floor(Math.random() * voice.members.size) + 1
                await channel.send(`:warning: –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ:
${rule.description.replace(`%n`, randomNumber)}`)
            }
        }





        else if (guildData.guildgames.gameType == `–û—Å–æ–±–∞—è`) {
            const games = require(`../../../src/functions/GuildGames/GuildGamesSettings/Games List.json`)
            const type = games[Math.floor(Math.random() * games.length)]

            const rules = require(`../../../src/functions/GuildGames/GuildGamesSettings/Special Rules.json`)
            let rule = rules[Math.floor(Math.random() * rules.length)]
            const voiceMembers = await voice.members.fetch()
            let war = 0
            let tact = 0
            let sc = 0
            let cas = 0
            await voiceMembers.forEach(async member => {
                const userData = await User.findOne({ guildid: guild.id, userid: member.user.id })
                if (userData.specialization == `Warrior`) {
                    war += 1
                } else if (userData.specialization == `Scout`) {
                    sc += 1
                } else if (userData.specialization == `Casual`) {
                    cas += 1
                } else if (userData.specialization == `Tactical`) {
                    tact += 1
                }
            })
            await wait(1000)
            //–í—ã–±–æ—Ä –∏–≥—Ä—ã
            if (type.type == `normal`) {

                const chances = []
                for (let i = 0; i < type.games.length; i++) {
                    let sps = type.games[i].specializations
                    let chance = type.games[i].chance
                    if (sps.includes(`Warrior`)) {
                        chance += 3 ** war
                    }
                    if (sps.includes(`Scout`)) {
                        chance += 3 ** sc
                    }
                    if (sps.includes(`Casual`)) {
                        chance += 3 ** cas
                    }
                    if (sps.includes(`Tactical`)) {
                        chance += 3 ** tact
                    }

                    chances.push(chance)
                }


                let total = 0;
                for (let i = 0; i < chances.length; i++) {
                    total += chances[i];
                }
                let r = Math.floor(Math.random() * total);
                let b = 0;
                for (let s = chances[0]; s <= r; s += chances[b]) {
                    b++;
                }
                const game = type.games[b]
                const gameList = await guildData.guildgames.games.find(gm => gm.id == game.name)
                if (!gameList) {
                    guildData.guildgames.games.push({
                        id: game.name,
                        played: 1
                    })
                } else if (gameList.played >= game.max) {
                    return Functions.randomGame(client)
                } else {
                    gameList.played += 1
                }
                await channel.send(`‚óæ`)
                await channel.send({
                    content: `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó‚óä‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
**–°–û–í–ú–ï–°–¢–ù–ê–Ø –ò–ì–†–ê**
–ò–¥—ë—Ç –≤—ã–±–æ—Ä —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã...
:video_game: **${game.name}**
:game_die: –ú–∞–∫—Å–∏–º—É–º **${suffix(game.max)}** —Ä–∞–∑ –∑–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—É—é –∏–≥—Ä—É
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚óä‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`
                })

                guildData.save()

            } else if (type.type == `vote`) {
                const chances = []
                for (let i = 0; i < type.games.length; i++) {
                    let sps = type.games[i].specializations
                    let chance = type.games[i].chance
                    if (sps.includes(`Warrior`)) {
                        chance += 3 ** war
                    }
                    if (sps.includes(`Scout`)) {
                        chance += 3 ** sc
                    }
                    if (sps.includes(`Casual`)) {
                        chance += 3 ** cas
                    }
                    if (sps.includes(`Tactical`)) {
                        chance += 3 ** tact
                    }

                    chances.push(chance)
                }


                let total1 = 0;
                for (let i = 0; i < chances.length; i++) {
                    total1 += chances[i];
                }
                let r1 = Math.floor(Math.random() * total2);
                let b1 = 0;
                for (let s = chances[0]; s <= r1; s += chances[b1]) {
                    b1++;
                }

                let total2 = 0;
                for (let i = 0; i < chances.length; i++) {
                    total2 += chances[i];
                }
                let r2 = Math.floor(Math.random() * total2);
                let b2 = 0;
                for (let s = chances[0]; s <= r2; s += chances[b2]) {
                    b2++;
                }


                const game1 = type.games[b1]
                let game2 = type.games[b2]
                while (game2.name == game1.name) {
                    total2 = 0;
                    for (let i = 0; i < chances.length; i++) {
                        total2 += chances[i];
                    }
                    r2 = Math.floor(Math.random() * total2);
                    b2 = 0;
                    for (let s = chances[0]; s <= r2; s += chances[b2]) {
                        b2++;
                    }
                    game2 = type.games[b2]
                }


                await channel.send(`‚óæ`)
                const msg = await channel.send({
                    content: `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó‚óä‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
**–°–û–í–ú–ï–°–¢–ù–ê–Ø –ò–ì–†–ê**
–ò–≥—Ä–æ–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É:
üî∂ **${game1.name}**
:game_die: –ú–∞–∫—Å–∏–º—É–º **${suffix(game1.max)}** –∑–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—É—é –∏–≥—Ä—É

üî∑ **${game2.name}**
:game_die: –ú–∞–∫—Å–∏–º—É–º **${suffix(game2.max)}** –∑–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—É—é –∏–≥—Ä—É
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚óä‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
–ü—Ä–æ–≥–æ–ª–æ—Å—É–π—Ç–µ —Ä–µ–∞–∫—Ü–∏—è–º–∏, —É –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥!`
                })
                const filter = (reaction, user) => reaction.emoji.name === 'üî∂' || reaction.emoji.name === 'üî∑';

                const collector = msg.createReactionCollector({ filter, time: 30000 });
                await msg.react(`üî∂`)
                await msg.react(`üî∑`)
                collector.on('end', async (collected) => {
                    const sort = await collected.sort((a, b) => b.count - a.count)
                    if (sort.first().emoji.name == `üî∂`) {
                        const gameList = await guildData.guildgames.games.find(gm => gm.id == game1.name)
                        if (!gameList) {
                            guildData.guildgames.games.push({
                                id: game1.name,
                                played: 1
                            })
                        } else if (gameList.played >= game1.max) {
                            await msg.reply({
                                content: `–í—ã–±—Ä–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ (${game1.name}) –¥–æ—Å—Ç–∏–≥–ª–∞ —Å–≤–æ–µ–≥–æ –ª–∏–º–∏—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –∏–≥—Ä–µ... –ò–¥—ë—Ç –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –∏–≥—Ä—ã...`
                            })
                            return Functions.randomGame(client)
                        } else {
                            gameList.played += 1
                        }
                        await msg.reply({
                            content: `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó‚óä‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
**–°–û–í–ú–ï–°–¢–ù–ê–Ø –ò–ì–†–ê**
–ò–≥—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É...
:video_game: **${game1.name}**
:game_die: –ú–∞–∫—Å–∏–º—É–º **${suffix(game1.max)}** –∑–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—É—é –∏–≥—Ä—É
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚óä‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`
                        })

                        guildData.save()
                    } else if (sort.first().emoji.name == `üî∑`) {
                        const gameList = await guildData.guildgames.games.find(gm => gm.id == game2.name)
                        if (!gameList) {
                            guildData.guildgames.games.push({
                                id: game2.name,
                                played: 1
                            })
                        } else if (gameList.played >= game2.max) {
                            await msg.reply({
                                content: `–í—ã–±—Ä–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ (${game2.name}) –¥–æ—Å—Ç–∏–≥–ª–∞ —Å–≤–æ–µ–≥–æ –ª–∏–º–∏—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –∏–≥—Ä–µ... –ò–¥—ë—Ç –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –∏–≥—Ä—ã...`
                            })
                            return Functions.randomGame(client)
                        } else {
                            gameList.played += 1
                        }
                        await msg.reply({
                            content: `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó‚óä‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
**–°–û–í–ú–ï–°–¢–ù–ê–Ø –ò–ì–†–ê**
–ò–≥—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É...
:video_game: **${game2.name}**
:game_die: –ú–∞–∫—Å–∏–º—É–º **${suffix(game2.max)}** –∑–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—É—é –∏–≥—Ä—É
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚óä‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`
                        })

                        guildData.save()
                    }
                })
            } else if (type.type == `restrictment`) {
                const chances = []
                for (let i = 0; i < type.games.length; i++) {
                    let sps = type.games[i].specializations
                    let chance = type.games[i].chance
                    if (sps.includes(`Warrior`)) {
                        chance += 3 ** war
                    }
                    if (sps.includes(`Scout`)) {
                        chance += 3 ** sc
                    }
                    if (sps.includes(`Casual`)) {
                        chance += 3 ** cas
                    }
                    if (sps.includes(`Tactical`)) {
                        chance += 3 ** tact
                    }

                    chances.push(chance)
                }


                let total = 0;
                for (let i = 0; i < chances.length; i++) {
                    total += chances[i];
                }
                let r = Math.floor(Math.random() * total);
                let b = 0;
                for (let s = chances[0]; s <= r; s += chances[b]) {
                    b++;
                }
                const game = type.games[b]
                const gameList = await guildData.guildgames.games.find(gm => gm.id == game.name)
                const voiceMembersCheck = await voice.members.filter(member => member.user.bot === false)
                if (!gameList) {
                    guildData.guildgames.games.push({
                        id: game.name,
                        played: 1
                    })
                } else if (gameList.played >= game.max || voiceMembersCheck.size >= game.rest_num) {
                    return Functions.randomGame(client)
                } else {
                    gameList.played += 1
                }
                await channel.send(`‚óæ`)
                await channel.send({
                    content: `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó‚óä‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
**–°–û–í–ú–ï–°–¢–ù–ê–Ø –ò–ì–†–ê**
–ò–¥—ë—Ç –≤—ã–±–æ—Ä —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã...
:video_game: **${game.name}**
:game_die: –ú–∞–∫—Å–∏–º—É–º **${suffix(game.max)}** –∑–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—É—é –∏–≥—Ä—É
:warning: –î–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ. __${game.rest}!__
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚óä‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`
                })

                guildData.save()
            }

            if (!rule.restrictment || rule.restrictment == `SkyWars`) {
                await channel.send({
                    content: `:warning: –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ:
${rule.description}`
                })
            } else if (rule.restrictment == `randomMember`) {
                const randomNumber = Math.floor(Math.random() * voice.members.size) + 1
                await channel.send(`:warning: –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ:
${rule.description.replace(`%n`, randomNumber)}`)
            }
        }
    } catch (e) {
        const admin = await client.users.fetch(`491343958660874242`)
        console.log(e)
        var path = require('path');
        var scriptName = path.basename(__filename);
        await admin.send(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`)
        await admin.send(`=> ${e}.
**–§–∞–π–ª**: ${scriptName}`)
        await admin.send(`‚óæ`)
    }


}
module.exports = {
    randomGame
}
