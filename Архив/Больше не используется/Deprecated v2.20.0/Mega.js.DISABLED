const { SlashCommandBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType } = require('discord.js');
const { User } = require(`../../../src/schemas/userdata`)
const wait = require('node:timers/promises').setTimeout;
const chalk = require(`chalk`);
const ch_list = require(`../../../src/discord structure/channels.json`)
const { Guild } = require(`../../../src/schemas/guilddata`)
    ;

async function Mega(interaction, client) {
    try {
        const guildData = await Guild.findOne({ id: interaction.guild.id })
        const { user, member, guild } = interaction //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï
        const userData = await User.findOne({ userid: user.id })
        const box_role = await guild.roles.fetch(`992820494900412456`)
        if (!member.roles.cache.has(box_role.id) && !member.roles.cache.has(`567689925143822346`)) return interaction.reply({
            content: `–£ –≤–∞—Å –Ω–µ—Ç \`${box_role.name}\` –∫–æ—Ä–æ–±–∫–∏!`,
            ephemeral: true
        })
        await interaction.deferUpdate()
        await member.roles.remove(box_role.id)
        let { loot, act_exp, rank_exp, rumbik, cosmetic } = require(`../../../src/misc_functions/Boxes/Box loot/mega.json`)
        let chances = []
        let sum_loot = 0;
        for (let i_loot = 0; i_loot < loot.length; i_loot++) {
            if (loot[i_loot].rarity == "Common") {
                sum_loot += loot[i_loot].chance * userData.box_chances.common
                chances.push(loot[i_loot].chance * userData.box_chances.common)
            } else if (loot[i_loot].rarity == "Uncommon") {
                sum_loot += loot[i_loot].chance * userData.box_chances.uncommon
                chances.push(loot[i_loot].chance * userData.box_chances.uncommon)
            } else if (loot[i_loot].rarity == "Rare") {
                sum_loot += loot[i_loot].chance * userData.box_chances.rare
                chances.push(loot[i_loot].chance * userData.box_chances.rare)
            } else if (loot[i_loot].rarity == "Epic") {
                sum_loot += loot[i_loot].chance * userData.box_chances.epic
                chances.push(loot[i_loot].chance * userData.box_chances.epic)
            } else if (loot[i_loot].rarity == "Legendary") {
                sum_loot += loot[i_loot].chance * userData.box_chances.legendary
                chances.push(loot[i_loot].chance * userData.box_chances.legendary)
            } else if (loot[i_loot].rarity == "Mythical") {
                sum_loot += loot[i_loot].chance * userData.box_chances.mythical
                chances.push(loot[i_loot].chance * userData.box_chances.mythical)
            } else if (loot[i_loot].rarity == "RNG") {
                sum_loot += loot[i_loot].chance * userData.box_chances.RNG
                chances.push(loot[i_loot].chance * userData.box_chances.RNG)
            } else {
                sum_loot += loot[i_loot].chance * 1
                chances.push(loot[i_loot].chance * 1)
                console.log(`–ü—Ä–µ–¥–º–µ—Ç ${loot[i_loot].name} –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏!`)
            }
        }
        let r_loot1 = Math.floor(Math.random() * sum_loot);
        let i_loot1 = 0;
        for (let s = chances[0]; s <= r_loot1; s += chances[i_loot1]) {
            i_loot1++;
        }
        let r_loot2 = Math.floor(Math.random() * sum_loot);
        let i_loot2 = 0;
        for (let s = chances[0]; s <= r_loot2; s += chances[i_loot2]) {
            i_loot2++;
        }

        let sum_cosmetic = 0;
        for (let i_cosmetic = 0; i_cosmetic < cosmetic.length; i_cosmetic++) {
            sum_cosmetic += cosmetic[i_cosmetic].chance;
        }
        let r_cosmetic = Math.floor(Math.random() * sum_cosmetic);
        let i_cosmetic = 0;
        for (let s = cosmetic[0].chance; s <= r_cosmetic; s += cosmetic[i_cosmetic].chance) {
            i_cosmetic++;
        }

        let allChances = 0;
        for (let loo of loot) {
            allChances += loo.chance
        }
        let finalChance1 = ((loot[i_loot1].chance / allChances) * 100).toFixed(1)
        let finalChance2 = ((loot[i_loot2].chance / allChances) * 100).toFixed(1)

        //–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ª—É—Ç–µ    
        const r_loot_msg = await interaction.guild.channels.cache.get(ch_list.box)
            .send({
                content: `‚óæ
${interaction.member} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–≥—Ä–æ–º–Ω—É—é –∫–æ—Ä–æ–±–∫—É –æ—Ç –≥–∏–ª—å–¥–∏–∏.
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚Ç™€û‚Ç™‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
**1.** \`${loot[i_loot1].name}\` (–®–∞–Ω—Å: \`${finalChance1}%\`)
${loot[i_loot1].description}

**2.** \`${loot[i_loot2].name}\` (–®–∞–Ω—Å: \`${finalChance2}%\`)
${loot[i_loot2].description}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚Ç™€û‚Ç™‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∏–∑ –æ–≥—Ä–æ–º–Ω–æ–π –∫–æ—Ä–æ–±–∫–∏: ${cosmetic[i_cosmetic].name}
${cosmetic[i_cosmetic].description}
‚óæ`
            })

        //–í—ã–¥–∞—á–∞ –ª—É—Ç 1
        if (loot[i_loot1].type == "Color") {
            if (userData.rank_number < 6) {
                await r_loot_msg.reply({
                    content: `–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å **–õ–µ–≥–µ–Ω–¥–æ–π –≥–∏–ª—å–¥–∏–∏**, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ü–≤–µ—Ç–∞ –∏–∑ –∫–æ—Ä–æ–±–æ–∫!`
                })
                await r_loot_msg.react("üö´")
            } else {
                if (!userData.cosmetics_storage.colors.includes(loot[i_loot1].role)) {
                    userData.cosmetics_storage.colors.push(loot[i_loot1].role)
                    await r_loot_msg.react("‚úÖ")
                } else {
                    await r_loot_msg.react("üö´")
                }
            }
        } else if (loot[i_loot1].type == "Box" || userData.perks.store_items !== 0) {
            if (!member.roles.cache.has(loot[i_loot1].role) && (loot[i_loot1].role == `1020400007989444678` || loot[i_loot1].role == `1020400017330163712` || loot[i_loot1].role == `1020400015300120638`) && userData.rank_number >= 9) {
                await member.roles.add(loot[i_loot1].role)
                await r_loot_msg.react(`‚úÖ`)
            } else if (!member.roles.cache.has(loot[i_loot1].role) && (loot[i_loot1].role !== `1020400007989444678` && loot[i_loot1].role !== `1020400017330163712` && loot[i_loot1].role !== `1020400015300120638`)) {
                await member.roles.add(loot[i_loot1].role)
                await r_loot_msg.react(`‚úÖ`)
            } else if (member.roles.cache.has(loot[i_loot1].role)) {
                await member.roles.add(loot[i_loot1].role).catch(console.error);
                await r_loot_msg.react("‚úÖ")
            } else {
                await r_loot_msg.react(`‚ùå`)
                await r_loot_msg.reply({
                    content: `–í–∞—à —Ä–∞–Ω–≥ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —ç—Ç—É —Ä–æ–ª—å!`
                })
            }
        } else {
            if (!member.roles.cache.has(loot[i_loot1].role) && (loot[i_loot1].role == `1020400007989444678` || loot[i_loot1].role == `1020400017330163712` || loot[i_loot1].role == `1020400015300120638`) && userData.rank_number >= 9) {
                await member.roles.add(loot[i_loot1].role)
                await r_loot_msg.react(`‚úÖ`)
            } else if (!member.roles.cache.has(loot[i_loot1].role) && (loot[i_loot1].role !== `1020400007989444678` && loot[i_loot1].role !== `1020400017330163712` && loot[i_loot1].role !== `1020400015300120638`)) {
                await member.roles.add(loot[i_loot1].role)
                await r_loot_msg.react(`‚úÖ`)
            } else if (member.roles.cache.has(loot[i_loot1].role)) {
                await r_loot_msg.react(`‚ùå`)
            } else {
                await r_loot_msg.react(`‚ùå`)
                await r_loot_msg.reply({
                    content: `–í–∞—à —Ä–∞–Ω–≥ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —ç—Ç—É —Ä–æ–ª—å!`
                })
            }
        }


        if (loot[i_loot2].type == "Color") {
            if (userData.rank_number < 6) {
                await r_loot_msg.reply({
                    content: `–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å **–õ–µ–≥–µ–Ω–¥–æ–π –≥–∏–ª—å–¥–∏–∏**, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ü–≤–µ—Ç–∞ –∏–∑ –∫–æ—Ä–æ–±–æ–∫!`
                })
                await r_loot_msg.react("üö´")
            } else {
                if (!userData.cosmetics_storage.colors.includes(loot[i_loot2].role)) {
                    userData.cosmetics_storage.colors.push(loot[i_loot2].role)
                    await r_loot_msg.react("‚úÖ")
                } else {
                    await r_loot_msg.react("üö´")
                }
            }
        } else if (loot[i_loot2].type == "Box" || userData.perks.store_items !== 0) {
            if (!member.roles.cache.has(loot[i_loot2].role) && (loot[i_loot2].role == `1020400007989444678` || loot[i_loot2].role == `1020400017330163712` || loot[i_loot2].role == `1020400015300120638`) && userData.rank_number >= 9) {
                await member.roles.add(loot[i_loot2].role)
                await r_loot_msg.react(`‚úÖ`)
            } else if (!member.roles.cache.has(loot[i_loot2].role) && (loot[i_loot2].role !== `1020400007989444678` && loot[i_loot2].role !== `1020400017330163712` && loot[i_loot2].role !== `1020400015300120638`)) {
                await member.roles.add(loot[i_loot2].role)
                await r_loot_msg.react(`‚úÖ`)
            } else if (member.roles.cache.has(loot[i_loot2].role)) {
                await member.roles.add(loot[i_loot2].role).catch(console.error);
                await r_loot_msg.react("‚úÖ")
            } else {
                await r_loot_msg.react(`‚ùå`)
                await r_loot_msg.reply({
                    content: `–í–∞—à —Ä–∞–Ω–≥ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —ç—Ç—É —Ä–æ–ª—å!`
                })
            }
        } else {
            if (!member.roles.cache.has(loot[i_loot2].role) && (loot[i_loot2].role == `1020400007989444678` || loot[i_loot2].role == `1020400017330163712` || loot[i_loot2].role == `1020400015300120638`) && userData.rank_number >= 9) {
                await member.roles.add(loot[i_loot2].role)
                await r_loot_msg.react(`‚úÖ`)
            } else if (!member.roles.cache.has(loot[i_loot2].role) && (loot[i_loot2].role !== `1020400007989444678` && loot[i_loot2].role !== `1020400017330163712` && loot[i_loot2].role !== `1020400015300120638`)) {
                await member.roles.add(loot[i_loot2].role)
                await r_loot_msg.react(`‚úÖ`)
            } else if (member.roles.cache.has(loot[i_loot2].role)) {
                await r_loot_msg.react(`‚ùå`)
            } else {
                await r_loot_msg.react(`‚ùå`)
                await r_loot_msg.reply({
                    content: `–í–∞—à —Ä–∞–Ω–≥ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —ç—Ç—É —Ä–æ–ª—å!`
                })
            }
        }

        if (cosmetic[i_cosmetic].type == 'symbol') {
            if (userData.rank_number < 4) {
                await r_loot_msg.react("üö´")
                await r_loot_msg.reply({
                    content: `–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å **–ß–µ–º–ø–∏–æ–Ω–æ–º –≥–∏–ª—å–¥–∏–∏** –∏–ª–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–Ω–∞—á–∫–∞!`
                })
            } else {
                if (!userData.cosmetics_storage.symbols.includes(cosmetic[i_cosmetic].symbol)) {
                    userData.cosmetics_storage.symbols.push(cosmetic[i_cosmetic].symbol)
                    await r_loot_msg.react("‚úÖ")
                } else {
                    await r_loot_msg.react("üö´")
                    await r_loot_msg.reply({
                        content: `–£ –≤–∞—Å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ —É–∂–µ –∏–º–µ–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–π –∑–Ω–∞—á–æ–∫!`
                    })
                }
            }
        } else if (cosmetic[i_cosmetic].type == 'frame') {
            if (userData.rank_number < 5) {
                await r_loot_msg.react("üö´")
                await r_loot_msg.reply({
                    content: `–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å **–ó–≤—ë–∑–¥–æ—á–∫–æ–π –≥–∏–ª—å–¥–∏–∏** –∏–ª–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–º–∫–∏!`
                })
            } else {
                if (!userData.cosmetics_storage.ramkas.includes({ ramka1: cosmetic[i_cosmetic].symbol, ramka2: cosmetic[i_cosmetic].symbol })) {
                    userData.cosmetics_storage.ramkas.push({
                        ramka1: cosmetic[i_cosmetic].symbol,
                        ramka2: cosmetic[i_cosmetic].symbol
                    })
                    await r_loot_msg.react("‚úÖ")
                } else {
                    await r_loot_msg.react("üö´")
                    await r_loot_msg.reply({
                        content: `–£ –≤–∞—Å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ —É–∂–µ –∏–º–µ–µ—Ç—Å—è –¥–∞–Ω–Ω–∞—è —Ä–∞–º–∫–∞!`
                    })
                }
            }
        } else if (cosmetic[i_cosmetic].type == 'suffix') {
            if (userData.rank_number < 8) {
                await r_loot_msg.react("üö´")
                await r_loot_msg.reply({
                    content: `–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å **–õ–æ—Ä–¥–æ–º –≥–∏–ª—å–¥–∏–∏** –∏–ª–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Å—Ç—Ñ–∏–∫—Å–∞!`
                })
            } else {
                if (!userData.cosmetics_storage.suffixes.includes(cosmetic[i_cosmetic].symbol)) {
                    userData.cosmetics_storage.suffixes.push(cosmetic[i_cosmetic].symbol)
                    await r_loot_msg.react("‚úÖ")
                } else {
                    await r_loot_msg.react("üö´")
                    await r_loot_msg.reply({
                        content: `–£ –≤–∞—Å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ —É–∂–µ –∏–º–µ–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–π –ø–æ—Å—Ç—Ñ–∏–∫—Å!`
                    })
                }
            }
        } else if (cosmetic[i_cosmetic].type == 'rank') {
            if (userData.rank_number < 10) {
                await r_loot_msg.react("üö´")
                await r_loot_msg.reply({
                    content: `–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å **–ü–æ–≤–µ–ª–∏—Ç–µ–ª–µ–º –≥–∏–ª—å–¥–∏–∏** –∏–ª–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–Ω–∞—á–∫–∞ —Ä–∞–Ω–≥–∞!`
                })
            } else {
                if (!userData.cosmetics_storage.rank.includes(cosmetic[i_cosmetic].symbol)) {
                    userData.cosmetics_storage.rank.push(cosmetic[i_cosmetic].symbol)
                    await r_loot_msg.react("‚úÖ")
                } else {
                    await r_loot_msg.react("üö´")
                    await r_loot_msg.reply({
                        content: `–£ –≤–∞—Å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ —É–∂–µ –∏–º–µ–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–π –∑–Ω–∞—á–æ–∫ —Ä–∞–Ω–≥–∞!`
                    })
                }
            }
        }

        //–†—É–º–±–∏–∫–∏ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)

        //–†–∞–Ω–¥–æ–º - —Ä—É–º–±–∏–∫–∏
        let sum_rumb = 0;
        for (let i_rumb = 0; i_rumb < rumbik.length; i_rumb++) {
            sum_rumb += rumbik[i_rumb].chance;
        }
        let r_rumbik = Math.floor(Math.random() * sum_rumb);
        let i_rumb = 0;
        for (let s = rumbik[0].chance; s <= r_rumbik; s += rumbik[i_rumb].chance) {
            i_rumb++;
        }
        let rumb_amount = rumbik[i_rumb].amount * userData.pers_rumb_boost
        //–°–æ–æ–±—â–µ–Ω–∏–µ - —Ä—É–º–±–∏–∫–∏                       
        interaction.guild.channels.cache.get(ch_list.rumb).send(
            `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
${interaction.member} +${rumb_amount}<:Rumbik:883638847056003072>
\`–ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –æ–≥—Ä–æ–º–Ω–æ–π –∫–æ—Ä–æ–±–∫–∏.\`
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`
        );

        if (userData.rank_number >= 3) {
            userData.rumbik += rumb_amount
            userData.progress.items.find(it => it.name == 'RUMBIKS_TOTAL').total_items += rumb_amount
        } else {

            userData.rumbik += 0
        }
        //–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)


        //–†–∞–Ω–¥–æ–º - –æ–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤
        let sum_rank = 0;
        for (let i_rank = 0; i_rank < rank_exp.length; i_rank++) {
            sum_rank += rank_exp[i_rank].chance;
        }
        let r_rank = Math.floor(Math.random() * sum_rank);
        let i_rank = 0;
        for (let s = rank_exp[0].chance; s <= r_rank; s += rank_exp[i_rank].chance) {
            i_rank++;
        }

        //–°–æ–æ–±—â–µ–Ω–∏–µ - –æ–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤    
        let formula_rank = rank_exp[i_rank].amount * userData.pers_rank_boost + Math.round(rank_exp[i_rank].amount * userData.perks.rank_boost * 0.05)
        userData.rank += formula_rank
        interaction.guild.channels.cache.get(ch_list.rank).send(
            `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
${interaction.member} +${formula_rank}üí†
\`–ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –æ–≥—Ä–æ–º–Ω–æ–π –∫–æ—Ä–æ–±–∫–∏.\`
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`
        );



        //–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

        //–†–∞–Ω–¥–æ–º - –æ–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        let sum_act = 0;
        for (let i_act = 0; i_act < act_exp.length; i_act++) {
            sum_act += act_exp[i_act].chance;
        }
        let r_act = Math.floor(Math.random() * sum_act);
        let i_act = 0;
        for (let s = act_exp[0].chance; s <= r_act; s += act_exp[i_act].chance) {
            i_act++;
        }

        let actExp = act_exp[i_act].amount * userData.pers_act_boost * guildData.act_exp_boost
        interaction.guild.channels.cache.get(ch_list.act).send(
            `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
${interaction.member} +${actExp}üåÄ
\`–ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –æ–≥—Ä–æ–º–Ω–æ–π –∫–æ—Ä–æ–±–∫–∏.\`
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`
        );
        userData.exp += actExp //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï


        userData.save();
        client.ActExp(userData.userid)
        await wait(1000)
            client.ProgressUpdate(interaction.member);

        console.log(chalk.blackBright(`[${new Date()}]`) + chalk.magentaBright(`[${interaction.user.tag} –æ—Ç–∫—Ä—ã–ª —Å–æ–∫—Ä–æ–≤–∏—â–µ]`) + chalk.gray(`: +${act_exp[i_act].amount} –æ–ø—ã—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, +${rank_exp[i_rank].amount} –æ–ø—ã—Ç–∞ —Ä–∞–Ω–≥–æ–≤, +${rumbik[i_rumb].amount} —Ä—É–º–±–∏–∫–æ–≤,  ${loot[i_loot1].name} –∏ ${loot[i_loot2].name}`))


    } catch (e) {
        const admin = await client.users.fetch(`491343958660874242`)
        console.log(e)
        await admin.send({
            content: `-> \`\`\`${e.stack}\`\`\``
        }).catch()
    }
}
module.exports = {
    category: `box`,
    plugin: `info`,
    Mega
};