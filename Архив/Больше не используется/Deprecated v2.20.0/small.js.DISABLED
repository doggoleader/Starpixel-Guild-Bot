const { SlashCommandBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');

const { User } = require(`../../../src/schemas/userdata`);
const chalk = require(`chalk`);
const ch_list = require(`../../../src/discord structure/channels.json`)


async function Small(interaction, client) {
    try {
        const { Guild } = require(`../../../src/schemas/guilddata`)
        const guildData = await Guild.findOne({ id: interaction.guild.id })
        const user = interaction.member.user //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï
        const userData = await User.findOne({ userid: user.id })



        const { roles } = interaction.member //–£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã
        const role = await interaction.guild.roles  //–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –¥–ª—è role
            .fetch("510932601721192458") //ID –∫–æ—Ä–æ–±–∫–∏
            .catch(console.error);
        if (roles.cache.has("510932601721192458") || roles.cache.has("567689925143822346")) { //–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –∫–æ—Ä–æ–±–∫–∏ || –ø—Ä–∞–≤–ª–µ–Ω–∏—è
            const cmd_name = `small` //–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            const timestamp = Math.round(interaction.createdTimestamp / 1000)
            const opener = interaction.member.id;
            await roles.remove(role).catch(console.error); //–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –∫–æ—Ä–æ–±–∫–∏

            //–õ—É—Ç –∏–∑ –∫–æ—Ä–æ–±–æ–∫
            //–°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
            //name - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
            //chance - –®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
            //roleID - ID —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è —Å–≤—è–∑–∞–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º –ª—É—Ç–æ–º.

            //–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            await interaction.deferUpdate()
            let { loot, act_exp, rank_exp } = require(`../../../src/misc_functions/Boxes/Box loot/small.json`)

            //—Ä–∞–Ω–¥–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            let chances = []
            let sum_loot = 0;
            for (let i_loot = 0; i_loot < loot.length; i_loot++) {
                if (loot[i_loot].rarity == "Common") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.common
                    chances.push(loot[i_loot].chance * userData.box_chances.common)
                } else if (loot[i_loot].rarity == "Uncommon") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.uncommon
                    chances.push(loot[i_loot].chance * userData.box_chances.uncommon)
                } else if (loot[i_loot].rarity == "Rare") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.rare
                    chances.push(loot[i_loot].chance * userData.box_chances.rare)
                } else if (loot[i_loot].rarity == "Epic") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.epic
                    chances.push(loot[i_loot].chance * userData.box_chances.epic)
                } else if (loot[i_loot].rarity == "Legendary") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.legendary
                    chances.push(loot[i_loot].chance * userData.box_chances.legendary)
                } else if (loot[i_loot].rarity == "Mythical") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.mythical
                    chances.push(loot[i_loot].chance * userData.box_chances.mythical)
                } else if (loot[i_loot].rarity == "RNG") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.RNG
                    chances.push(loot[i_loot].chance * userData.box_chances.RNG)
                } else {
                    sum_loot += loot[i_loot].chance * 1
                    chances.push(loot[i_loot].chance * 1)
                    console.log(`–ü—Ä–µ–¥–º–µ—Ç ${loot[i_loot].name} –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏!`)
                }
            }
            let r_loot = Math.floor(Math.random() * sum_loot);
            let i_loot = 0;
            for (let s = chances[0]; s <= r_loot; s += chances[i_loot]) {
                i_loot++;
            }
            let allChances = 0;
            for (let loo of loot) {
                allChances += loo.chance
            }
            let finalChance1 = ((loot[i_loot].chance / allChances) * 100).toFixed(1)
            const before = await interaction.member.roles.cache.has(loot[i_loot].roleID)

            //–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ª—É—Ç–µ    
            const button = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`changeitem`)
                        .setLabel(`–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç`)
                        .setEmoji(`‚ú®`)
                        .setStyle(ButtonStyle.Primary)
                        .setDisabled(true)


                )
            const r_loot_msg = await interaction.guild.channels.cache.get(ch_list.box)
                .send({
                    content: `‚óæ
<@${opener}> –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–∞–ª–µ–Ω—å–∫—É—é –∫–æ—Ä–æ–±–∫—É –æ—Ç –≥–∏–ª—å–¥–∏–∏.
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄx‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
\`${loot[i_loot].name}\` (–®–∞–Ω—Å: \`${finalChance1}%\`)
${loot[i_loot].description}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄx‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
‚óæ`,
                    components: [button]
                })
            if (loot[i_loot].type == "Color") {
                if (userData.rank_number < 6) {
                    await r_loot_msg.reply({
                        content: `–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å **–õ–µ–≥–µ–Ω–¥–æ–π –≥–∏–ª—å–¥–∏–∏**, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ü–≤–µ—Ç–∞ –∏–∑ –∫–æ—Ä–æ–±–æ–∫!`
                    })
                    await r_loot_msg.react("üö´")
                } else {
                    if (!userData.cosmetics_storage.colors.includes(loot[i_loot].roleID)) {
                        userData.cosmetics_storage.colors.push(loot[i_loot].roleID)
                        await r_loot_msg.react("‚úÖ")
                    } else {
                        await r_loot_msg.react("üö´")
                    }
                }
            } else if (loot[i_loot].type == "Box" || userData.perks.store_items !== 0) {
                if (!roles.cache.has(loot[i_loot].roleID) && loot[i_loot].name != `–ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç.` || !roles.cache.has(loot[i_loot].roleID) && loot[i_loot].name == `–ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç.` && (roles.cache.has("597746051998285834") || roles.cache.has("572124468189593622"))) {
                    await roles.add(loot[i_loot].roleID).catch(console.error);
                    await r_loot_msg.react("‚úÖ")
                } else {
                    if (loot[i_loot].name == `–ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç.` && !roles.cache.has("597746051998285834" || "572124468189593622")) {
                        await r_loot_msg.react("üö´")
                    } else {
                        if (userData.stacked_items.length < userData.upgrades.inventory_size) {
                            await userData.stacked_items.push(loot[i_loot].roleID)
                            await r_loot_msg.react("‚úÖ")
                        } else {
                            await interaction.guild.channels.cache.get(ch_list.box).send({
                                content: `–ú—ã –Ω–µ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω. –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª <#1141026403765211136>!`
                            })
                            await r_loot_msg.react("üö´")
                        }
                    }
                };
            } else {
                if (!roles.cache.has(loot[i_loot].roleID) && loot[i_loot].name != `–ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç.` || !roles.cache.has(loot[i_loot].roleID) && loot[i_loot].name == `–ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç.` && (roles.cache.has("597746051998285834") || roles.cache.has("572124468189593622"))) {
                    await roles.add(loot[i_loot].roleID).catch(console.error);
                    await r_loot_msg.react("‚úÖ")
                } else {
                    if (loot[i_loot].name == `–ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç.` && !roles.cache.has("597746051998285834" || "572124468189593622") || roles.cache.has(loot[i_loot].roleID)) {
                        await r_loot_msg.react("üö´")
                    };
                };
            }


            if (before == true && userData.perks.change_items >= 1 && loot[i_loot].name !== "–ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç.") {
                button.components[0].setDisabled(false)

                await r_loot_msg.edit({
                    content: `‚óæ
<@${opener}> –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–∞–ª–µ–Ω—å–∫—É—é –∫–æ—Ä–æ–±–∫—É –æ—Ç –≥–∏–ª—å–¥–∏–∏.
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄx‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
\`${loot[i_loot].name}\` (–®–∞–Ω—Å: \`${finalChance1}%\`)
${loot[i_loot].description}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄx‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
‚óæ
–£ –≤–∞—Å –µ—Å—Ç—å –ø–µ—Ä–∫ \`‚ú® –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\`, –ø–æ—ç—Ç–æ–º—É –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 60 —Å–µ–∫—É–Ω–¥!`,
                    components: [button]
                })

                const filter = (i) => i.user.id == interaction.user.id
                const collector = r_loot_msg.createMessageComponentCollector({
                    filter,
                    time: 60000,
                    max: 1
                })
                collector.on('collect', async (int) => {
                    await int.deferUpdate()
                    let list = await loot.filter(item => item.type == loot[i_loot].type && item.rarity == loot[i_loot].rarity && item.name !== loot[i_loot].name)
                    let sum = 0;
                    for (let i_loot = 0; i_loot < list.length; i_loot++) {
                        sum += list[i_loot].chance;
                    }
                    let r = Math.floor(Math.random() * sum);
                    let i = 0;
                    for (let s = list[0].chance; s <= r; s += list[i].chance) {
                        i++;
                    }
                    if (list[i].type == "Color") {
                        if (userData.rank_number < 6) {
                            await r_loot_msg.reply({
                                content: `–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å **–õ–µ–≥–µ–Ω–¥–æ–π –≥–∏–ª—å–¥–∏–∏**, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ü–≤–µ—Ç–∞ –∏–∑ –∫–æ—Ä–æ–±–æ–∫!`
                            })
                            await r_loot_msg.react("üö´")
                        } else {
                            if (!userData.cosmetics_storage.colors.includes(list[i].roleID)) {
                                userData.cosmetics_storage.colors.push(list[i].roleID)
                                await r_loot_msg.react("‚úÖ")
                            } else {
                                await r_loot_msg.react("üö´")
                            }
                        }
                    } else if (list[i].type == "Box" || userData.perks.store_items !== 0) {
                        if (interaction.member.roles.cache.has(list[i].roleID)) {

                            if (userData.stacked_items.length < userData.upgrades.inventory_size) {
                                await userData.stacked_items.push(list[i].roleID)
                                await r_loot_msg.react(`‚ú®`)
                                await r_loot_msg.react(`‚û°`)
                                await r_loot_msg.react(`üíö`)
                            } else {
                                await interaction.guild.channels.cache.get(ch_list.box).send({
                                    content: `–ú—ã –Ω–µ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω. –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª <#1141026403765211136>!`
                                })
                                await r_loot_msg.react(`‚ú®`)
                                await r_loot_msg.react(`‚û°`)
                                await r_loot_msg.react(`üõë`)
                            }
                        } else if (!interaction.member.roles.cache.has(list[i].roleID)) {
                            await r_loot_msg.react(`‚ú®`)
                            await r_loot_msg.react(`‚û°`)
                            await r_loot_msg.react(`üíö`)
                            await interaction.member.roles.add(list[i].roleID)
                        }
                    } else {
                        if (interaction.member.roles.cache.has(list[i].roleID)) {
                            await r_loot_msg.react(`‚ú®`)
                            await r_loot_msg.react(`‚û°`)
                            await r_loot_msg.react(`üõë`)
                        } else if (!interaction.member.roles.cache.has(list[i].roleID)) {
                            await r_loot_msg.react(`‚ú®`)
                            await r_loot_msg.react(`‚û°`)
                            await r_loot_msg.react(`üíö`)
                            await interaction.member.roles.add(list[i].roleID)
                        }
                    }


                    finalChance1 = ((list[i].chance / allChances) * 100).toFixed(1)
                    button.components[0].setDisabled(true)
                    await r_loot_msg.edit({
                        content: `‚óæ
<@${opener}> –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–∞–ª–µ–Ω—å–∫—É—é –∫–æ—Ä–æ–±–∫—É –æ—Ç –≥–∏–ª—å–¥–∏–∏.
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄx‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
\`${list[i].name}\` (–®–∞–Ω—Å: \`${finalChance1}%\`)
${list[i].description}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄx‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
‚óæ
~~–£ –≤–∞—Å –µ—Å—Ç—å –ø–µ—Ä–∫ \`‚ú® –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\`, –ø–æ—ç—Ç–æ–º—É –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 60 —Å–µ–∫—É–Ω–¥!~~`,
                        components: [button]
                    })
                    userData.save()
                    collector.stop()
                })

                collector.on('end', async (err) => {
                    button.components[0].setDisabled(true)
                    await r_loot_msg.edit({
                        components: [button]
                    })
                })
            }


            //–†–∞–Ω–¥–æ–º - –æ–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤
            let sum_rank = 0;
            for (let i_rank = 0; i_rank < rank_exp.length; i_rank++) {
                sum_rank += rank_exp[i_rank].chance;
            }
            let r_rank = Math.floor(Math.random() * sum_rank);
            let i_rank = 0;
            for (let s = rank_exp[0].chance; s <= r_rank; s += rank_exp[i_rank].chance) {
                i_rank++;
            }

            //–°–æ–æ–±—â–µ–Ω–∏–µ - –æ–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤     
            let formula_rank = rank_exp[i_rank].amount * userData.pers_rank_boost + Math.round(rank_exp[i_rank].amount * userData.perks.rank_boost * 0.05)
            userData.rank += formula_rank
            interaction.guild.channels.cache.get(ch_list.rank).send(
                `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
<@${opener}> +${formula_rank}üí†
\`–ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –º–∞–ª–µ–Ω—å–∫–æ–π –∫–æ—Ä–æ–±–∫–∏.\`
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`
            );



            //–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

            //–†–∞–Ω–¥–æ–º - –æ–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            let sum_act = 0;
            for (let i_act = 0; i_act < act_exp.length; i_act++) {
                sum_act += act_exp[i_act].chance;
            }
            let r_act = Math.floor(Math.random() * sum_act);
            let i_act = 0;
            for (let s = act_exp[0].chance; s <= r_act; s += act_exp[i_act].chance) {
                i_act++;
            }

            let actExp = act_exp[i_act].amount * userData.pers_act_boost * guildData.act_exp_boost
            interaction.guild.channels.cache.get(ch_list.act).send(
                `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
<@${opener}> +${actExp}üåÄ
\`–ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –º–∞–ª–µ–Ω—å–∫–æ–π –∫–æ—Ä–æ–±–∫–∏.\`
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`
            );
            userData.exp += actExp //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï

            userData.save();
            client.ActExp(userData.userid)
            console.log(chalk.blackBright(`[${new Date()}]`) + chalk.magentaBright(`[${interaction.user.tag} –æ—Ç–∫—Ä—ã–ª –º–∞–ª–µ–Ω—å–∫—É—é –∫–æ—Ä–æ–±–∫—É]`) + chalk.gray(`: +${act_exp[i_act].amount} –æ–ø—ã—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, +${rank_exp[i_rank].amount} –æ–ø—ã—Ç–∞ —Ä–∞–Ω–≥–æ–≤ –∏ ${loot[i_loot].name}`))

        } else {
            await interaction.reply({
                content: `–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç \`${role.name}\` –∫–æ—Ä–æ–±–∫–∞!`,
                ephemeral: true
            })
        }
    } catch (e) {
        const admin = await client.users.fetch(`491343958660874242`)
        console.log(e)
        await admin.send({
            content: `-> \`\`\`${e.stack}\`\`\``
        }).catch()
    }
}
module.exports = {
    category: `box`,
    plugin: `info`,
    Small
};