const { ContextMenuCommandBuilder, ApplicationCommandType, ModalBuilder, TextInputBuilder, ActionRowBuilder, TextInputStyle, ModalSubmitInteraction, InteractionType, EmbedBuilder, SlashCommandBuilder, ButtonBuilder, ButtonStyle, ComponentType, StringSelectMenuBuilder, ChannelType, UserSelectMenuBuilder } = require('discord.js');
const fetch = require(`node-fetch`);
const wait = require(`node:timers/promises`).setTimeout
const api = process.env.hypixel_apikey;
const { User } = require(`../../schemas/userdata`)
const { Guild } = require(`../../schemas/guilddata`)
const { Apply } = require(`../../schemas/applications`)
const { Birthday } = require(`../../schemas/birthday`)
const chalk = require(`chalk`);
const prettyMilliseconds = require(`pretty-ms`); //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï
const ch_list = require(`../../discord structure/channels.json`);
const { calcActLevel, getLevel, rankName, monthName } = require(`../../functions`);
const linksInfo = require(`../../discord structure/links.json`)
const rolesInfo = require(`../../discord structure/roles.json`);
const { Channel } = require('node:diagnostics_channel');

module.exports = {
    category: `admin_only`,
    data: new ContextMenuCommandBuilder()
        .setName(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ`)
        .setType(ApplicationCommandType.User)
        .setDMPermission(false),
    async execute(interaction, client) {
        try {
            await interaction.deferReply({ fetchReply: true })
            let user = interaction.targetUser
            const guild = await client.guilds.fetch(`320193302844669959`)
            let intMember = await guild.members.fetch(interaction.user.id)
            let member = interaction.targetMember
            if (!intMember || !intMember.roles.cache.has(`504887113649750016`)) {
                await interaction.editReply({
                    content: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, —Ç–∞–∫ –∫–∞–∫ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥–∏–ª—å–¥–∏–∏!`,
                    fetchReply: true
                })
                await wait(10000)
                await interaction.deleteReply()
                return
            }
            if (user.bot) {
                await interaction.editReply({
                    content: `${user} —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º, –∞ –∑–Ω–∞—á–∏—Ç —É –Ω–µ–≥–æ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è :'(`,
                    fetchReply: true
                })
                await wait(10000)
                await interaction.deleteReply()
                return
            }
            if (!member.roles.cache.has(`504887113649750016`) || !member) {
                await interaction.editReply({
                    content: `–î–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–∏–ª—å–¥–∏–∏!`,
                    fetchReply: true
                })
                await wait(10000)
                await interaction.deleteReply()
                return
            }

            let users = await User.find().then(users => {
                return users.filter(async user => await guild.members.fetch(user.userid))
            })
            let sort1 = users.sort((a, b) => {
                return b.exp - a.exp
            })
            let sorts = sort1.sort((a, b) => {
                return b.level - a.level
            })
            var i = 0
            while (sorts[i].userid !== user.id) {
                i++
            }
            let userData = sorts[i]
            if (!userData) {
                await interaction.editReply({
                    content: `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ!`,
                    fetchReply: true
                })
                await wait(10000)
                await interaction.deleteReply()
                return
            }
            let rank = i + 1
            let neededXP = 5 * (Math.pow(userData.level, 2)) + (50 * userData.level) + 100;
            let part1
            let part2
            if (userData.exp >= 1000) {
                part1 = (userData.exp / 1000).toFixed(1) + `k`
            } else part1 = userData.exp
            if (neededXP >= 1000) {
                part2 = (neededXP / 1000).toFixed(1) + `k`
            } else part2 = neededXP
            let colorRole = await guild.roles.fetch(userData.custom_color?.role ? userData.custom_color.role : `nn`)
            if (!colorRole) colorRole = `–ù–µ —Å–æ–∑–¥–∞–Ω–∞`



            const main = new EmbedBuilder()
                .setColor(Number(linksInfo.bot_color))
                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                .setThumbnail(user.displayAvatarURL())
                .setTimestamp(Date.now())
                .setDescription(
                    `**–û–°–ù–û–í–ù–û–ï**
\`–†–∞–Ω–≥ –≤ –≥–∏–ª—å–¥–∏–∏\` - ${rankName(userData.rank_number)}
\`–†—É–º–±–∏–∫–∏\` - ${userData.rumbik}<:Rumbik:883638847056003072>
\`–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤\` - ${userData.rank}üí†
\`–ü–æ—Å–µ—â–µ–Ω–æ —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∏–≥—Ä\` - ${userData.visited_games} –∏–≥—Ä
\`–ë–∏–ª–µ—Ç—ã\` - ${userData.tickets}üè∑
\`–û–ø—ã—Ç–∞ –≥–∏–ª—å–¥–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\` - ${userData.gexp} GEXP
\`–ú–µ–¥–∞–ª—å ü•á\` - ${userData.medal_1} —à—Ç.
\`–ú–µ–¥–∞–ª—å ü•à\` - ${userData.medal_2} —à—Ç.
\`–ú–µ–¥–∞–ª—å ü•â\` - ${userData.medal_3} —à—Ç.
\`–°–æ–±—Ä–∞–Ω–æ –∑–≤—ë–∑–¥–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤\` - ${userData.starway.current} ‚ú®
\`–ù–µ–ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤\` - ${userData.stacked_items.length}
\`–°–±—Ä–æ—à–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å\` - ${userData.times_reset} —Ä–∞–∑`)

            const selectMenu = new ActionRowBuilder()
                .addComponents(
                    new StringSelectMenuBuilder()
                        .setCustomId(`profilemenu`)
                        .setPlaceholder(`–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å`)
                        .addOptions(
                            {
                                label: `–û—Å–Ω–æ–≤–Ω–æ–µ`,
                                description: `–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ`,
                                emoji: `üìÉ`,
                                default: true,
                                value: `main`
                            },
                            {
                                label: `–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                                description: `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —É—Ä–æ–≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                                emoji: `üåÄ`,
                                default: false,
                                value: `act`
                            },
                            {
                                label: `–°—Ç–∏—Ö–∏–∏`,
                                description: `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –Ω–∞–≤—ã–∫–∞—Ö –≤ —Å—Ç–∏—Ö–∏—è—Ö`,
                                emoji: `üåä`,
                                default: false,
                                value: `elem`
                            },
                            {
                                label: `–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≥–∏–ª—å–¥–∏–∏`,
                                description: `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö`,
                                emoji: `üèÖ`,
                                default: false,
                                value: `achievements`
                            },
                            {
                                label: `–ü–µ—Ä–∫–∏`,
                                description: `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –ø–µ—Ä–∫–∞—Ö –≤ –≥–∏–ª—å–¥–∏–∏`,
                                emoji: `üìç`,
                                default: false,
                                value: `perks`
                            },
                            {
                                label: `–û–ø—ã—Ç –≥–∏–ª—å–¥–∏–∏`,
                                description: `–í–∞—à –æ–ø—ã—Ç –≥–∏–ª—å–¥–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π`,
                                emoji: `üî∞`,
                                default: false,
                                value: `gexp`
                            },
                            {
                                label: `–ö–≤–µ—Å—Ç—ã –∏ –º–∞—Ä–∞—Ñ–æ–Ω`,
                                description: `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –∫–≤–µ—Å—Ç–æ–≤/–∑–∞–¥–∞–Ω–∏–π/—ç—Ç–∞–ø–æ–≤ –º–∞—Ä–∞—Ñ–æ–Ω–∞`,
                                emoji: `üí™`,
                                default: false,
                                value: `quests`
                            },
                            {
                                label: `–ú–∞–≥–∞–∑–∏–Ω—ã –≥–∏–ª—å–¥–∏–∏`,
                                description: `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫/–ø—Ä–æ–¥–∞–∂ –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö`,
                                emoji: `üí∞`,
                                default: false,
                                value: `shops`
                            },
                            {
                                label: `–ú–Ω–æ–∂–∏—Ç–µ–ª–∏`,
                                description: `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –º–Ω–æ–∂–∏—Ç–µ–ª—è—Ö`,
                                emoji: `üî∫`,
                                default: false,
                                value: `boosters`
                            },
                            {
                                label: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ü–≤–µ—Ç`,
                                description: `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ü–≤–µ—Ç–µ`,
                                emoji: `üü£`,
                                default: false,
                                value: `colors`
                            },
                            {
                                label: `–®–∞–Ω—Å—ã –Ω–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏`,
                                description: `–í–∞—à–∏ —à–∞–Ω—Å—ã –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é —Ä–µ–¥–∫–æ—Å—Ç—å –≤ –∫–æ—Ä–æ–±–∫–∞—Ö`,
                                emoji: `üé±`,
                                default: false,
                                value: `chances`
                            },
                            {
                                label: `–û–± —É—á–∞—Å—Ç–Ω–∏–∫–µ`,
                                description: `–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ –≥–∏–ª—å–¥–∏–∏`,
                                emoji: `‚ùî`,
                                default: false,
                                value: `about`
                            },
                        )
                )

            const userMenu = new ActionRowBuilder()
                .addComponents(
                    new UserSelectMenuBuilder()
                        .setCustomId(`usermenu`)
                        .setMaxValues(1)
                        .setPlaceholder(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å`)
                )



            const msg = await interaction.editReply({
                embeds: [main],
                components: [selectMenu, userMenu],
                fetchReply: true
            })

            const collector = msg.createMessageComponentCollector()

            collector.on(`collect`, async (i) => {
                if (i.customId == `profilemenu`) {
                    const value = i.values[0]
                    if (i.user.id == interaction.user.id) {

                        if (value == `main`) {
                            await selectMenu.components[0].options.forEach(option => {
                                if (option.data.value == value) {
                                    option.data.default = true
                                } else option.data.default = false
                            })
                            await i.update({
                                embeds: [main],
                                components: [selectMenu, userMenu]
                            })
                        } else if (value == `act`) {
                            const act = new EmbedBuilder()
                                .setColor(Number(linksInfo.bot_color))
                                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                                .setThumbnail(user.displayAvatarURL())
                                .setTimestamp(Date.now())
                                .setDescription(`**–£–†–û–í–ï–ù–¨ –ê–ö–¢–ò–í–ù–û–°–¢–ò**
\`–ü—Ä–æ–≥—Ä–µ—Å—Å\` - ${part1}/${part2}üåÄ
\`–£—Ä–æ–≤–µ–Ω—å\` - ${userData.level}
\`–í—Å–µ–≥–æ –æ–ø—ã—Ç–∞\` - ${calcActLevel(0, userData.level, userData.exp)}üåÄ
\`–ü–æ–∑–∏—Ü–∏—è\` - #${rank}`)
                            await selectMenu.components[0].options.forEach(option => {
                                if (option.data.value == value) {
                                    option.data.default = true
                                } else option.data.default = false
                            })
                            await i.update({
                                embeds: [act],
                                components: [selectMenu, userMenu]
                            })
                        } else if (value == `elem`) {
                            const elem = new EmbedBuilder()
                                .setColor(Number(linksInfo.bot_color))
                                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                                .setThumbnail(user.displayAvatarURL())
                                .setTimestamp(Date.now())
                                .setDescription(`**–ù–ê–í–´–ö–ò –ü–ò–¢–û–ú–¶–ï–í**
            
__**–ó–µ–º–ª—è**__
\`–í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ –≥–æ—Ä–Ω—ã—Ö –ø–æ—Ä–æ–¥\` - ${userData.elements.mountains}/1
\`–ë—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π\` - ${userData.elements.fast_grow}/1
\`–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ–¥ –∑–µ–º–ª—ë–π\` - ${userData.elements.underground}/1

__**–í–æ–¥–∞**__
\`–ü–ª–∞–≤–∞–Ω–∏–µ –Ω–∞ –≥–ª—É–±–∏–Ω–µ\` - ${userData.elements.diving}/1
\`–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —Ç–µ—á–µ–Ω–∏—è–º\` - ${userData.elements.resistance}/1
\`–ü–æ–¥–≤–æ–¥–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ\` - ${userData.elements.respiration}/1

__**–û–≥–æ–Ω—å**__
\`–ó–∞—â–∏—Ç–∞ –æ—Ç –æ–≥–Ω—è\` - ${userData.elements.fire_resistance}/1
\`–£–¥–∞—Ä –º–æ–ª–Ω–∏–∏\` - ${userData.elements.lightning}/1
\`–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–º–µ–Ω–µ–º\` - ${userData.elements.flame}/1

__**–í–æ–∑–¥—É—Ö**__
\`–ü–æ–ª—ë—Ç –≤ –Ω–µ–±–µ—Å–∞—Ö\` - ${userData.elements.flying}/1
\`–ü–æ–≤–µ–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–æ–º\` - ${userData.elements.wind}/1
\`–û—Ä–ª–∏–Ω—ã–π –≥–ª–∞–∑\` - ${userData.elements.eagle_eye}/1`)
                            await selectMenu.components[0].options.forEach(option => {
                                if (option.data.value == value) {
                                    option.data.default = true
                                } else option.data.default = false
                            })
                            await i.update({
                                embeds: [elem],
                                components: [selectMenu, userMenu]
                            })
                        } else if (value == `achievements`) {

                            let n_unclaimed = []

                            for (let norm of rolesInfo.achievements_normal) {
                                if (!member.roles.cache.has(norm)) {
                                    n_unclaimed.push(norm)
                                }
                            }

                            let m_unclaimed = []

                            for (let myth of rolesInfo.achievements_myth) {
                                if (!member.roles.cache.has(myth)) {
                                    m_unclaimed.push(myth)
                                }
                            }

                            let n_map


                            if (n_unclaimed.length <= 0) {
                                n_map = `üéâ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –æ–±—ã—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! ‚ú®`
                            } else {
                                n_map = n_unclaimed.map((norm, i) => {
                                    return `**${++i}.** <@&${norm}>`
                                }).join(`\n`)
                            }
                            let m_map
                            if (m_unclaimed.length <= 0) {
                                m_map = `üéâ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –º–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! ‚ú®`
                            } else {
                                m_map = m_unclaimed.map((myth, i) => {
                                    return `**${++i}.** <@&${myth}>`
                                }).join(`\n`)
                            }
                            const achievements = new EmbedBuilder()
                                .setColor(Number(linksInfo.bot_color))
                                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                                .setThumbnail(user.displayAvatarURL())
                                .setTimestamp(Date.now())
                                .setDescription(`**–î–û–°–¢–ò–ñ–ï–ù–ò–Ø –ì–ò–õ–¨–î–ò–ò**
__**–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**__
\`–û–±—ã—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\` - ${userData.achievements.normal}/${rolesInfo.achievements_normal.length}
\`–ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\` - ${userData.achievements.mythical}/${rolesInfo.achievements_myth.length}

__**–ù–µ–ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è**__
__–û–±—ã—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è__
${n_map}

__–ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è__
${m_map}`)
                            await selectMenu.components[0].options.forEach(option => {
                                if (option.data.value == value) {
                                    option.data.default = true
                                } else option.data.default = false
                            })
                            await i.update({
                                embeds: [achievements],
                                components: [selectMenu, userMenu]
                            })
                        } else if (value == `perks`) {
                            const perks = new EmbedBuilder()
                                .setColor(Number(linksInfo.bot_color))
                                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                                .setThumbnail(user.displayAvatarURL())
                                .setTimestamp(Date.now())
                                .setDescription(`**–ü–ï–†–ö–ò**
\`üî∫ –ü–æ–≤—ã—à–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ —Ä–∞–Ω–≥–æ–≤\` - ${userData.perks.rank_boost}/6
\`üîª –°–∫–∏–¥–∫–∞ –≤ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–º –º–∞–≥–∞–∑–∏–Ω–µ\` - ${userData.perks.king_discount}/4
\`üîª –°–∫–∏–¥–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\` - ${userData.perks.act_discount}/3
\`üîª –°–∫–∏–¥–∫–∞ –≤ –æ–±—ã—á–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –≥–∏–ª—å–¥–∏–∏\` - ${userData.perks.shop_discount}/4
\`üïí –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤\` - ${userData.perks.temp_items}/1
\`üí∞ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è\` - ${userData.perks.sell_items}/1
\`üè∑Ô∏è –£–º–µ–Ω—å—à–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –≥–∏–ª—å–¥–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞\` - ${userData.perks.ticket_discount}/5
\`‚ú® –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\` - ${userData.perks.change_items}/1`)
                            await selectMenu.components[0].options.forEach(option => {
                                if (option.data.value == value) {
                                    option.data.default = true
                                } else option.data.default = false
                            })
                            await i.update({
                                embeds: [perks],
                                components: [selectMenu, userMenu]
                            })
                        } else if (value == `shops`) {
                            const shops = new EmbedBuilder()
                                .setColor(Number(linksInfo.bot_color))
                                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                                .setThumbnail(user.displayAvatarURL())
                                .setTimestamp(Date.now())
                                .setDescription(`**–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ê–ì–ê–ó–ò–ù–ê –ì–ò–õ–¨–î–ò–ò**
\`–ö—É–ø–ª–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\` - ${userData.buys.normal + userData.buys.king + userData.buys.activity} —à—Ç.
\`–ö—É–ø–ª–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –æ–±—ã—á–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ\` - ${userData.buys.normal} —à—Ç.
\`–ö—É–ø–ª–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–º –º–∞–≥–∞–∑–∏–Ω–µ\` - ${userData.buys.king} —à—Ç.
\`–ö—É–ø–ª–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\` - ${userData.buys.activity} —à—Ç.
\`–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ä—É–º–±–∏–∫–æ–≤\` - ${userData.buys.total_sum} <:Rumbik:883638847056003072>
\`–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –±–∏–ª–µ—Ç–æ–≤\` - ${userData.buys.total_tickets} üè∑

\`–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\` - ${userData.sell.constellation + userData.sell.comet + userData.sell.other} —à—Ç.
\`–ü—Ä–æ–¥–∞–Ω–æ —Å–æ–∑–≤–µ–∑–¥–∏–π\` - ${userData.sell.constellation} —à—Ç.
\`–ü—Ä–æ–¥–∞–Ω–æ –∫–æ–º–µ—Ç\` - ${userData.sell.comet} —à—Ç.
\`–ü—Ä–æ–¥–∞–Ω–æ –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤\` - ${userData.sell.other} —à—Ç.
\`–ü—Ä–æ–¥–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É\` - ${userData.sell.total_sum} <:Rumbik:883638847056003072>`)
                            await selectMenu.components[0].options.forEach(option => {
                                if (option.data.value == value) {
                                    option.data.default = true
                                } else option.data.default = false
                            })
                            await i.update({
                                embeds: [shops],
                                components: [selectMenu, userMenu]
                            })
                        } else if (value == `gexp`) {
                            await i.deferUpdate()
                            const response = await fetch(`https://api.hypixel.net/guild?id=5c1902fc77ce84cd430f3959`, {
                                headers: {
                                    "API-Key": api,
                                    "Content-Type": "application/json"
                                }
                            })
                            let json
                            if (response.ok) json = await response.json()
                            let gexp_nums
                            let sum
                            let map
                            let player = await json.guild.members.find(member => member.uuid == userData.uuid)
                            if (!player) {
                                map = `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–∏–ª—å–¥–∏–∏!`
                                sum = 0
                            } else {
                                gexp_nums = Object.entries(player.expHistory)
                                sum = 0
                                map = gexp_nums.map(([key, value]) => {
                                    sum += value
                                    let sp = key.split(`-`)
                                    let date = `${sp[2]}.${sp[1]}.${sp[0]}`
                                    return `‚Ä¢ \`${date}\` - ${value} GEXP`
                                }).join(`\n`)
                            }



                            const gexp = new EmbedBuilder()
                                .setColor(Number(linksInfo.bot_color))
                                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                                .setThumbnail(user.displayAvatarURL())
                                .setTimestamp(Date.now())
                                .setDescription(`**–û–ü–´–¢ –ì–ò–õ–¨–î–ò–ò –£–ß–ê–°–¢–ù–ò–ö–ê**
–ù–∏–∫–Ω–µ–π–º: \`${userData.nickname}\`
__**–û–ø—ã—Ç –≥–∏–ª—å–¥–∏–∏**__:
${map}

**–û–ø—ã—Ç–∞ –≥–∏–ª—å–¥–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π**: ${sum} GEXP`)
                            await selectMenu.components[0].options.forEach(option => {
                                if (option.data.value == value) {
                                    option.data.default = true
                                } else option.data.default = false
                            })
                            await interaction.editReply({
                                embeds: [gexp],
                                components: [selectMenu, userMenu],
                                fetchReply: true
                            })
                        } else if (value == `quests`) {
                            let total = userData.quests.seasonal.stats.hw.total + userData.quests.seasonal.stats.ny.total + userData.quests.seasonal.stats.ea.total + userData.quests.seasonal.stats.su.total
                            const quests = new EmbedBuilder()
                                .setColor(Number(linksInfo.bot_color))
                                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                                .setThumbnail(user.displayAvatarURL())
                                .setTimestamp(Date.now())
                                .setDescription(`**–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–í–ï–°–¢–û–í –ò –ú–ê–†–ê–§–û–ù–ê**
__**–ú–∞—Ä–∞—Ñ–æ–Ω**__
\`–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å—Ç–∞–¥–∏–π\` - ${userData.quests.marathon.stats.total_stages}
\`–ü—Ä–æ–π–¥–µ–Ω–æ —Ä–∞–∑\` - ${userData.quests.marathon.stats.total_mar}

__**–ó–∞–¥–∞–Ω–∏—è –¥–ª—è –≤–µ—Ç–µ—Ä–∞–Ω–æ–≤**__
\`–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π\` - ${userData.quests.veterans.stats.total}

__**–ö–≤–µ—Å—Ç—ã "–ù–æ–≤–æ–µ –Ω–∞—á–∞–ª–æ"**__
\`–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π\` - ${userData.quests.kings.stats.total}/4\\*
\\*–ó–∞–¥–∞–Ω–∏–µ —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è

__**–ó–∞–¥–∞–Ω–∏—è –ú–∞—Ä—Å–∞**__
\`–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π\` - ${userData.quests.mars.stats.total}

__**–°–µ–∑–æ–Ω–Ω–æ–µ**__
\`–•—ç–ª–ª–æ—É–∏–Ω—Å–∫–∏–µ –∫–≤–µ—Å—Ç—ã\` - ${userData.quests.seasonal.stats.hw.total}
\`–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–≤–µ—Å—Ç—ã\` - ${userData.quests.seasonal.stats.ny.total}
\`–ü–∞—Å—Ö–∞–ª—å–Ω—ã–µ –∫–≤–µ—Å—Ç—ã\` - ${userData.quests.seasonal.stats.ea.total}
\`–õ–µ—Ç–Ω–∏–µ –∫–≤–µ—Å—Ç—ã\` - ${userData.quests.seasonal.stats.su.total}
__**\`–í—Å–µ–≥–æ\`**__ - ${total}`)
                            await selectMenu.components[0].options.forEach(option => {
                                if (option.data.value == value) {
                                    option.data.default = true
                                } else option.data.default = false
                            })
                            await i.update({
                                embeds: [quests],
                                components: [selectMenu, userMenu]
                            })
                        } else if (value == `boosters`) {
                            const boosters = new EmbedBuilder()
                                .setColor(Number(linksInfo.bot_color))
                                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                                .setThumbnail(user.displayAvatarURL())
                                .setTimestamp(Date.now())
                                .setDescription(`**–ú–ù–û–ñ–ò–¢–ï–õ–ò**
\`–ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\` - ${userData.pers_act_boost}x
\`–ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞ —Ä–∞–Ω–≥–æ–≤\` - ${userData.pers_rank_boost}x
\`–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ä—É–º–±–∏–∫–æ–≤\` - ${userData.pers_rumb_boost}x
\`–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ\` - ${userData.shop_costs}x
\`–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\` - ${userData.act_costs}x
\`–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–º –º–∞–≥–∞–∑–∏–Ω–µ\` - ${userData.king_costs}x`)
                            await selectMenu.components[0].options.forEach(option => {
                                if (option.data.value == value) {
                                    option.data.default = true
                                } else option.data.default = false
                            })
                            await i.update({
                                embeds: [boosters],
                                components: [selectMenu, userMenu]
                            })
                        } else if (value == `colors`) {
                            const colors = new EmbedBuilder()
                                .setColor(Number(linksInfo.bot_color))
                                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                                .setThumbnail(user.displayAvatarURL())
                                .setTimestamp(Date.now())
                                .setDescription(`**–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –¶–í–ï–¢**
\`–ù–∞–ª–∏—á–∏–µ\` - ${userData.custom_color.created ? `–°–æ–∑–¥–∞–Ω` : `–ù–µ —Å–æ–∑–¥–∞–Ω`}
\`–¶–≤–µ—Ç–æ–≤–æ–π –∫–æ–¥\` - ${userData.custom_color?.hex ? userData.custom_color?.hex : `–¶–≤–µ—Ç–æ–≤–æ–π –∫–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`}
\`–ò–º—è —Ä–æ–ª–∏\` - ${userData.custom_color?.custom_name ? userData.custom_color?.custom_name : `–õ–ò–ß–ù–´–ô –¶–í–ï–¢`} 
\`–†–æ–ª—å\` - ${colorRole}`)
                            await selectMenu.components[0].options.forEach(option => {
                                if (option.data.value == value) {
                                    option.data.default = true
                                } else option.data.default = false
                            })
                            await i.update({
                                embeds: [colors],
                                components: [selectMenu, userMenu]
                            })
                        } else if (value == `chances`) {
                            const chances = new EmbedBuilder()
                                .setColor(Number(linksInfo.bot_color))
                                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                                .setThumbnail(user.displayAvatarURL())
                                .setTimestamp(Date.now())
                                .setDescription(`**–®–ê–ù–°–´ –ù–ê –†–ï–î–ö–û–°–¢–ò**
\`–û–±—ã—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã\` - ${userData.box_chances.common}x
\`–ù–µ–æ–±—ã—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã\` - ${userData.box_chances.uncommon}x
\`–†–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã\` - ${userData.box_chances.rare}x
\`–≠–ø–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã\` - ${userData.box_chances.epic}x
\`–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã\` - ${userData.box_chances.legendary}x
\`–ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã\` - ${userData.box_chances.mythical}x
\`–£–ª—å—Ç—Ä–∞—Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã\` - ${userData.box_chances.RNG}x`)
                            await selectMenu.components[0].options.forEach(option => {
                                if (option.data.value == value) {
                                    option.data.default = true
                                } else option.data.default = false
                            })
                            await i.update({
                                embeds: [chances],
                                components: [selectMenu, userMenu]
                            })
                        } else if (value == `about`) {
                            const bdata = await Birthday.findOne({ userid: user.id, guildid: guild.id })
                            let day
                            let month
                            if (bdata.day < 10) day = `0${bdata.day}`
                            else day = `${bdata.day}`

                            if (bdata.month == 1) month = `—è–Ω–≤–∞—Ä—è`
                            else if (bdata.month == 2) month = `—Ñ–µ–≤—Ä–∞–ª—è`
                            else if (bdata.month == 3) month = `–º–∞—Ä—Ç–∞`
                            else if (bdata.month == 4) month = `–∞–ø—Ä–µ–ª—è`
                            else if (bdata.month == 5) month = `–º–∞—è`
                            else if (bdata.month == 6) month = `–∏—é–Ω—è`
                            else if (bdata.month == 7) month = `–∏—é–ª—è`
                            else if (bdata.month == 8) month = `–∞–≤–≥—É—Å—Ç–∞`
                            else if (bdata.month == 9) month = `—Å–µ–Ω—Ç—è–±—Ä—è`
                            else if (bdata.month == 10) month = `–æ–∫—Ç—è–±—Ä—è`
                            else if (bdata.month == 11) month = `–Ω–æ—è–±—Ä—è`
                            else if (bdata.month == 12) month = `–¥–µ–∫–∞–±—Ä—è`

                            let bday = `${day} ${month} ${bdata.year}`

                            const response = await fetch(`https://api.hypixel.net/guild?id=5c1902fc77ce84cd430f3959`, {
                                headers: {
                                    "API-Key": api,
                                    "Content-Type": "application/json"
                                }
                            })
                            let json
                            if (response.ok) json = await response.json()

                            let timestamp
                            let player = await json.guild.members.find(member => member.uuid == userData.uuid)
                            if (!player) timestamp = `\`–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥–∏–ª—å–¥–∏–∏\``
                            else timestamp = `<t:${Math.round(userData.joinedGuild / 1000)}:f>`
                            const about = new EmbedBuilder()
                                .setColor(Number(linksInfo.bot_color))
                                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                                .setThumbnail(user.displayAvatarURL())
                                .setTimestamp(Date.now())
                                .setDescription(`**–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –£–ß–ê–°–¢–ù–ò–ö–ï**
\`–ò–º—è\` - ${userData.displayname.name}
\`–í–æ–∑—Ä–∞—Å—Ç\` - ${userData.age} –ª–µ—Ç
\`Minecraft Nickname\` - \`${userData.nickname}\`
\`–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è\` - ${timestamp}
\`–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\` - ${bday}`)
                            await selectMenu.components[0].options.forEach(option => {
                                if (option.data.value == value) {
                                    option.data.default = true
                                } else option.data.default = false
                            })
                            await i.update({
                                embeds: [about],
                                components: [selectMenu, userMenu]
                            })
                        }
                    }
                    else if (i.user.id !== interaction.user.id) {
                        await i.deferReply({ ephemeral: true, fetchReply: true })

                        if (value == `main`) {
                            await i.editReply({
                                embeds: [main]
                            })
                        } else if (value == `act`) {
                            const act = new EmbedBuilder()
                                .setColor(Number(linksInfo.bot_color))
                                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                                .setThumbnail(user.displayAvatarURL())
                                .setTimestamp(Date.now())
                                .setDescription(`**–£–†–û–í–ï–ù–¨ –ê–ö–¢–ò–í–ù–û–°–¢–ò**
\`–ü—Ä–æ–≥—Ä–µ—Å—Å\` - ${part1}/${part2}üåÄ
\`–£—Ä–æ–≤–µ–Ω—å\` - ${userData.level}
\`–í—Å–µ–≥–æ –æ–ø—ã—Ç–∞\` - ${calcActLevel(0, userData.level, userData.exp)}üåÄ
\`–ü–æ–∑–∏—Ü–∏—è\` - #${rank}`)
                            await i.editReply({
                                embeds: [act]
                            })
                        } else if (value == `elem`) {
                            const elem = new EmbedBuilder()
                                .setColor(Number(linksInfo.bot_color))
                                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                                .setThumbnail(user.displayAvatarURL())
                                .setTimestamp(Date.now())
                                .setDescription(`**–ù–ê–í–´–ö–ò –ü–ò–¢–û–ú–¶–ï–í**
            
__**–ó–µ–º–ª—è**__
\`–í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ –≥–æ—Ä–Ω—ã—Ö –ø–æ—Ä–æ–¥\` - ${userData.elements.mountains}/1
\`–ë—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π\` - ${userData.elements.fast_grow}/1
\`–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ–¥ –∑–µ–º–ª—ë–π\` - ${userData.elements.underground}/1

__**–í–æ–¥–∞**__
\`–ü–ª–∞–≤–∞–Ω–∏–µ –Ω–∞ –≥–ª—É–±–∏–Ω–µ\` - ${userData.elements.diving}/1
\`–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —Ç–µ—á–µ–Ω–∏—è–º\` - ${userData.elements.resistance}/1
\`–ü–æ–¥–≤–æ–¥–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ\` - ${userData.elements.respiration}/1

__**–û–≥–æ–Ω—å**__
\`–ó–∞—â–∏—Ç–∞ –æ—Ç –æ–≥–Ω—è\` - ${userData.elements.fire_resistance}/1
\`–£–¥–∞—Ä –º–æ–ª–Ω–∏–∏\` - ${userData.elements.lightning}/1
\`–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–º–µ–Ω–µ–º\` - ${userData.elements.flame}/1

__**–í–æ–∑–¥—É—Ö**__
\`–ü–æ–ª—ë—Ç –≤ –Ω–µ–±–µ—Å–∞—Ö\` - ${userData.elements.flying}/1
\`–ü–æ–≤–µ–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–æ–º\` - ${userData.elements.wind}/1
\`–û—Ä–ª–∏–Ω—ã–π –≥–ª–∞–∑\` - ${userData.elements.eagle_eye}/1`)
                            await i.editReply({
                                embeds: [elem]
                            })
                        } else if (value == `perks`) {
                            const perks = new EmbedBuilder()
                                .setColor(Number(linksInfo.bot_color))
                                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                                .setThumbnail(user.displayAvatarURL())
                                .setTimestamp(Date.now())
                                .setDescription(`**–ü–ï–†–ö–ò**
\`üî∫ –ü–æ–≤—ã—à–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ —Ä–∞–Ω–≥–æ–≤\` - ${userData.perks.rank_boost}/6
\`üîª –°–∫–∏–¥–∫–∞ –≤ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–º –º–∞–≥–∞–∑–∏–Ω–µ\` - ${userData.perks.king_discount}/4
\`üîª –°–∫–∏–¥–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\` - ${userData.perks.act_discount}/3
\`üîª –°–∫–∏–¥–∫–∞ –≤ –æ–±—ã—á–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –≥–∏–ª—å–¥–∏–∏\` - ${userData.perks.shop_discount}/4
\`üïí –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤\` - ${userData.perks.temp_items}/1
\`üí∞ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è\` - ${userData.perks.sell_items}/1
\`üè∑Ô∏è –£–º–µ–Ω—å—à–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –≥–∏–ª—å–¥–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞\` - ${userData.perks.ticket_discount}/5
\`‚ú® –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\` - ${userData.perks.change_items}/1`)
                            await i.editReply({
                                embeds: [perks]
                            })
                        } else if (value == `shops`) {
                            const shops = new EmbedBuilder()
                                .setColor(Number(linksInfo.bot_color))
                                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                                .setThumbnail(user.displayAvatarURL())
                                .setTimestamp(Date.now())
                                .setDescription(`**–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ê–ì–ê–ó–ò–ù–ê –ì–ò–õ–¨–î–ò–ò**
\`–ö—É–ø–ª–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\` - ${userData.buys.normal + userData.buys.king + userData.buys.activity} —à—Ç.
\`–ö—É–ø–ª–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –æ–±—ã—á–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ\` - ${userData.buys.normal} —à—Ç.
\`–ö—É–ø–ª–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–º –º–∞–≥–∞–∑–∏–Ω–µ\` - ${userData.buys.king} —à—Ç.
\`–ö—É–ø–ª–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\` - ${userData.buys.activity} —à—Ç.
\`–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ä—É–º–±–∏–∫–æ–≤\` - ${userData.buys.total_sum} <:Rumbik:883638847056003072>
\`–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –±–∏–ª–µ—Ç–æ–≤\` - ${userData.buys.total_tickets} üè∑

\`–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\` - ${userData.sell.constellation + userData.sell.comet + userData.sell.other} —à—Ç.
\`–ü—Ä–æ–¥–∞–Ω–æ —Å–æ–∑–≤–µ–∑–¥–∏–π\` - ${userData.sell.constellation} —à—Ç.
\`–ü—Ä–æ–¥–∞–Ω–æ –∫–æ–º–µ—Ç\` - ${userData.sell.comet} —à—Ç.
\`–ü—Ä–æ–¥–∞–Ω–æ –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤\` - ${userData.sell.other} —à—Ç.
\`–ü—Ä–æ–¥–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É\` - ${userData.sell.total_sum} <:Rumbik:883638847056003072>`)
                            await i.editReply({
                                embeds: [shops]
                            })
                        } else if (value == `gexp`) {
                            const response = await fetch(`https://api.hypixel.net/guild?id=5c1902fc77ce84cd430f3959`, {
                                headers: {
                                    "API-Key": api,
                                    "Content-Type": "application/json"
                                }
                            })
                            let json
                            if (response.ok) json = await response.json()
                            let gexp_nums
                            let sum
                            let map
                            let player = await json.guild.members.find(member => member.uuid == userData.uuid)
                            if (!player) {
                                map = `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–∏–ª—å–¥–∏–∏!`
                                sum = 0
                            } else {
                                gexp_nums = Object.entries(player.expHistory)
                                sum = 0
                                map = gexp_nums.map(([key, value]) => {
                                    sum += value
                                    let sp = key.split(`-`)
                                    let date = `${sp[2]}.${sp[1]}.${sp[0]}`
                                    return `‚Ä¢ \`${date}\` - ${value} GEXP`
                                }).join(`\n`)
                            }



                            const gexp = new EmbedBuilder()
                                .setColor(Number(linksInfo.bot_color))
                                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                                .setThumbnail(user.displayAvatarURL())
                                .setTimestamp(Date.now())
                                .setDescription(`**–û–ü–´–¢ –ì–ò–õ–¨–î–ò–ò –£–ß–ê–°–¢–ù–ò–ö–ê**
–ù–∏–∫–Ω–µ–π–º: \`${userData.nickname}\`
__**–û–ø—ã—Ç –≥–∏–ª—å–¥–∏–∏**__:
${map}

**–û–ø—ã—Ç–∞ –≥–∏–ª—å–¥–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π**: ${sum} GEXP`)
                            await i.editReply({
                                embeds: [gexp]
                            })
                        } else if (value == `achievements`) {

                            let n_unclaimed = []

                            for (let norm of rolesInfo.achievements_normal) {
                                if (!member.roles.cache.has(norm)) {
                                    n_unclaimed.push(norm)
                                }
                            }

                            let m_unclaimed = []

                            for (let myth of rolesInfo.achievements_myth) {
                                if (!member.roles.cache.has(myth)) {
                                    m_unclaimed.push(myth)
                                }
                            }

                            let n_map


                            if (n_unclaimed.length <= 0) {
                                n_map = `üéâ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –æ–±—ã—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! ‚ú®`
                            } else {
                                n_map = n_unclaimed.map((norm, i) => {
                                    return `**${++i}.** <@&${norm}>`
                                }).join(`\n`)
                            }
                            let m_map
                            if (m_unclaimed.length <= 0) {
                                m_map = `üéâ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –º–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! ‚ú®`
                            } else {
                                m_map = m_unclaimed.map((myth, i) => {
                                    return `**${++i}.** <@&${myth}>`
                                }).join(`\n`)
                            }
                            const achievements = new EmbedBuilder()
                                .setColor(Number(linksInfo.bot_color))
                                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                                .setThumbnail(user.displayAvatarURL())
                                .setTimestamp(Date.now())
                                .setDescription(`**–î–û–°–¢–ò–ñ–ï–ù–ò–Ø –ì–ò–õ–¨–î–ò–ò**
__**–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**__
\`–û–±—ã—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\` - ${userData.achievements.normal}/${rolesInfo.achievements_normal.length}
\`–ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\` - ${userData.achievements.mythical}/${rolesInfo.achievements_myth.length}

__**–ù–µ–ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è**__
__–û–±—ã—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è__
${n_map}

__–ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è__
${m_map}`)
                            await i.editReply({
                                embeds: [achievements]
                            })
                        } else if (value == `quests`) {
                            let total = userData.quests.seasonal.stats.hw.total + userData.quests.seasonal.stats.ny.total + userData.quests.seasonal.stats.ea.total + userData.quests.seasonal.stats.su.total
                            const quests = new EmbedBuilder()
                                .setColor(Number(linksInfo.bot_color))
                                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                                .setThumbnail(user.displayAvatarURL())
                                .setTimestamp(Date.now())
                                .setDescription(`**–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–í–ï–°–¢–û–í –ò –ú–ê–†–ê–§–û–ù–ê**
__**–ú–∞—Ä–∞—Ñ–æ–Ω**__
\`–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å—Ç–∞–¥–∏–π\` - ${userData.quests.marathon.stats.total_stages}
\`–ü—Ä–æ–π–¥–µ–Ω–æ —Ä–∞–∑\` - ${userData.quests.marathon.stats.total_mar}

__**–ó–∞–¥–∞–Ω–∏—è –¥–ª—è –≤–µ—Ç–µ—Ä–∞–Ω–æ–≤**__
\`–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π\` - ${userData.quests.veterans.stats.total}

__**–ö–≤–µ—Å—Ç—ã "–ù–æ–≤–æ–µ –Ω–∞—á–∞–ª–æ"**__
\`–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π\` - ${userData.quests.kings.stats.total}/4\\*
\\*–ó–∞–¥–∞–Ω–∏–µ —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è

__**–ó–∞–¥–∞–Ω–∏—è –ú–∞—Ä—Å–∞**__
\`–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π\` - ${userData.quests.mars.stats.total}

__**–°–µ–∑–æ–Ω–Ω–æ–µ**__
\`–•—ç–ª–ª–æ—É–∏–Ω—Å–∫–∏–µ –∫–≤–µ—Å—Ç—ã\` - ${userData.quests.seasonal.stats.hw.total}
\`–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–≤–µ—Å—Ç—ã\` - ${userData.quests.seasonal.stats.ny.total}
\`–ü–∞—Å—Ö–∞–ª—å–Ω—ã–µ –∫–≤–µ—Å—Ç—ã\` - ${userData.quests.seasonal.stats.ea.total}
\`–õ–µ—Ç–Ω–∏–µ –∫–≤–µ—Å—Ç—ã\` - ${userData.quests.seasonal.stats.su.total}
__**\`–í—Å–µ–≥–æ\`**__ - ${total}`)
                            await i.editReply({
                                embeds: [quests]
                            })
                        } else if (value == `boosters`) {
                            const boosters = new EmbedBuilder()
                                .setColor(Number(linksInfo.bot_color))
                                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                                .setThumbnail(user.displayAvatarURL())
                                .setTimestamp(Date.now())
                                .setDescription(`**–ú–ù–û–ñ–ò–¢–ï–õ–ò**
\`–ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\` - ${userData.pers_act_boost}x
\`–ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞ —Ä–∞–Ω–≥–æ–≤\` - ${userData.pers_rank_boost}x
\`–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ä—É–º–±–∏–∫–æ–≤\` - ${userData.pers_rumb_boost}x
\`–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ\` - ${userData.shop_costs}x
\`–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\` - ${userData.act_costs}x
\`–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–º –º–∞–≥–∞–∑–∏–Ω–µ\` - ${userData.king_costs}x`)
                            await i.editReply({
                                embeds: [boosters]
                            })
                        } else if (value == `colors`) {
                            const colors = new EmbedBuilder()
                                .setColor(Number(linksInfo.bot_color))
                                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                                .setThumbnail(user.displayAvatarURL())
                                .setTimestamp(Date.now())
                                .setDescription(`**–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –¶–í–ï–¢**
\`–ù–∞–ª–∏—á–∏–µ\` - ${userData.custom_color.created ? `–°–æ–∑–¥–∞–Ω` : `–ù–µ —Å–æ–∑–¥–∞–Ω`}
\`–¶–≤–µ—Ç–æ–≤–æ–π –∫–æ–¥\` - ${userData.custom_color?.hex ? userData.custom_color?.hex : `–¶–≤–µ—Ç–æ–≤–æ–π –∫–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`}
\`–ò–º—è —Ä–æ–ª–∏\` - ${userData.custom_color?.custom_name ? userData.custom_color?.custom_name : `–õ–ò–ß–ù–´–ô –¶–í–ï–¢`} 
\`–†–æ–ª—å\` - ${colorRole}`)
                            await i.editReply({
                                embeds: [colors]
                            })
                        } else if (value == `chances`) {
                            const chances = new EmbedBuilder()
                                .setColor(Number(linksInfo.bot_color))
                                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                                .setThumbnail(user.displayAvatarURL())
                                .setTimestamp(Date.now())
                                .setDescription(`**–®–ê–ù–°–´ –ù–ê –†–ï–î–ö–û–°–¢–ò**
\`–û–±—ã—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã\` - ${userData.box_chances.common}x
\`–ù–µ–æ–±—ã—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã\` - ${userData.box_chances.uncommon}x
\`–†–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã\` - ${userData.box_chances.rare}x
\`–≠–ø–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã\` - ${userData.box_chances.epic}x
\`–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã\` - ${userData.box_chances.legendary}x
\`–ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã\` - ${userData.box_chances.mythical}x
\`–£–ª—å—Ç—Ä–∞—Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã\` - ${userData.box_chances.RNG}x`)

                            await i.editReply({
                                embeds: [chances],
                            })
                        } else if (value == `about`) {
                            const bdata = await Birthday.findOne({ userid: user.id, guildid: guild.id })
                            let day
                            let month
                            if (bdata.day < 10) day = `0${bdata.day}`
                            else day = `${bdata.day}`

                            if (bdata.month == 1) month = `—è–Ω–≤–∞—Ä—è`
                            else if (bdata.month == 2) month = `—Ñ–µ–≤—Ä–∞–ª—è`
                            else if (bdata.month == 3) month = `–º–∞—Ä—Ç–∞`
                            else if (bdata.month == 4) month = `–∞–ø—Ä–µ–ª—è`
                            else if (bdata.month == 5) month = `–º–∞—è`
                            else if (bdata.month == 6) month = `–∏—é–Ω—è`
                            else if (bdata.month == 7) month = `–∏—é–ª—è`
                            else if (bdata.month == 8) month = `–∞–≤–≥—É—Å—Ç–∞`
                            else if (bdata.month == 9) month = `—Å–µ–Ω—Ç—è–±—Ä—è`
                            else if (bdata.month == 10) month = `–æ–∫—Ç—è–±—Ä—è`
                            else if (bdata.month == 11) month = `–Ω–æ—è–±—Ä—è`
                            else if (bdata.month == 12) month = `–¥–µ–∫–∞–±—Ä—è`

                            let bday = `${day} ${month} ${bdata.year}`
                            const response = await fetch(`https://api.hypixel.net/guild?id=5c1902fc77ce84cd430f3959`, {
                                headers: {
                                    "API-Key": api,
                                    "Content-Type": "application/json"
                                }
                            })
                            let json
                            if (response.ok) json = await response.json()
                            let timestamp
                            let player = await json.guild.members.find(member => member.uuid == userData.uuid)
                            if (!player) timestamp = `\`–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥–∏–ª—å–¥–∏–∏\``
                            else timestamp = `<t:${Math.round(userData.joinedGuild / 1000)}:f>`
                            const about = new EmbedBuilder()
                                .setColor(Number(linksInfo.bot_color))
                                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                                .setThumbnail(user.displayAvatarURL())
                                .setTimestamp(Date.now())
                                .setDescription(`**–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –£–ß–ê–°–¢–ù–ò–ö–ï**
\`–ò–º—è\` - ${userData.displayname.name}
\`–í–æ–∑—Ä–∞—Å—Ç\` - ${userData.age} –ª–µ—Ç
\`Minecraft Nickname\` - \`${userData.nickname}\`
\`–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è\` - ${timestamp}
\`–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\` - ${bday}`)

                            await i.editReply({
                                embeds: [about]
                            })
                        }
                    }
                } else if (i.customId == `usermenu`) {
                    await i.deferReply({ fetchReply: true })

                    if (interaction.user.id == i.user.id) {
                        const us = await guild.members.fetch(i.values[0])
                        user = us.user
                        member = us
                        users = await User.find().then(users => {
                            return users.filter(async user => await guild.members.fetch(user.userid))
                        })
                        sort1 = users.sort((a, b) => {
                            return b.exp - a.exp
                        })
                        sorts = sort1.sort((a, b) => {
                            return b.level - a.level
                        })
                        let iT = 0
                        while (sorts[iT].userid !== user.id) {
                            iT++
                        }
                        userData = sorts[iT]
                        if (!userData) {
                            await i.editReply({
                                content: `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ!`,
                                fetchReply: true
                            })
                            await wait(10000)
                            await i.deleteReply()
                            return
                        }
                        await i.deleteReply()
                        rank = iT + 1
                        neededXP = 5 * (Math.pow(userData.level, 2)) + (50 * userData.level) + 100;
                        part1
                        part2
                        if (userData.exp >= 1000) {
                            part1 = (userData.exp / 1000).toFixed(1) + `k`
                        } else part1 = userData.exp
                        if (neededXP >= 1000) {
                            part2 = (neededXP / 1000).toFixed(1) + `k`
                        } else part2 = neededXP
                        colorRole = await guild.roles.fetch(userData.custom_color?.role ? userData.custom_color.role : `nn`)
                        if (!colorRole) colorRole = `–ù–µ —Å–æ–∑–¥–∞–Ω–∞`
                        let def = `main`
                        main.setColor(Number(linksInfo.bot_color))
                            .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                            .setThumbnail(user.displayAvatarURL())
                            .setTimestamp(Date.now())
                            .setDescription(
                                `**–û–°–ù–û–í–ù–û–ï**
\`–†–∞–Ω–≥ –≤ –≥–∏–ª—å–¥–∏–∏\` - ${rankName(userData.rank_number)}
\`–†—É–º–±–∏–∫–∏\` - ${userData.rumbik}<:Rumbik:883638847056003072>
\`–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤\` - ${userData.rank}üí†
\`–ü–æ—Å–µ—â–µ–Ω–æ —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∏–≥—Ä\` - ${userData.visited_games} –∏–≥—Ä
\`–ë–∏–ª–µ—Ç—ã\` - ${userData.tickets}üè∑
\`–û–ø—ã—Ç–∞ –≥–∏–ª—å–¥–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\` - ${userData.gexp} GEXP
\`–ú–µ–¥–∞–ª—å ü•á\` - ${userData.medal_1} —à—Ç.
\`–ú–µ–¥–∞–ª—å ü•à\` - ${userData.medal_2} —à—Ç.
\`–ú–µ–¥–∞–ª—å ü•â\` - ${userData.medal_3} —à—Ç.
\`–°–æ–±—Ä–∞–Ω–æ –∑–≤—ë–∑–¥–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤\` - ${userData.starway.current} ‚ú®
\`–ù–µ–ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤\` - ${userData.stacked_items.length}
\`–°–±—Ä–æ—à–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å\` - ${userData.times_reset} —Ä–∞–∑`)

                        await selectMenu.components[0].options.forEach(option => {
                            if (option.data.value == def) {
                                option.data.default = true
                            } else option.data.default = false
                        })
                        await interaction.editReply({
                            embeds: [main],
                            components: [selectMenu, userMenu],
                            fetchReply: true
                        })
                    } else if (interaction.user.id !== i.user.id) {

                        const us = await guild.members.fetch(i.values[0])

                        let userT = us.user
                        let memberT = us
                        let usersT = await User.find().then(users => {
                            return users.filter(async user => await guild.members.fetch(user.userid))
                        })
                        let sort1T = usersT.sort((a, b) => {
                            return b.exp - a.exp
                        })
                        let sortsT = sort1T.sort((a, b) => {
                            return b.level - a.level
                        })
                        let iT = 0
                        while (sortsT[iT].userid !== user.id) {
                            iT++
                        }
                        let userDataT = sortsT[iT]
                        if (!userDataT) {
                            await i.editReply({
                                content: `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ!`,
                                fetchReply: true
                            })
                            await wait(10000)
                            await i.deleteReply()
                            return
                        }
                        let rankT = iT + 1
                        let neededXPT = 5 * (Math.pow(userDataT.level, 2)) + (50 * userDataT.level) + 100;
                        let part1T
                        let part2T
                        if (userDataT.exp >= 1000) {
                            part1T = (userDataT.exp / 1000).toFixed(1) + `k`
                        } else part1T = userDataT.exp
                        if (neededXPT >= 1000) {
                            part2T = (neededXPT / 1000).toFixed(1) + `k`
                        } else part2T = neededXPT
                        let colorRoleT = await guild.roles.fetch(userDataT.custom_color?.role ? userDataT.custom_color.role : `nn`)
                        if (!colorRoleT) colorRoleT = `–ù–µ —Å–æ–∑–¥–∞–Ω–∞`
                        const mainT = new EmbedBuilder()
                            .setColor(Number(linksInfo.bot_color))
                            .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userT.username}`)
                            .setThumbnail(userT.displayAvatarURL())
                            .setTimestamp(Date.now())
                            .setDescription(
                                `**–û–°–ù–û–í–ù–û–ï**
\`–†–∞–Ω–≥ –≤ –≥–∏–ª—å–¥–∏–∏\` - ${rankName(userDataT.rank_number)}
\`–†—É–º–±–∏–∫–∏\` - ${userDataT.rumbik}<:Rumbik:883638847056003072>
\`–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤\` - ${userDataT.rank}üí†
\`–ü–æ—Å–µ—â–µ–Ω–æ —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∏–≥—Ä\` - ${userDataT.visited_games} –∏–≥—Ä
\`–ë–∏–ª–µ—Ç—ã\` - ${userDataT.tickets}üè∑
\`–û–ø—ã—Ç–∞ –≥–∏–ª—å–¥–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\` - ${userDataT.gexp} GEXP
\`–ú–µ–¥–∞–ª—å ü•á\` - ${userDataT.medal_1} —à—Ç.
\`–ú–µ–¥–∞–ª—å ü•à\` - ${userDataT.medal_2} —à—Ç.
\`–ú–µ–¥–∞–ª—å ü•â\` - ${userDataT.medal_3} —à—Ç.
\`–°–æ–±—Ä–∞–Ω–æ –∑–≤—ë–∑–¥–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤\` - ${userDataT.starway.current} ‚ú®
\`–ù–µ–ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤\` - ${userDataT.stacked_items.length}
\`–°–±—Ä–æ—à–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å\` - ${userDataT.times_reset} —Ä–∞–∑`)


                        await i.editReply({
                            embeds: [mainT],
                            ephemeral: true
                        })
                    }

                }
            })
        } catch (e) {
            const admin = await client.users.fetch(`491343958660874242`)
            console.log(e)
            let options = interaction?.options.data.map(a => {
                return `{
"status": true,
"name": "${a.name}",
"type": ${a.type},
"autocomplete": ${a?.autocomplete ? true : false},
"value": "${a?.value ? a.value : "No value"}",
"user": "${a?.user?.id ? a.user.id : "No User"}",
"channel": "${a?.channel?.id ? a.channel.id : "No Channel"}",
"role": "${a?.role?.id ? a.role.id : "No Role"}",
"attachment": "${a?.attachment?.url ? a.attachment.url : "No Attachment"}"
}`
            })
            await admin.send(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`)
            await admin.send(`=> ${e}.
**–ö–æ–º–∞–Ω–¥–∞**: \`${interaction.commandName}\`
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: ${interaction.member}
**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**: ${interaction.targetUser.id}
**–û–ø—Ü–∏–∏**: \`\`\`json
${interaction.options.data.length <= 0 ? `{"status": false}` : options.join(`,\n`)}
\`\`\``)
            await admin.send(`‚óæ`)
        }

    }
}