const { SlashCommandBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType, EmbedBuilder } = require('discord.js');

const prettyMilliseconds = require(`pretty-ms`) //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï
const wait = require('node:timers/promises').setTimeout;
const { User } = require(`../../schemas/userdata`);
const { Temp } = require(`../../schemas/temp_items`);
const chalk = require(`chalk`);
const ch_list = require(`../../discord structure/channels.json`)
const linksInfo = require(`../../discord structure/links.json`)
;

async function StaffBox(interaction, client) {
    try {
        const { Guild } = require(`../../schemas/guilddata`)
        const guildData = await Guild.findOne({ id: interaction.guild.id })
        const user = interaction.member.user //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï
        const userData = await User.findOne({ userid: user.id })


        const timestamp = Math.round(interaction.createdTimestamp / 1000)
        const opener = interaction.member.id;
        const cmd_name = `king` //–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        const { roles } = interaction.member //–£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã

        const role = await interaction.guild.roles  //–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –¥–ª—è role
            .fetch("584673040470769667") //ID –∫–æ—Ä–æ–±–∫–∏
            .catch(console.error);
        if (!roles.cache.has("563793535250464809") && !roles.cache.has("320880176416161802") && !roles.cache.has("567689925143822346")) return interaction.reply({
            content: `–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –æ—Ñ–∏—Ü–µ—Ä–æ–º –≥–∏–ª—å–¥–∏–∏, –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç—É –∫–æ—Ä–æ–±–∫—É!`,
            ephemeral: true
        }) //–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –∫–æ—Ä–æ–±–∫–∏ || –ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if (userData.cooldowns.staffbox > Date.now()) //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï(–ì–î–ï –ö–£–õ–î–ê–£–ù)
            return interaction.reply({
                embeds: [
                    new EmbedBuilder()
                        .setColor(Number(linksInfo.bot_color))
                        .setAuthor({
                            name: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É`
                        })
                        .setDescription(`–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ ${prettyMilliseconds(userData.cooldowns.staffbox - Date.now(), { verbose: true, secondsDecimalDigits: 0 })}!`)
                ],
                ephemeral: true
            });
        await interaction.deferUpdate()
        //–õ—É—Ç –∏–∑ –∫–æ—Ä–æ–±–æ–∫
        //–°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
        //name - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        //dropChanceLOOT - –®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
        //roleID - ID —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è —Å–≤—è–∑–∞–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º –ª—É—Ç–æ–º.

        let { loot, rank_exp, act_exp, rumbik } = require(`./Box loot/staffbox.json`)
        //–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)


        //–†–∞–Ω–¥–æ–º - –æ–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤
        let sum_rank = 0;
        for (let i_rank = 0; i_rank < rank_exp.length; i_rank++) {
            sum_rank += rank_exp[i_rank].chance;
        }
        let r_rank = Math.floor(Math.random() * sum_rank);
        let i_rank = 0;
        for (let s = rank_exp[0].chance; s <= r_rank; s += rank_exp[i_rank].chance) {
            i_rank++;
        }

        //–°–æ–æ–±—â–µ–Ω–∏–µ - –æ–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤                       
        let formula_rank = rank_exp[i_rank].rank_amount * userData.pers_rank_boost + Math.round(rank_exp[i_rank].rank_amount * userData.perks.rank_boost * 0.05)
        userData.rank += formula_rank
        interaction.guild.channels.cache.get(ch_list.rank).send(
            `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
<@${opener}> +${formula_rank}üí†
\`–ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.\`
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`
        ); //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï


        //–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

        //–†–∞–Ω–¥–æ–º - –æ–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        let sum_act = 0;
        for (let i_act = 0; i_act < act_exp.length; i_act++) {
            sum_act += act_exp[i_act].chance;
        }
        let r_act = Math.floor(Math.random() * sum_act);
        let i_act = 0;
        for (let s = act_exp[0].chance; s <= r_act; s += act_exp[i_act].chance) {
            i_act++;
        }

        let actExp = act_exp[i_act].act_amount * userData.pers_act_boost * guildData.act_exp_boost
        interaction.guild.channels.cache.get(ch_list.act).send(
            `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
<@${opener}> +${actExp}üåÄ
\`–ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.\`
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`
        );

        userData.exp += actExp //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï

        let sum_rumb = 0;
        for (let i_rumb = 0; i_rumb < rumbik.length; i_rumb++) {
            sum_rumb += rumbik[i_rumb].chance;
        }
        let r_rumbik = Math.floor(Math.random() * sum_rumb);
        let i_rumb = 0;
        for (let s = rumbik[0].chance; s <= r_rumbik; s += rumbik[i_rumb].chance) {
            i_rumb++;
        }
        let rumb_amount = rumbik[i_rumb].amount * userData.pers_rumb_boost
        //–°–æ–æ–±—â–µ–Ω–∏–µ - —Ä—É–º–±–∏–∫–∏                       
        await interaction.guild.channels.cache.get(ch_list.rumb).send(
            `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
${interaction.member} +${rumb_amount}<:Rumbik:883638847056003072>
\`–ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.\`
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`
        );
        if (userData.rank_number >= 3) {
            userData.rumbik += rumb_amount
            userData.progress.items.find(it => it.name == 'RUMBIKS_TOTAL').total_items += rumb_amount
        } else {
            userData.rumbik += 0
        }
        //–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤

        //—Ä–∞–Ω–¥–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        let chances = []
        let sum_loot = 0;
        for (let i_loot = 0; i_loot < loot.length; i_loot++) {
            if (loot[i_loot].rarity == "Common") {
                sum_loot += loot[i_loot].chance * userData.box_chances.common
                chances.push(loot[i_loot].chance * userData.box_chances.common)
            } else if (loot[i_loot].rarity == "Uncommon") {
                sum_loot += loot[i_loot].chance * userData.box_chances.uncommon
                chances.push(loot[i_loot].chance * userData.box_chances.uncommon)
            } else if (loot[i_loot].rarity == "Rare") {
                sum_loot += loot[i_loot].chance * userData.box_chances.rare
                chances.push(loot[i_loot].chance * userData.box_chances.rare)
            } else if (loot[i_loot].rarity == "Epic") {
                sum_loot += loot[i_loot].chance * userData.box_chances.epic
                chances.push(loot[i_loot].chance * userData.box_chances.epic)
            } else if (loot[i_loot].rarity == "Legendary") {
                sum_loot += loot[i_loot].chance * userData.box_chances.legendary
                chances.push(loot[i_loot].chance * userData.box_chances.legendary)
            } else if (loot[i_loot].rarity == "Mythical") {
                sum_loot += loot[i_loot].chance * userData.box_chances.mythical
                chances.push(loot[i_loot].chance * userData.box_chances.mythical)
            } else if (loot[i_loot].rarity == "RNG") {
                sum_loot += loot[i_loot].chance * userData.box_chances.RNG
                chances.push(loot[i_loot].chance * userData.box_chances.RNG)
            } else {
                sum_loot += loot[i_loot].chance * 1
                chances.push(loot[i_loot].chance * 1)
                console.log(`–ü—Ä–µ–¥–º–µ—Ç ${loot[i_loot].loot_name} –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏!`)
            }
        }
        let r_loot = Math.floor(Math.random() * sum_loot);
        let i_loot = 0;
        for (let s = chances[0]; s <= r_loot; s += chances[i_loot]) {
            i_loot++;
        }
        let allChances = 0;
        for (let loo of loot) {
            allChances += loo.chance
        }
        let finalChance1 = ((loot[i_loot].chance / allChances) * 100).toFixed(1)


        //–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ª—É—Ç–µ

        const r_loot_msg = await interaction.guild.channels.cache.get(ch_list.box)
            .send({
                content: `‚óæ üíº ‚óæ
<@${opener}> –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–æ—Ä–æ–±–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∞...
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ€û‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
\`${loot[i_loot].loot_name}\` (–®–∞–Ω—Å: \`${finalChance1}%\`)
${loot[i_loot].loot_description}.
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ€û‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
‚óæ üíº ‚óæ`
            });
        if (!roles.cache.has(loot[i_loot].loot_roleID)) {
            await roles.add(loot[i_loot].loot_roleID).catch(console.error);
            await r_loot_msg.react("‚úÖ")
        } else {
            if (userData.stacked_items.length < userData.upgrades.inventory_size) {
                await userData.stacked_items.push(loot[i_loot].loot_roleID)
                await r_loot_msg.react("‚úÖ")
            } else {
                await interaction.guild.channels.cache.get(ch_list.box).send({
                    content: `–ú—ã –Ω–µ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω. –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª <#1141026403765211136>!`
                })
                await r_loot_msg.react("üö´")
            }
        }
        userData.cooldowns.staffbox = Date.now() + (1000 * 60 * 60 * 24 * 4)
        userData.save();
        client.ActExp(userData.userid)
        client.ProgressUpdate(interaction.member);
        console.log(chalk.blackBright(`[${new Date()}]`) + chalk.magentaBright(`[${interaction.user.tag} –æ—Ç–∫—Ä—ã–ª –∫–æ—Ä–æ–±–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∞]`) + chalk.gray(`: +${act_exp[i_act].act_amount} –æ–ø—ã—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, +${rank_exp[i_rank].rank_amount} –æ–ø—ã—Ç–∞ —Ä–∞–Ω–≥–æ–≤, ${loot[i_loot].loot_name}`))

    } catch (e) {
        const admin = await client.users.fetch(`491343958660874242`)
        console.log(e)
        let options = interaction?.options.data.map(a => {
            return `{
"status": true,
"name": "${a.name}",
"type": ${a.type},
"autocomplete": ${a?.autocomplete ? true : false},
"value": "${a?.value ? a.value : "No value"}",
"user": "${a?.user?.id ? a.user.id : "No User"}",
"channel": "${a?.channel?.id ? a.channel.id : "No Channel"}",
"role": "${a?.role?.id ? a.role.id : "No Role"}",
"attachment": "${a?.attachment?.url ? a.attachment.url : "No Attachment"}"
}`
        })
        await admin.send(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`)
        await admin.send(`=> ${e}.
**–ö–æ–º–∞–Ω–¥–∞**: \`${interaction.commandName}\`
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: ${interaction.member}
**–ö–∞–Ω–∞–ª**: ${interaction.channel}
**–û–ø—Ü–∏–∏**: \`\`\`json
${interaction.options.data.length <= 0 ? `{"status": false}` : options.join(`,\n`)}
\`\`\``)
        await admin.send(`‚óæ`)
    }
}
module.exports = {
    category: `box`,
    plugin: `info`,
    StaffBox
};