const { SlashCommandBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType, EmbedBuilder } = require('discord.js');

const prettyMilliseconds = require(`pretty-ms`) //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï
const wait = require('node:timers/promises').setTimeout;
const { User } = require(`../../schemas/userdata`);
const { Temp } = require(`../../schemas/temp_items`);
const chalk = require(`chalk`);
const ch_list = require(`../../discord structure/channels.json`)


async function SeasonalWinner(interaction, client) {
    try {
        const { Guild } = require(`../../schemas/guilddata`)
        const guildData = await Guild.findOne({ id: interaction.guild.id })
        const user = interaction.member.user //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï
        const userData = await User.findOne({ userid: user.id })


        const timestamp = Math.round(interaction.createdTimestamp / 1000)
        const opener = interaction.member.id;
        const cmd_name = `king` //–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        const { roles } = interaction.member //–£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã

        const role = await interaction.guild.roles  //–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –¥–ª—è role
            .fetch("1132678509307904210") //ID –∫–æ—Ä–æ–±–∫–∏
            .catch(console.error);
        if (!roles.cache.has("1132678509307904210") && !roles.cache.has("567689925143822346")) return interaction.reply({
            content: `–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–µ–∑–æ–Ω–Ω—ã–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º, –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç—É –∫–æ—Ä–æ–±–∫—É!`,
            ephemeral: true
        }) //–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –∫–æ—Ä–æ–±–∫–∏ || –ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if (userData.cooldowns.seasonalWinner > Date.now()) //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï(–ì–î–ï –ö–£–õ–î–ê–£–ù)
            return interaction.reply({
                embeds: [
                    new EmbedBuilder()
                        .setColor(Number(client.information.bot_color))
                        .setAuthor({
                            name: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É`
                        })
                        .setDescription(`–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ ${prettyMilliseconds(userData.cooldowns.seasonalWinner - Date.now(), { verbose: true, secondsDecimalDigits: 0 })}!`)
                ],
                ephemeral: true
            });
        await interaction.deferUpdate()
        //–õ—É—Ç –∏–∑ –∫–æ—Ä–æ–±–æ–∫
        //–°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
        //name - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        //dropChanceLOOT - –®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
        //roleID - ID —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è —Å–≤—è–∑–∞–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º –ª—É—Ç–æ–º.

        let { loot, act_exp } = require(`./Box loot/seasonalWinner.json`)
        //–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)




        //–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

        //–†–∞–Ω–¥–æ–º - –æ–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        let sum_act = 0;
        for (let i_act = 0; i_act < act_exp.length; i_act++) {
            sum_act += act_exp[i_act].chance;
        }
        let r_act = Math.floor(Math.random() * sum_act);
        let i_act = 0;
        for (let s = act_exp[0].chance; s <= r_act; s += act_exp[i_act].chance) {
            i_act++;
        }

        let actExp = act_exp[i_act].amount * userData.pers_act_boost * guildData.act_exp_boost
        interaction.guild.channels.cache.get(ch_list.act).send(
            `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
<@${opener}> +${actExp}üåÄ
\`–ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫–æ—Ä–æ–±–∫–∏ —Å–µ–∑–æ–Ω–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.\`
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`
        );

        userData.exp += actExp //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï

        //–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤

        //—Ä–∞–Ω–¥–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        let chances = []
        let sum_loot = 0;
        for (let i_loot = 0; i_loot < loot.length; i_loot++) {
            if (loot[i_loot].rarity == "Common") {
                sum_loot += loot[i_loot].chance * userData.box_chances.common
                chances.push(loot[i_loot].chance * userData.box_chances.common)
            } else if (loot[i_loot].rarity == "Uncommon") {
                sum_loot += loot[i_loot].chance * userData.box_chances.uncommon
                chances.push(loot[i_loot].chance * userData.box_chances.uncommon)
            } else if (loot[i_loot].rarity == "Rare") {
                sum_loot += loot[i_loot].chance * userData.box_chances.rare
                chances.push(loot[i_loot].chance * userData.box_chances.rare)
            } else if (loot[i_loot].rarity == "Epic") {
                sum_loot += loot[i_loot].chance * userData.box_chances.epic
                chances.push(loot[i_loot].chance * userData.box_chances.epic)
            } else if (loot[i_loot].rarity == "Legendary") {
                sum_loot += loot[i_loot].chance * userData.box_chances.legendary
                chances.push(loot[i_loot].chance * userData.box_chances.legendary)
            } else if (loot[i_loot].rarity == "Mythical") {
                sum_loot += loot[i_loot].chance * userData.box_chances.mythical
                chances.push(loot[i_loot].chance * userData.box_chances.mythical)
            } else if (loot[i_loot].rarity == "RNG") {
                sum_loot += loot[i_loot].chance * userData.box_chances.RNG
                chances.push(loot[i_loot].chance * userData.box_chances.RNG)
            } else {
                sum_loot += loot[i_loot].chance * 1
                chances.push(loot[i_loot].chance * 1)
                console.log(`–ü—Ä–µ–¥–º–µ—Ç ${loot[i_loot].name} –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏!`)
            }
        }
        let r_loot = Math.floor(Math.random() * sum_loot);
        let i_loot = 0;
        for (let s = chances[0]; s <= r_loot; s += chances[i_loot]) {
            i_loot++;
        }
        let allChances = 0;
        for (let loo of loot) {
            allChances += loo.chance
        }
        let finalChance1 = ((loot[i_loot].chance / allChances) * 100).toFixed(1)


        //–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ª—É—Ç–µ

        const r_loot_msg = await interaction.guild.channels.cache.get(ch_list.box)
            .send({
                content: `‚óæ üèÜ ‚óæ
<@${opener}> –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–æ—Ä–æ–±–∫—É —Å–µ–∑–æ–Ω–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è...
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ€û‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
\`${loot[i_loot].name}\` (–®–∞–Ω—Å: \`${finalChance1}%\`)
${loot[i_loot].loot_description}.
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ€û‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
‚óæ üèÜ ‚óæ`
            });
        if (!roles.cache.has(loot[i_loot].loot_roleID)) {
            await roles.add(loot[i_loot].loot_roleID).catch(console.error);
            await r_loot_msg.react("‚úÖ")
        } else {
            if (userData.stacked_items.length < userData.upgrades.inventory_size) {
                await userData.stacked_items.push(loot[i_loot].loot_roleID)
                await r_loot_msg.react("‚úÖ")
            } else {
                await interaction.guild.channels.cache.get(ch_list.box).send({
                    content: `–ú—ã –Ω–µ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω. –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª <#1141026403765211136>!`
                })
                await r_loot_msg.react("üö´")
            }
        }
        userData.cooldowns.seasonalWinner = Date.now() + (1000 * 60 * 60 * 24 * 7) * (1 - (userData.perks.decrease_cooldowns * 0.1))
        if (userData.cd_remind.includes('seasonalWinner')) {
            let ITEM_ID = userData.cd_remind.findIndex(item_id => item_id == 'seasonalWinner')
            userData.cd_remind.splice(ITEM_ID, 1)
        }
        userData.save();
        client.ActExp(userData.userid)
        console.log(chalk.blackBright(`[${new Date()}]`) + chalk.magentaBright(`[${interaction.user.tag} –æ—Ç–∫—Ä—ã–ª —Å–µ–∑–æ–Ω–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è]`) + chalk.gray(`: +${act_exp[i_act].amount} –æ–ø—ã—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, ${loot[i_loot].name}`))

    } catch (e) {
        const admin = await client.users.fetch(`491343958660874242`)
        console.log(e)
        await admin.send({
            content: `-> \`\`\`${e.stack}\`\`\``
        }).catch()
    }
}
module.exports = {
    category: `box`,
    plugin: `info`,
    SeasonalWinner
};