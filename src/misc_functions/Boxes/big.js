const { SlashCommandBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder, ComponentType } = require('discord.js');

const wait = require('node:timers/promises').setTimeout;
const { User } = require(`../../schemas/userdata`);
const chalk = require(`chalk`);
const ch_list = require(`../../discord structure/channels.json`)
const linksInfo = require(`../../discord structure/links.json`)

async function Big(interaction, client) {
    try {
        const { Guild } = require(`../../schemas/guilddata`)
        const guildData = await Guild.findOne({ id: interaction.guild.id })
        const user = interaction.member.user //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï
        const userData = await User.findOne({ userid: user.id })




        const { roles } = interaction.member //–£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã
        const role = await interaction.guild.roles  //–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –¥–ª—è role
            .fetch("521248091853291540") //ID –∫–æ—Ä–æ–±–∫–∏
            .catch(console.error);
        if (roles.cache.has("521248091853291540") || roles.cache.has("567689925143822346")) { //–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –∫–æ—Ä–æ–±–∫–∏ || –ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await interaction.deferUpdate()
            const cmd_name = `big` //–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            const timestamp = Math.round(interaction.createdTimestamp / 1000)
            const opener = interaction.member.id;
            await roles.remove(role).catch(console.error); //–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –∫–æ—Ä–æ–±–∫–∏

            //–õ—É—Ç –∏–∑ –∫–æ—Ä–æ–±–æ–∫
            //–°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
            //name - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
            //chance - –®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
            //roleID - ID —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è —Å–≤—è–∑–∞–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º –ª—É—Ç–æ–º.

            //–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
            let { rank_exp, act_exp, loot, cosmetic } = require(`./Box loot/big.json`)

            //–†–∞–Ω–¥–æ–º - –æ–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤
            let sum_rank = 0;
            for (let i_rank = 0; i_rank < rank_exp.length; i_rank++) {
                sum_rank += rank_exp[i_rank].chance;
            }
            let r_rank = Math.floor(Math.random() * sum_rank);
            let i_rank = 0;
            for (let s = rank_exp[0].chance; s <= r_rank; s += rank_exp[i_rank].chance) {
                i_rank++;
            }

            //–°–æ–æ–±—â–µ–Ω–∏–µ - –æ–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤  
            let formula_rank = rank_exp[i_rank].rank_amount * userData.pers_rank_boost + Math.round(rank_exp[i_rank].rank_amount * userData.perks.rank_boost * 0.05)
            interaction.guild.channels.cache.get(ch_list.rank).send(
                `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
<@${opener}> +${formula_rank}üí†
\`–ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –±–æ–ª—å—à–æ–π –∫–æ—Ä–æ–±–∫–∏.\`
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`
            );
            userData.rank += formula_rank

            //–†–∞–Ω–¥–æ–º - –æ–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            let sum_act = 0;
            for (let i_act = 0; i_act < act_exp.length; i_act++) {
                sum_act += act_exp[i_act].chance;
            }
            let r_act = Math.floor(Math.random() * sum_act);
            let i_act = 0;
            for (let s = act_exp[0].chance; s <= r_act; s += act_exp[i_act].chance) {
                i_act++;
            }

            let actExp = act_exp[i_act].act_amount * userData.pers_act_boost * guildData.act_exp_boost
            interaction.guild.channels.cache.get(ch_list.act).send(
                `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
<@${opener}> +${actExp}üåÄ
\`–ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –±–æ–ª—å—à–æ–π –∫–æ—Ä–æ–±–∫–∏.\`
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`
            );
            userData.exp += actExp //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï

            userData.save();
            client.ActExp(userData.userid)

            //—Ä–∞–Ω–¥–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            let chances = []
            let sum_loot = 0;
            for (let i_loot = 0; i_loot < loot.length; i_loot++) {
                if (loot[i_loot].rarity == "Common") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.common
                    chances.push(loot[i_loot].chance * userData.box_chances.common)
                } else if (loot[i_loot].rarity == "Uncommon") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.uncommon
                    chances.push(loot[i_loot].chance * userData.box_chances.uncommon)
                } else if (loot[i_loot].rarity == "Rare") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.rare
                    chances.push(loot[i_loot].chance * userData.box_chances.rare)
                } else if (loot[i_loot].rarity == "Epic") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.epic
                    chances.push(loot[i_loot].chance * userData.box_chances.epic)
                } else if (loot[i_loot].rarity == "Legendary") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.legendary
                    chances.push(loot[i_loot].chance * userData.box_chances.legendary)
                } else if (loot[i_loot].rarity == "Mythical") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.mythical
                    chances.push(loot[i_loot].chance * userData.box_chances.mythical)
                } else if (loot[i_loot].rarity == "RNG") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.RNG
                    chances.push(loot[i_loot].chance * userData.box_chances.RNG)
                } else {
                    sum_loot += loot[i_loot].chance * 1
                    chances.push(loot[i_loot].chance * 1)
                    console.log(`–ü—Ä–µ–¥–º–µ—Ç ${loot[i_loot].loot_name} –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏!`)
                }
            }
            let r_loot = Math.floor(Math.random() * sum_loot);
            let i_loot = 0;
            for (let s = chances[0]; s <= r_loot; s += chances[i_loot]) {
                i_loot++;
            }
            let allChances = 0;
            for (let loo of loot) {
                allChances += loo.chance
            }
            let finalChance1 = ((loot[i_loot].chance / allChances) * 100).toFixed(1)

            //—Ä–∞–Ω–¥–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            let sum_cosmetic = 0;
            for (let i_cosmetic = 0; i_cosmetic < cosmetic.length; i_cosmetic++) {
                sum_cosmetic += cosmetic[i_cosmetic].chance;
            }
            let r_cosmetic = Math.floor(Math.random() * sum_cosmetic);
            let i_cosmetic = 0;
            for (let s = cosmetic[0].chance; s <= r_cosmetic; s += cosmetic[i_cosmetic].chance) {
                i_cosmetic++;
            }
            const before = await interaction.member.roles.cache.has(loot[i_loot].loot_roleID)

            //–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ª—É—Ç–µ    
            let r_loot_msg
            const boxes = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('boxes')
                        .setLabel('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')
                        .setStyle(ButtonStyle.Success)
                        .setEmoji(`‚¨ÜÔ∏è`)
                        .setDisabled(false)
                )
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`changeitem`)
                        .setLabel(`–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç`)
                        .setEmoji(`‚ú®`)
                        .setStyle(ButtonStyle.Primary)
                        .setDisabled(true)
                )
            if (cosmetic[i_cosmetic].loot_name == `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.`) {
                boxes.components[0].setDisabled(true)
            }
            r_loot_msg = await interaction.guild.channels.cache.get(ch_list.box)
                .send({
                    content: `‚óæ
<@${opener}> –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–æ–ª—å—à—É—é –∫–æ—Ä–æ–±–∫—É –æ—Ç –≥–∏–ª—å–¥–∏–∏.
‚ï≠‚ïê‚îÄ‚îÄ‚îÄ‚îÄ‚ïê‚åò‚ïê‚îÄ‚îÄ‚îÄ‚îÄ‚ïê‚ïÆ
\`${loot[i_loot].loot_name}\` (–®–∞–Ω—Å: \`${finalChance1}%\`)
${loot[i_loot].loot_description}
‚ï∞‚ïê‚îÄ‚îÄ‚îÄ‚îÄ‚ïê‚åò‚ïê‚îÄ‚îÄ‚îÄ‚îÄ‚ïê‚ïØ
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∏–∑ –±–æ–ª—å—à–æ–π –∫–æ—Ä–æ–±–∫–∏: \`${cosmetic[i_cosmetic].loot_name}\`
${cosmetic[i_cosmetic].loot_description}
‚óæ`,
                    components: [boxes]
                });
            if (loot[i_loot].type == "Box" || userData.perks.store_items !== 0) {
                if (!roles.cache.has(loot[i_loot].loot_roleID) && loot[i_loot].loot_name != `–ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç.` || !roles.cache.has(loot[i_loot].loot_roleID) && loot[i_loot].loot_name == `–ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç.` && roles.cache.has("597746051998285834")) {
                    await roles.add(loot[i_loot].loot_roleID).catch(console.error);
                    await r_loot_msg.react("‚úÖ")
                } else {
                    if (loot[i_loot].loot_name == `–ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç.` && !roles.cache.has("597746051998285834") || roles.cache.has(loot[i_loot].loot_roleID)) {
                        if (userData.stacked_items.length < userData.upgrades.inventory_size) {
                            await userData.stacked_items.push(loot[i_loot].loot_roleID)
                            await r_loot_msg.react("‚úÖ")
                        } else {
                            await interaction.guild.channels.cache.get(ch_list.box).send({
                                content: `–ú—ã –Ω–µ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω. –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª <#1141026403765211136>!`
                            })
                            await r_loot_msg.react("üö´")
                        }
                    };
                };
            } else {
                if (!roles.cache.has(loot[i_loot].loot_roleID) && loot[i_loot].loot_name != `–ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç.` || !roles.cache.has(loot[i_loot].loot_roleID) && loot[i_loot].loot_name == `–ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç.` && roles.cache.has("597746051998285834")) {
                    await roles.add(loot[i_loot].loot_roleID).catch(console.error);
                    await r_loot_msg.react("‚úÖ")
                } else {
                    if (loot[i_loot].loot_name == `–ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç.` && !roles.cache.has("597746051998285834") || roles.cache.has(loot[i_loot].loot_roleID)) {
                        await r_loot_msg.react("üö´")
                    };
                };
            }

            const filter = (i) => (i.user.id == interaction.user.id && i.customId === 'boxes');

            const coll1 = r_loot_msg.createMessageComponentCollector({ filter, componentType: ComponentType.Button, time: 60000 })

            coll1.on('collect', async (i) => {
                if (i.user.id === interaction.member.user.id) {
                    if (cosmetic[i_cosmetic].loot_name.startsWith(`–ö–û–°–ú–ï–¢–ò–ß–ï–°–ö–ò–ô –≠–ú–û–î–ó–ò`) && userData.rank_number >= 4) {
                        userData.displayname.symbol = cosmetic[i_cosmetic].symbol
                        userData.save()
                        await boxes.components[0]
                            .setDisabled(true)
                            .setStyle(ButtonStyle.Secondary)
                            .setEmoji(`üïì`)
                            .setLabel(`–ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...`)
                        i.reply({
                            content: `–û–∂–∏–¥–∞–π—Ç–µ! –°–∫–æ—Ä–æ –≤–∞—à –∑–Ω–∞—á–æ–∫ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ï—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –≤–æ–ø—Ä–æ—Å-–º–æ–¥–µ—Ä–∞–º!`,
                            ephemeral: true
                        })
                    }

                    else if (cosmetic[i_cosmetic].loot_name.startsWith(`–†–ê–ú–ö–ê –î–õ–Ø –ù–ò–ö–ê`) && userData.rank_number >= 5) {
                        userData.displayname.ramka1 = cosmetic[i_cosmetic].symbol
                        userData.displayname.ramka2 = cosmetic[i_cosmetic].symbol
                        userData.save()
                        await boxes.components[0]
                            .setDisabled(true)
                            .setStyle(ButtonStyle.Secondary)
                            .setEmoji(`üïì`)
                            .setLabel(`–ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...`)
                        i.reply({
                            content: `–û–∂–∏–¥–∞–π—Ç–µ! –°–∫–æ—Ä–æ –≤–∞—à–∞ —Ä–∞–º–∫–∞ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ï—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –≤–æ–ø—Ä–æ—Å-–º–æ–¥–µ—Ä–∞–º!`,
                            ephemeral: true
                        })

                    } else {
                        i.reply({
                            content: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–±–µ –¥–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã –º–æ–∂–µ—Ç–µ –≤ –∫–∞–Ω–∞–ª–µ <#931620901882068992>!`,
                            ephemeral: true
                        })
                        await boxes.components[0]
                            .setDisabled(true)
                            .setStyle(ButtonStyle.Secondary)
                            .setEmoji(`‚ùå`)
                            .setLabel(`–ù–∏–∑–∫–∏–π —Ä–∞–Ω–≥`)
                    }

                    await r_loot_msg.edit({
                        components: [boxes]
                    })

                } else {
                    i.reply({ content: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–Ω–æ–ø–æ—á–∫—É!`, ephemeral: true });
                }
            })
            coll1.on('end', async (err) => {
                await boxes.components[0]
                    .setDisabled(true)
                    .setStyle(ButtonStyle.Secondary)
                    .setLabel(`–û—Ç–º–µ–Ω–µ–Ω–æ`)
                    .setEmoji(`‚ùå`)

                await r_loot_msg.edit({
                    components: [boxes]
                })
            });

            if (before == true && userData.perks.change_items >= 1 && loot[i_loot].loot_name !== "–ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç.") {
                boxes.components[1].setDisabled(false)

                await r_loot_msg.edit({
                    content: `‚óæ
<@${opener}> –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–æ–ª—å—à—É—é –∫–æ—Ä–æ–±–∫—É –æ—Ç –≥–∏–ª—å–¥–∏–∏.
‚ï≠‚ïê‚îÄ‚îÄ‚îÄ‚îÄ‚ïê‚åò‚ïê‚îÄ‚îÄ‚îÄ‚îÄ‚ïê‚ïÆ
\`${loot[i_loot].loot_name}\` (–®–∞–Ω—Å: \`${finalChance1}%\`)
${loot[i_loot].loot_description}
‚ï∞‚ïê‚îÄ‚îÄ‚îÄ‚îÄ‚ïê‚åò‚ïê‚îÄ‚îÄ‚îÄ‚îÄ‚ïê‚ïØ
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∏–∑ –±–æ–ª—å—à–æ–π –∫–æ—Ä–æ–±–∫–∏: \`${cosmetic[i_cosmetic].loot_name}\`
${cosmetic[i_cosmetic].loot_description}
‚óæ
–£ –≤–∞—Å –µ—Å—Ç—å –ø–µ—Ä–∫ \`‚ú® –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\`, –ø–æ—ç—Ç–æ–º—É –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 60 —Å–µ–∫—É–Ω–¥!`,
                    components: [boxes]
                })

                const filter = (i) => (i.user.id == interaction.user.id && i.customId == `changeitem`)
                const collector = r_loot_msg.createMessageComponentCollector({
                    filter,
                    time: 60000,
                    max: 1
                })
                collector.on('collect', async (int) => {
                    await int.deferUpdate()
                    let list = await loot.filter(item => item.type == loot[i_loot].type && item.rarity == loot[i_loot].rarity && item.loot_name !== loot[i_loot].loot_name)
                    let sum = 0;
                    for (let i_loot = 0; i_loot < list.length; i_loot++) {
                        sum += list[i_loot].chance;
                    }
                    let r = Math.floor(Math.random() * sum);
                    let i = 0;
                    for (let s = list[0].chance; s <= r; s += list[i].chance) {
                        i++;
                    }
                    if (interaction.member.roles.cache.has(list[i].loot_roleID)) {
                        await r_loot_msg.react(`‚ú®`)
                        await r_loot_msg.react(`‚û°`)
                        await r_loot_msg.react(`üõë`)
                    } else if (!interaction.member.roles.cache.has(list[i].loot_roleID)) {
                        await r_loot_msg.react(`‚ú®`)
                        await r_loot_msg.react(`‚û°`)
                        await r_loot_msg.react(`üíö`)
                        await interaction.member.roles.add(list[i].loot_roleID)
                    }
                    boxes.components[1].setDisabled(true)
                    finalChance1 = ((list[i].chance / allChances) * 100).toFixed(1)
                    await r_loot_msg.edit({
                        content: `‚óæ
<@${opener}> –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–æ–ª—å—à—É—é –∫–æ—Ä–æ–±–∫—É –æ—Ç –≥–∏–ª—å–¥–∏–∏.
‚ï≠‚ïê‚îÄ‚îÄ‚îÄ‚îÄ‚ïê‚åò‚ïê‚îÄ‚îÄ‚îÄ‚îÄ‚ïê‚ïÆ
\`${list[i].loot_name}\` (–®–∞–Ω—Å: \`${finalChance1}%\`)
${list[i].loot_description}
‚ï∞‚ïê‚îÄ‚îÄ‚îÄ‚îÄ‚ïê‚åò‚ïê‚îÄ‚îÄ‚îÄ‚îÄ‚ïê‚ïØ
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∏–∑ –±–æ–ª—å—à–æ–π –∫–æ—Ä–æ–±–∫–∏: \`${cosmetic[i_cosmetic].loot_name}\`
${cosmetic[i_cosmetic].loot_description}
‚óæ
~~–£ –≤–∞—Å –µ—Å—Ç—å –ø–µ—Ä–∫ \`‚ú® –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\`, –ø–æ—ç—Ç–æ–º—É –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 60 —Å–µ–∫—É–Ω–¥!~~`,
                        components: [boxes]
                    })
                })

                collector.on('end', async (err) => {
                    boxes.components[1].setDisabled(true)
                    await r_loot_msg.edit({
                        components: [boxes]
                    })
                })
            }




            console.log(chalk.blackBright(`[${new Date()}]`) + chalk.magentaBright(`[${interaction.user.tag} –æ—Ç–∫—Ä—ã–ª –±–æ–ª—å—à—É—é –∫–æ—Ä–æ–±–∫—É]`) + chalk.gray(`: +${act_exp[i_act].act_amount} –æ–ø—ã—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, +${rank_exp[i_rank].rank_amount} –æ–ø—ã—Ç–∞ —Ä–∞–Ω–≥–æ–≤, ${loot[i_loot].loot_name} –∏ ${cosmetic[i_cosmetic].loot_name}`))

        } else {
            await interaction.reply({
                content: `–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç \`${role.name}\` –∫–æ—Ä–æ–±–∫–∞!`,
                ephemeral: true
            })
        }
    } catch (e) {
        const admin = await client.users.fetch(`491343958660874242`)
        console.log(e)
        let options = interaction?.options.data.map(a => {
            return `{
"status": true,
"name": "${a.name}",
"type": ${a.type},
"autocomplete": ${a?.autocomplete ? true : false},
"value": "${a?.value ? a.value : "No value"}",
"user": "${a?.user?.id ? a.user.id : "No User"}",
"channel": "${a?.channel?.id ? a.channel.id : "No Channel"}",
"role": "${a?.role?.id ? a.role.id : "No Role"}",
"attachment": "${a?.attachment?.url ? a.attachment.url : "No Attachment"}"
}`
        })
        await admin.send(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`)
        await admin.send(`=> ${e}.
**–ö–æ–º–∞–Ω–¥–∞**: \`${interaction.commandName}\`
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: ${interaction.member}
**–ö–∞–Ω–∞–ª**: ${interaction.channel}
**–û–ø—Ü–∏–∏**: \`\`\`json
${interaction.options.data.length <= 0 ? `{"status": false}` : options.join(`,\n`)}
\`\`\``)
        await admin.send(`‚óæ`)
    }
}
module.exports = {
    category: `box`,
    plugin: `info`,
    Big
};