const { SlashCommandBuilder } = require('discord.js');

const { User } = require(`../../schemas/userdata`);
const { Guild } = require(`../../schemas/guilddata`)
const chalk = require(`chalk`);
const ch_list = require(`../../discord structure/channels.json`)


async function Summer(interaction, client) {
    try {
        const guildData = await Guild.findOne({ id: interaction.guild.id })
        if (guildData.plugins.items === false) return interaction.reply({ content: `–î–∞–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω –æ—Ç–∫–ª—é—á—ë–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!`, ephemeral: true })
        const user = interaction.member.user //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï
        const userData = await User.findOne({ userid: user.id })



        const { roles } = interaction.member //–£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã
        const role = await interaction.guild.roles  //–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –¥–ª—è role
            .fetch("1104095303054934168") //ID –∫–æ—Ä–æ–±–∫–∏
            .catch(console.error);
        if (roles.cache.has("1104095303054934168") || roles.cache.has("567689925143822346")) { //–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –∫–æ—Ä–æ–±–∫–∏ || –ø—Ä–∞–≤–ª–µ–Ω–∏—è

            const opener = interaction.member.id;
            await interaction.deferUpdate()
            await roles.remove(role).catch(console.error); //–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –∫–æ—Ä–æ–±–∫–∏
            //–õ—É—Ç –∏–∑ –∫–æ—Ä–æ–±–æ–∫
            //–°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
            //name - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
            //dropChanceLOOT - –®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
            //roleID - ID —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è —Å–≤—è–∑–∞–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º –ª—É—Ç–æ–º.

            //–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            let { loot, rank_exp, act_exp } = require(`./Box loot/summer.json`)

            //—Ä–∞–Ω–¥–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            let chances = []
            let sum_loot = 0;
            for (let i_loot = 0; i_loot < loot.length; i_loot++) {
                if (loot[i_loot].rarity == "Common") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.common
                    chances.push(loot[i_loot].chance * userData.box_chances.common)
                } else if (loot[i_loot].rarity == "Uncommon") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.uncommon
                    chances.push(loot[i_loot].chance * userData.box_chances.uncommon)
                } else if (loot[i_loot].rarity == "Rare") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.rare
                    chances.push(loot[i_loot].chance * userData.box_chances.rare)
                } else if (loot[i_loot].rarity == "Epic") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.epic
                    chances.push(loot[i_loot].chance * userData.box_chances.epic)
                } else if (loot[i_loot].rarity == "Legendary") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.legendary
                    chances.push(loot[i_loot].chance * userData.box_chances.legendary)
                } else if (loot[i_loot].rarity == "Mythical") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.mythical
                    chances.push(loot[i_loot].chance * userData.box_chances.mythical)
                } else if (loot[i_loot].rarity == "RNG") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.RNG
                    chances.push(loot[i_loot].chance * userData.box_chances.RNG)
                } else {
                    sum_loot += loot[i_loot].chance * 1
                    chances.push(loot[i_loot].chance * 1)
                    console.log(`–ü—Ä–µ–¥–º–µ—Ç ${loot[i_loot].loot_name} –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏!`)
                }
            }
            let r_loot = Math.floor(Math.random() * sum_loot);
            let i_loot = 0;
            for (let s = chances[0]; s <= r_loot; s += chances[i_loot]) {
                i_loot++;
            }
            let allChances = 0;
            for (let loo of loot) {
                allChances += loo.chance
            }
            let finalChance1 = ((loot[i_loot].chance / allChances) * 100).toFixed(1)


            //–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ª—É—Ç–µ              
            const r_loot_msg = await interaction.guild.channels.cache.get(ch_list.box)
                .send(
                    `‚óæ
<@${opener}> –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ª–µ—Ç–Ω—é—é –∫–æ—Ä–æ–±–∫—É:

‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
‚ï≠‚óú‚óû‚óù‚óú‚óü‚óù‚ïÆ‚ï≠‚óú‚óú‚óù‚óú‚óù‚óù‚ïÆ
‚ï∞‚óü‚óù‚óû‚óü‚óú‚óû‚ïØ‚ï∞‚óü‚óü‚óû‚óü‚óû‚óû‚ïØ
‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë


\`${loot[i_loot].loot_name}\` (–®–∞–Ω—Å: \`${finalChance1}%\`)
${loot[i_loot].loot_description}


‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
‚ï≠‚óú‚óû‚óù‚óú‚óü‚óù‚ïÆ‚ï≠‚óú‚óú‚óù‚óú‚óù‚óù‚ïÆ
‚ï∞‚óü‚óù‚óû‚óü‚óú‚óû‚ïØ‚ï∞‚óü‚óü‚óû‚óü‚óû‚óû‚ïØ
‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë`)
            if (loot[i_loot].loot_name == `üé´ –ë–ò–õ–ï–¢ –ù–ê –ú–û–†–ï`) {
                if (userData.seasonal.summer.sea_ticket == false) {
                    userData.seasonal.summer.sea_ticket = true
                    await r_loot_msg.react("‚úÖ")
                } else {
                    await r_loot_msg.react("üö´")
                }

            } else if (loot[i_loot].type == "Box" || userData.perks.store_items !== 0) {
                if (!roles.cache.has(loot[i_loot].loot_roleID) && loot[i_loot].loot_name !== `–ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç.`) {
                    await r_loot_msg.react("‚úÖ")
                    await roles.add(loot[i_loot].loot_roleID).catch(console.error)
                } else if (loot[i_loot].loot_name == `–ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç.`) {
                    await r_loot_msg.react("‚ùå")
                } else if (roles.cache.has(loot[i_loot].loot_roleID) && loot[i_loot].loot_name !== `–ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç.`) {
                    if (userData.stacked_items.length < userData.upgrades.inventory_size) {
                        await userData.stacked_items.push(loot[i_loot].loot_roleID)
                        await r_loot_msg.react("‚úÖ")
                    } else {
                        await interaction.guild.channels.cache.get(ch_list.box).send({
                            content: `–ú—ã –Ω–µ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω. –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª <#1141026403765211136>!`
                        })
                        await r_loot_msg.react("üö´")
                    }
                }
            } else {
                if (!roles.cache.has(loot[i_loot].loot_roleID) && loot[i_loot].loot_name !== `–ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç.`) {
                    await r_loot_msg.react("‚úÖ")
                    await roles.add(loot[i_loot].loot_roleID).catch(console.error)
                } else if (loot[i_loot].loot_name == `–ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç.`) {
                    await r_loot_msg.react("‚ùå")
                } else if (roles.cache.has(loot[i_loot].loot_roleID) && loot[i_loot].loot_name !== `–ù–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç.`) {
                    await r_loot_msg.react("‚ùå")
                }
            }


            //–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)


            //–†–∞–Ω–¥–æ–º - –æ–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤
            let sum_rank = 0;
            for (let i_rank = 0; i_rank < rank_exp.length; i_rank++) {
                sum_rank += rank_exp[i_rank].chance;
            }
            let r_rank = Math.floor(Math.random() * sum_rank);
            let i_rank = 0;
            for (let s = rank_exp[0].chance; s <= r_rank; s += rank_exp[i_rank].chance) {
                i_rank++;
            }

            //–°–æ–æ–±—â–µ–Ω–∏–µ - –æ–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤  
            let formula_rank = rank_exp[i_rank].rank_amount * userData.pers_rank_boost + Math.round(rank_exp[i_rank].rank_amount * userData.perks.rank_boost * 0.05)
            userData.rank += formula_rank
            interaction.guild.channels.cache.get(ch_list.rank).send(
                `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
<@${opener}> +${formula_rank}üí†
\`–ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –ª–µ—Ç–Ω–µ–π –∫–æ—Ä–æ–±–∫–∏.\`
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`
            );



            //–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏


            //–†–∞–Ω–¥–æ–º - –æ–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            let sum_act = 0;
            for (let i_act = 0; i_act < act_exp.length; i_act++) {
                sum_act += act_exp[i_act].chance
            }
            let r_act = Math.floor(Math.random() * sum_act);
            let i_act = 0;
            for (let s = act_exp[0].chance; s <= r_act; s += act_exp[i_act].chance) {
                i_act++;
            }

            let actExp = act_exp[i_act].act_amount * userData.pers_act_boost * guildData.act_exp_boost
            interaction.guild.channels.cache.get(ch_list.act).send(
                `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
<@${opener}> +${actExp}üåÄ
\`–ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –ª–µ—Ç–Ω–µ–π –∫–æ—Ä–æ–±–∫–∏.\`
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`
            );
            userData.exp += actExp //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï

            if (guildData.seasonal.easter.enabled === true) {
                const points = [0, 1, 2]
                const rp = points[Math.floor(Math.random() * points.length)]
                userData.seasonal.summer.points += rp
                userData.seasonal.summer.opened_boxes += 1
            }

            userData.save();
            client.ActExp(userData.userid)
            console.log(chalk.blackBright(`[${new Date()}]`) + chalk.magentaBright(`[${interaction.user.tag} –æ—Ç–∫—Ä—ã–ª –ª–µ—Ç–Ω—é—é –∫–æ—Ä–æ–±–∫—É]`) + chalk.gray(`: +${act_exp[i_act].act_amount} –æ–ø—ã—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, +${rank_exp[i_rank].rank_amount} –æ–ø—ã—Ç–∞ —Ä–∞–Ω–≥–æ–≤ –∏ ${loot[i_loot].loot_name}`))

        } else {
            await interaction.reply({
                content: `–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç \`${role.name}\` –∫–æ—Ä–æ–±–∫–∞!`,
                ephemeral: true
            })
        }
    } catch (e) {
        const admin = await client.users.fetch(`491343958660874242`)
        console.log(e)
        let options = interaction?.options.data.map(a => {
            return `{
"status": true,
"name": "${a.name}",
"type": ${a.type},
"autocomplete": ${a?.autocomplete ? true : false},
"value": "${a?.value ? a.value : "No value"}",
"user": "${a?.user?.id ? a.user.id : "No User"}",
"channel": "${a?.channel?.id ? a.channel.id : "No Channel"}",
"role": "${a?.role?.id ? a.role.id : "No Role"}",
"attachment": "${a?.attachment?.url ? a.attachment.url : "No Attachment"}"
}`
        })
        await admin.send(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`)
        await admin.send(`=> ${e}.
**–ö–æ–º–∞–Ω–¥–∞**: \`${interaction.commandName}\`
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: ${interaction.member}
**–ö–∞–Ω–∞–ª**: ${interaction.channel}
**–û–ø—Ü–∏–∏**: \`\`\`json
${interaction.options.data.length <= 0 ? `{"status": false}` : options.join(`,\n`)}
\`\`\``)
        await admin.send(`‚óæ`)
    }
}
module.exports = {
    category: `box`,
    plugin: `info`,
    Summer
};