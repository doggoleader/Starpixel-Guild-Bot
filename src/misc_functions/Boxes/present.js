const { SlashCommandBuilder, ActionRowBuilder, UserSelectMenuBuilder } = require('discord.js');

const { User } = require(`../../schemas/userdata`);
const chalk = require(`chalk`);
const ch_list = require(`../../discord structure/channels.json`)

const { changeProperty } = require('../../functions');


async function Present(interaction, client) {
    try {
        const { Guild } = require(`../../schemas/guilddata`)
        const guildData = await Guild.findOne({ id: interaction.guild.id })
        const user = interaction.member.user //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï
        const userData = await User.findOne({ userid: user.id })



        const { roles } = interaction.member //–£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã
        const role = await interaction.guild.roles  //–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –¥–ª—è role
            .fetch("925799156679856240") //ID –∫–æ—Ä–æ–±–∫–∏
            .catch(console.error);
        if (roles.cache.has("925799156679856240") || roles.cache.has("567689925143822346")) { //–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –∫–æ—Ä–æ–±–∫–∏ || –ø—Ä–∞–≤–ª–µ–Ω–∏—è
            const timestamp = Math.round(interaction.createdTimestamp / 1000)
            const userSelect = new ActionRowBuilder()
                .addComponents(
                    new UserSelectMenuBuilder()
                        .setCustomId(`user_present`)
                        .setPlaceholder(`–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`)
                )
            const rr = await interaction.reply({
                content: `–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º –ø–æ–¥–∞—Ä–∫–∞!`,
                ephemeral: true,
                components: [userSelect],
                fetchReply: true
            })
            const collector = rr.createMessageComponentCollector()
            collector.on('collect', async i => {
                const toReceive = await i.guild.members.fetch(i.values[0])
                if (toReceive.user.id == i.user.id) return i.reply({
                    content: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ —Å–∞–º–æ–º—É —Å–µ–±–µ!`,
                    ephemeral: true
                })
                if (!toReceive.roles.cache.has(`504887113649750016`)) return i.reply({
                    content: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –≥–æ—Å—Ç—é –≥–∏–ª—å–¥–∏–∏!`,
                    ephemeral: true
                })
                if (toReceive.user.bot) return i.reply({
                    content: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –±–æ—Ç—É!`,
                    ephemeral: true
                })
                await i.deferUpdate()
                const opener = interaction.member.id;
                await roles.remove(role).catch(console.error); //–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –∫–æ—Ä–æ–±–∫–∏
                let receivers = [
                    "opener",
                    "gifted",
                    "both",
                    "both",
                    "both"

                ]
                let receiver = receivers[Math.floor(Math.random() * receivers.length)]
                let userToReceive = []
                if (receiver == `opener`) {
                    userToReceive.push(i.member)
                } else if (receiver == `gifted`) {
                    userToReceive.push(toReceive)
                } else if (receiver == `both`) {
                    userToReceive.push(i.member)
                    userToReceive.push(toReceive)
                }
                //–õ—É—Ç –∏–∑ –∫–æ—Ä–æ–±–æ–∫
                //–°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
                //name - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
                //dropChanceLOOT - –®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
                //roleID - ID —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è —Å–≤—è–∑–∞–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º –ª—É—Ç–æ–º.

                //–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                let { loot, act_exp } = require(`./Box loot/present.json`)
                //—Ä–∞–Ω–¥–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                let chances = []
                let sum_loot = 0;
                for (let i_loot = 0; i_loot < loot.length; i_loot++) {
                    if (loot[i_loot].rarity == "Common") {
                        sum_loot += loot[i_loot].chance * userData.box_chances.common
                        chances.push(loot[i_loot].chance * userData.box_chances.common)
                    } else if (loot[i_loot].rarity == "Uncommon") {
                        sum_loot += loot[i_loot].chance * userData.box_chances.uncommon
                        chances.push(loot[i_loot].chance * userData.box_chances.uncommon)
                    } else if (loot[i_loot].rarity == "Rare") {
                        sum_loot += loot[i_loot].chance * userData.box_chances.rare
                        chances.push(loot[i_loot].chance * userData.box_chances.rare)
                    } else if (loot[i_loot].rarity == "Epic") {
                        sum_loot += loot[i_loot].chance * userData.box_chances.epic
                        chances.push(loot[i_loot].chance * userData.box_chances.epic)
                    } else if (loot[i_loot].rarity == "Legendary") {
                        sum_loot += loot[i_loot].chance * userData.box_chances.legendary
                        chances.push(loot[i_loot].chance * userData.box_chances.legendary)
                    } else if (loot[i_loot].rarity == "Mythical") {
                        sum_loot += loot[i_loot].chance * userData.box_chances.mythical
                        chances.push(loot[i_loot].chance * userData.box_chances.mythical)
                    } else if (loot[i_loot].rarity == "RNG") {
                        sum_loot += loot[i_loot].chance * userData.box_chances.RNG
                        chances.push(loot[i_loot].chance * userData.box_chances.RNG)
                    } else {
                        sum_loot += loot[i_loot].chance * 1
                        chances.push(loot[i_loot].chance * 1)
                        console.log(`–ü—Ä–µ–¥–º–µ—Ç ${loot[i_loot].loot_name} –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏!`)
                    }
                }
                let r_loot = Math.floor(Math.random() * sum_loot);
                let i_loot = 0;
                for (let s = chances[0]; s <= r_loot; s += chances[i_loot]) {
                    i_loot++;
                }
                let allChances = 0;
                for (let loo of loot) {
                    allChances += loo.chance
                }
                let finalChance1 = ((loot[i_loot].chance / allChances) * 100).toFixed(1)

                const songs = [
                    `–ù–æ–≤—ã–π –≥–æ–¥ –∫ –Ω–∞–º –º—á–∏—Ç—Å—è`,
                    `–ê —Å–Ω–µ–≥ –∏–¥–µ—Ç`,
                    `–ó–Ω–∞–µ—Ç –∫–∞–∂–¥—ã–π —Å–Ω–µ–≥–æ–≤–∏–∫ —Å–Ω–µ–≥–æ–≤–∏–∫–∞`,
                    `–ù–æ–≤—ã–π –≥–æ–¥, –æ–Ω —Ä–∞–∑ –≤ –≥–æ–¥—É!`,
                    `–ù–∞ —Å–≤–µ—Ç–µ –µ—Å—Ç—å –í–æ–ª—à–µ–±–Ω—ã–π –∫–ª–µ–π`,
                    `–ù–∞—à–∞ –µ–ª–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ —á—É–¥–æ`,
                    `–•–æ—Ä–æ—à–æ, —á—Ç–æ –∫–∞–∂–¥—ã–π –≥–æ–¥ –∫ –Ω–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç –ù–æ–≤—ã–π –≥–æ–¥`,
                    `–ù–µ —Ä—É–±–∏–ª–∏ –µ–ª–æ—á–∫—É –º—ã –Ω–∞ –ù–æ–≤—ã–π –≥–æ–¥`,
                    `–ü–æ–¥ –ù–æ–≤—ã–π –≥–æ–¥, –∫–∞–∫ –≤ —Å–∫–∞–∑–∫–µ, –ø–æ–ª–Ω—ã–º-–ø–æ–ª–Ω–æ —á—É–¥–µ—Å`,
                    `–°–Ω–µ–∂–∏–Ω–∫–∏ —Å–ø—É—Å–∫–∞—é—Ç—Å—è —Å –Ω–µ–±–∞`,
                    `–ë–µ–ª—ã–µ —Å–Ω–µ–∂–∏–Ω–∫–∏ –∫—Ä—É–∂–∞—Ç—Å—è —Å —É—Ç—Ä–∞`,
                    `–ü—Ä–∞–∑–¥–Ω–∏–∫ –∫ –Ω–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç`,

                ]
                const r_song = songs[Math.floor(Math.random() * songs.length)]

                //–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ª—É—Ç–µ              
                const r_loot_msg = await i.guild.channels.cache.get(ch_list.box)
                    .send(
                        `<@${opener}> –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥–∞—Ä–æ–∫:

‚ïî‚îÅ‚ïê‚îÅÔ∏ΩÔ∏æÔ∏ΩÔ∏æüéÖÔ∏æÔ∏ΩÔ∏æÔ∏Ω‚îÅ‚ïê‚îÅ‚ïó
\`${loot[i_loot].loot_name}\` (–®–∞–Ω—Å: \`${finalChance1}%\`)
–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${userToReceive.join(`, `)}
${r_song}!
‚ïö‚îÅ‚ïê‚îÅÔ∏ΩÔ∏æÔ∏ΩÔ∏æüéÖÔ∏æÔ∏ΩÔ∏æÔ∏Ω‚îÅ‚ïê‚îÅ‚ïù`)
                userToReceive.forEach(async member => {



                    if (loot[i_loot].type == "Box" || userData.perks.store_items !== 0) {
                        if (loot[i_loot].loot_roleID.startsWith(`new_year`)) {

                            let usToReceive = await User.findOne({ userid: member.user.id })
                            await changeProperty(usToReceive.seasonal, loot[i_loot].loot_roleID, true)
                            await r_loot_msg.react("‚úÖ")
                            usToReceive.save()
                        } else if (!member.roles.cache.has(loot[i_loot].loot_roleID)) {
                            await member.roles.add(loot[i_loot].loot_roleID).catch(console.error);
                            await r_loot_msg.react("‚úÖ")
                        } else {
                            if (!loot[i_loot].loot_roleID.startsWith(`new_year`)) {
                                let usToReceive = await User.findOne({ userid: member.user.id })
                                if (userData.stacked_items.length < userData.upgrades.inventory_size) {
                                    await usToReceive.stacked_items.push(loot[i_loot].loot_roleID)
                                    await r_loot_msg.react("‚úÖ")
                                } else {
                                    await interaction.guild.channels.cache.get(ch_list.box).send({
                                        content: `–ú—ã –Ω–µ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω. –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª <#1141026403765211136>!`
                                    })
                                    await r_loot_msg.react("üö´")
                                }
                                usToReceive.save()
                            }
                        }
                    } else {
                        if (loot[i_loot].loot_roleID.startsWith(`new_year`)) {
                            let usToReceive = await User.findOne({ userid: member.user.id })
                            await changeProperty(usToReceive.seasonal, loot[i_loot].loot_roleID, true)
                            await r_loot_msg.react("‚úÖ")
                            usToReceive.save()
                        } else if (!member.roles.cache.has(loot[i_loot].loot_roleID)) {
                            await member.roles.add(loot[i_loot].loot_roleID).catch(console.error);
                            await r_loot_msg.react("‚úÖ")
                        } else {
                            await r_loot_msg.react("üö´")
                        }
                    }


                })




                //–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

                //–†–∞–Ω–¥–æ–º - –æ–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                let sum_act = 0;
                for (let i_act = 0; i_act < act_exp.length; i_act++) {
                    sum_act += act_exp[i_act].chance;
                }
                let r_act = Math.floor(Math.random() * sum_act);
                let i_act = 0;
                for (let s = act_exp[0].chance; s <= r_act; s += act_exp[i_act].chance) {
                    i_act++;
                }

                let actExp = act_exp[i_act].act_amount * userData.pers_act_boost * guildData.act_exp_boost
                interaction.guild.channels.cache.get(ch_list.act).send(
                    `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
<@${opener}> +${actExp}üåÄ
\`–ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –ø–æ–¥–∞—Ä–∫–∞.\`
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ô°‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`
                );
                userData.exp += actExp //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï
                let p = [1, 2, 3]

                userData.seasonal.new_year.points += p[Math.floor(Math.random() * p.length)]
                userData.seasonal.new_year.opened_gifts += 1
                userData.save();
                client.ActExp(userData.userid)
                console.log(chalk.blackBright(`[${new Date()}]`) + chalk.magentaBright(`[${interaction.user.tag} –æ—Ç–∫—Ä—ã–ª –ø–æ–¥–∞—Ä–æ–∫]`) + chalk.gray(`: +${act_exp[i_act].act_amount} –æ–ø—ã—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ ${loot[i_loot].loot_name}`))
                collector.stop()
            })
            collector.on('end', async err => {
                await interaction.deleteReply()
            })


        } else {
            await interaction.reply({
                content: `–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç \`${role.name}\` –∫–æ—Ä–æ–±–∫–∞!`,
                ephemeral: true
            })
        }
    } catch (e) {
        const admin = await client.users.fetch(`491343958660874242`)
        console.log(e)
        let options = interaction?.options.data.map(a => {
            return `{
"status": true,
"name": "${a.name}",
"type": ${a.type},
"autocomplete": ${a?.autocomplete ? true : false},
"value": "${a?.value ? a.value : "No value"}",
"user": "${a?.user?.id ? a.user.id : "No User"}",
"channel": "${a?.channel?.id ? a.channel.id : "No Channel"}",
"role": "${a?.role?.id ? a.role.id : "No Role"}",
"attachment": "${a?.attachment?.url ? a.attachment.url : "No Attachment"}"
}`
        })
        await admin.send(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`)
        await admin.send(`=> ${e}.
**–ö–æ–º–∞–Ω–¥–∞**: \`${interaction.commandName}\`
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: ${interaction.member}
**–ö–∞–Ω–∞–ª**: ${interaction.channel}
**–û–ø—Ü–∏–∏**: \`\`\`json
${interaction.options.data.length <= 0 ? `{"status": false}` : options.join(`,\n`)}
\`\`\``)
        await admin.send(`‚óæ`)
    }
}
module.exports = {
    category: `box`,
    plugin: `info`,
    Present
};