const { SlashCommandBuilder, Attachment, EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder } = require('discord.js');
const { Guild } = require(`../../schemas/guilddata`)
const { User } = require(`../../schemas/userdata`);

const { GuildProgress } = require('../../misc_functions/Exporter');


/**
 * 
 * @param {import("discord.js").ChatInputCommandInteraction} interaction Interaction
 * @param {import("../../misc_functions/Exporter").StarpixelClient} client Client
 * 
 * Interaction main function
 */
async function execute(interaction, client) {
    try {

        await interaction.deferReply({
            fetchReply: true
        })

        const users = await User.find().then(users => {
            return users.filter(async user => await interaction.guild.members.fetch(user.userid))
        })
        let sort1 = users.sort((a, b) => {
            return b.exp - a.exp
        })
        let sort = sort1.sort((a, b) => {
            return b.level - a.level
        })
        let index = 1
        let i = 0
        let map = []
        for (let user of sort) {
            if (map.length < 10) {
                if (user.pers_settings.is_in_leaderboard == true) {
                    const tag = await interaction.guild.members.fetch(user.userid)
                    map.push(`**${index++}.** ${tag} > ${user.level} —É—Ä–æ–≤–µ–Ω—å & ${user.exp}üåÄ`)
                } else {
                    i++
                }

            }
        }


        let embed = new EmbedBuilder()
            .setColor(Number(client.information.bot_color))
            .setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ–ø—ã—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`)
            .setTimestamp(Date.now())
            .setDescription(`${map.slice(0, 10).join('\n')}
                
\* *–ò—Å–∫–ª—é—á–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ ${i} —á–µ–ª–æ–≤–µ–∫(–∞) –∏–∑-–∑–∞ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.*`)

        let selectMenu = new ActionRowBuilder()
            .addComponents(
                new StringSelectMenuBuilder()
                    .setCustomId(`select`)
                    .setPlaceholder(`–í–∏–¥—ã —Ç–∞–±–ª–∏—Ü –ª–∏–¥–µ—Ä–æ–≤`)
                    .addOptions(
                        {
                            label: `–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`,
                            value: `act`,
                            emoji: `üåÄ`,
                            default: true
                        },
                        {
                            label: `–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–Ω–≥–æ–≤`,
                            value: `rank`,
                            emoji: `üí†`,
                            default: false
                        },
                        {
                            label: `–†—É–º–±–∏–∫–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä—É–º–±–∏–∫–æ–≤`,
                            value: `rumbik`,
                            emoji: `<:Rumbik:883638847056003072>`,
                            default: false
                        },
                        {
                            label: `–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∏–≥—Ä—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª-–≤—É –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö`,
                            value: `guild_games`,
                            emoji: `üé≤`,
                            default: false
                        },
                        {
                            label: `–ë–∏–ª–µ—Ç—ã`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∏–ª–µ—Ç–æ–≤`,
                            value: `tickets`,
                            emoji: `üè∑`,
                            default: false
                        },
                        {
                            label: `–ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –≥–∏–ª—å–¥–∏–∏`,
                            description: `–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –≥–∏–ª—å–¥–∏–∏`,
                            value: `progress`,
                            emoji: `üå†`,
                            default: false
                        },
                    )
                    .setMinValues(1)
                    .setMaxValues(1)
            )
        const msg = await interaction.editReply({
            embeds: [embed],
            components: [selectMenu],
            fetchReply: true
        })

        const collector = msg.createMessageComponentCollector()

        collector.on('collect', async (int) => {
            const value = int.values[0]
            if (interaction.user.id === int.user.id) {
                await selectMenu.components[0].options.forEach(option => {
                    if (option.data.value == value) {
                        option.data.default = true
                    } else option.data.default = false
                })
                if (value == `act`) {
                    await int.deferUpdate()
                    sort1 = users.sort((a, b) => {
                        return b.exp - a.exp
                    })
                    sort = sort1.sort((a, b) => {
                        return b.level - a.level
                    })
                    index = 1
                    i = 0
                    map = []
                    for (let user of sort) {
                        if (map.length < 10) {
                            if (user.pers_settings.is_in_leaderboard == true) {
                                const tag = await interaction.guild.members.fetch(user.userid)
                                map.push(`**${index++}.** ${tag} > ${user.level} —É—Ä–æ–≤–µ–Ω—å & ${user.exp}üåÄ`)
                            } else {
                                i++
                            }

                        }
                    }
                    embed.setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ–ø—ã—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`)
                        .setTimestamp(Date.now())
                        .setDescription(`${map.slice(0, 10).join('\n')}
                
\* *–ò—Å–∫–ª—é—á–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ ${i} —á–µ–ª–æ–≤–µ–∫(–∞) –∏–∑-–∑–∞ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.*`)

                    await interaction.editReply({
                        embeds: [embed],
                        components: [selectMenu],
                        fetchReply: true
                    })
                } else if (value == `rank`) {
                    await int.deferUpdate()
                    sort = users.sort((a, b) => {
                        return b.rank - a.rank
                    })
                    index = 1
                    i = 0
                    map = []
                    for (let user of sort) {
                        if (map.length < 10) {
                            if (user.pers_settings.is_in_leaderboard == true) {
                                const tag = await interaction.guild.members.fetch(user.userid)
                                map.push(`**${index++}.** ${tag} >> ${user.rank}üí†`)
                            } else {
                                i++
                            }

                        }
                    }

                    embed.setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–Ω–≥–æ–≤`)
                        .setTimestamp(Date.now())
                        .setDescription(`${map.slice(0, 10).join('\n')}
                
\* *–ò—Å–∫–ª—é—á–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ ${i} —á–µ–ª–æ–≤–µ–∫(–∞) –∏–∑-–∑–∞ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.*`)


                    await interaction.editReply({
                        embeds: [embed],
                        components: [selectMenu],
                        fetchReply: true
                    })
                } else if (value == `rumbik`) {
                    await int.deferUpdate()
                    sort = users.sort((a, b) => {
                        return b.rumbik - a.rumbik
                    })
                    index = 1
                    i = 0
                    map = []
                    for (let user of sort) {
                        if (map.length < 10) {
                            if (user.pers_settings.is_in_leaderboard == true) {
                                const tag = await interaction.guild.members.fetch(user.userid)
                                map.push(`**${index++}.** ${tag} >> ${user.rumbik}<:Rumbik:883638847056003072>`)
                            } else {
                                i++
                            }

                        }
                    }

                    embed.setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä—É–º–±–∏–∫–æ–≤`)
                        .setTimestamp(Date.now())
                        .setDescription(`${map.slice(0, 10).join('\n')}
                
\* *–ò—Å–∫–ª—é—á–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ ${i} —á–µ–ª–æ–≤–µ–∫(–∞) –∏–∑-–∑–∞ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.*`)

                    await interaction.editReply({
                        embeds: [embed],
                        components: [selectMenu],
                        fetchReply: true
                    })
                } else if (value == `guild_games`) {
                    await int.deferUpdate()
                    sort = users.sort((a, b) => {
                        return b.visited_games - a.visited_games
                    })
                    index = 1
                    i = 0
                    map = []
                    for (let user of sort) {
                        if (map.length < 10) {
                            if (user.pers_settings.is_in_leaderboard == true) {
                                const tag = await interaction.guild.members.fetch(user.userid)
                                map.push(`**${index++}.** ${tag} >> ${user.visited_games}üé≤`)
                            } else {
                                i++
                            }

                        }
                    }

                    embed.setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∏–≥—Ä`)
                        .setTimestamp(Date.now())
                        .setDescription(`${map.slice(0, 10).join('\n')}
                
\* *–ò—Å–∫–ª—é—á–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ ${i} —á–µ–ª–æ–≤–µ–∫(–∞) –∏–∑-–∑–∞ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.*`)

                    await interaction.editReply({
                        embeds: [embed],
                        components: [selectMenu],
                        fetchReply: true
                    })
                } else if (value == `tickets`) {
                    await int.deferUpdate()
                    sort = users.sort((a, b) => {
                        return b.tickets - a.tickets
                    })
                    index = 1
                    i = 0
                    map = []
                    for (let user of sort) {
                        if (map.length < 10) {
                            if (user.pers_settings.is_in_leaderboard == true) {
                                const tag = await interaction.guild.members.fetch(user.userid)
                                map.push(`**${index++}.** ${tag} >> ${user.tickets}üè∑`)
                            } else {
                                i++
                            }

                        }
                    }

                    embed.setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∏–ª–µ—Ç–æ–≤`)
                        .setTimestamp(Date.now())
                        .setDescription(`${map.slice(0, 10).join('\n')}
                
\* *–ò—Å–∫–ª—é—á–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ ${i} —á–µ–ª–æ–≤–µ–∫(–∞) –∏–∑-–∑–∞ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.*`)

                    await interaction.editReply({
                        embeds: [embed],
                        components: [selectMenu],
                        fetchReply: true
                    })
                } else if (value == `progress`) {
                    await int.deferUpdate()
                    sort = users.sort((a, b) => {
                        return b.progress.points - a.progress.points
                    })
                    const progress = new GuildProgress(i.member, client)
                    let total = await progress.getMaxPoints();
                    index = 1
                    i = 0
                    map = []
                    for (let user of sort) {
                        if (map.length < 10) {
                            if (user.pers_settings.is_in_leaderboard == true) {
                                const tag = await interaction.guild.members.fetch(user.userid)
                                let sum = Math.round(1000 * (user.progress.points / total)) / 10
                                map.push(`**${index++}.** ${tag} >> ${user.progress.points}/${total} (${sum}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ)`)
                            } else {
                                i++
                            }

                        }
                    }

                    embed.setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —É—Ä–æ–≤–µ–Ω—é —Ä–∞–∑–≤–∏—Ç–∏—è –≤ –≥–∏–ª—å–¥–∏–∏`)
                        .setTimestamp(Date.now())
                        .setDescription(`${map.slice(0, 10).join('\n')}
                
\* *–ò—Å–∫–ª—é—á–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ ${i} —á–µ–ª–æ–≤–µ–∫(–∞) –∏–∑-–∑–∞ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.*`)

                    await interaction.editReply({
                        embeds: [embed],
                        components: [selectMenu],
                        fetchReply: true
                    })
                }
            } else {
                if (value == `act`) {
                    await int.deferReply({ fetchReply: true, ephemeral: true })
                    sort1 = users.sort((a, b) => {
                        return b.exp - a.exp
                    })
                    sort = sort1.sort((a, b) => {
                        return b.level - a.level
                    })
                    index = 1
                    i = 0
                    map = []
                    for (let user of sort) {
                        if (map.length < 10) {
                            if (user.pers_settings.is_in_leaderboard == true) {
                                const tag = await interaction.guild.members.fetch(user.userid)
                                map.push(`**${index++}.** ${tag} > ${user.level} —É—Ä–æ–≤–µ–Ω—å & ${user.exp}üåÄ`)
                            } else {
                                i++
                            }

                        }
                    }

                    embed.setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ–ø—ã—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`)
                        .setTimestamp(Date.now())
                        .setDescription(`${map.slice(0, 10).join('\n')}
                
\* *–ò—Å–∫–ª—é—á–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ ${i} —á–µ–ª–æ–≤–µ–∫(–∞) –∏–∑-–∑–∞ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.*`)

                    await int.editReply({
                        embeds: [embed]
                    })
                } else if (value == `rank`) {
                    await int.deferReply({ fetchReply: true, ephemeral: true })
                    sort = users.sort((a, b) => {
                        return b.rank - a.rank
                    })
                    index = 1
                    i = 0
                    map = []
                    for (let user of sort) {
                        if (map.length < 10) {
                            if (user.pers_settings.is_in_leaderboard == true) {
                                const tag = await interaction.guild.members.fetch(user.userid)
                                map.push(`**${index++}.** ${tag} >> ${user.rank}üí†`)
                            } else {
                                i++
                            }

                        }
                    }

                    embed.setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–Ω–≥–æ–≤`)
                        .setTimestamp(Date.now())
                        .setDescription(`${map.slice(0, 10).join('\n')}
                
\* *–ò—Å–∫–ª—é—á–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ ${i} —á–µ–ª–æ–≤–µ–∫(–∞) –∏–∑-–∑–∞ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.*`)

                    await int.editReply({
                        embeds: [embed]
                    })
                } else if (value == `rumbik`) {
                    await int.deferReply({ fetchReply: true, ephemeral: true })
                    sort = users.sort((a, b) => {
                        return b.rumbik - a.rumbik
                    })
                    index = 1
                    i = 0
                    map = []
                    for (let user of sort) {
                        if (map.length < 10) {
                            if (user.pers_settings.is_in_leaderboard == true) {
                                const tag = await interaction.guild.members.fetch(user.userid)
                                map.push(`**${index++}.** ${tag} >> ${user.rumbik}<:Rumbik:883638847056003072>`)
                            } else {
                                i++
                            }

                        }
                    }

                    embed.setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä—É–º–±–∏–∫–æ–≤`)
                        .setTimestamp(Date.now())
                        .setDescription(`${map.slice(0, 10).join('\n')}
                
\* *–ò—Å–∫–ª—é—á–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ ${i} —á–µ–ª–æ–≤–µ–∫(–∞) –∏–∑-–∑–∞ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.*`)

                    await int.editReply({
                        embeds: [embed]
                    })
                } else if (value == `guild_games`) {
                    await int.deferReply({ fetchReply: true, ephemeral: true })
                    sort = users.sort((a, b) => {
                        return b.visited_games - a.visited_games
                    })
                    index = 1
                    i = 0
                    map = []
                    for (let user of sort) {
                        if (map.length < 10) {
                            if (user.pers_settings.is_in_leaderboard == true) {
                                const tag = await interaction.guild.members.fetch(user.userid)
                                map.push(`**${index++}.** ${tag} >> ${user.visited_games}üé≤`)
                            } else {
                                i++
                            }

                        }
                    }

                    await int.editReply({
                        embeds: [embed]
                    })
                } else if (value == `tickets`) {
                    await int.deferReply({ fetchReply: true, ephemeral: true })
                    sort = users.sort((a, b) => {
                        return b.tickets - a.tickets
                    })
                    index = 1
                    i = 0
                    map = []
                    for (let user of sort) {
                        if (map.length < 10) {
                            if (user.pers_settings.is_in_leaderboard == true) {
                                const tag = await interaction.guild.members.fetch(user.userid)
                                map.push(`**${index++}.** ${tag} >> ${user.tickets}üè∑`)
                            } else {
                                i++
                            }

                        }
                    }

                    embed.setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∏–ª–µ—Ç–æ–≤`)
                        .setTimestamp(Date.now())
                        .setDescription(`${map.slice(0, 10).join('\n')}
                
\* *–ò—Å–∫–ª—é—á–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ ${i} —á–µ–ª–æ–≤–µ–∫(–∞) –∏–∑-–∑–∞ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.*`)

                    await int.editReply({
                        embeds: [embed]
                    })
                } else if (value == `progress`) {
                    await int.deferUpdate()
                    sort = users.sort((a, b) => {
                        return b.progress.points - a.progress.points
                    })
                    const progress = new GuildProgress(i.member, client)
                    let total = await progress.getMaxPoints();
                    index = 1
                    i = 0
                    map = []
                    for (let user of sort) {
                        if (map.length < 10) {
                            if (user.pers_settings.is_in_leaderboard == true) {
                                const tag = await interaction.guild.members.fetch(user.userid)
                                let sum = Math.round(1000 * (user.progress.points / total)) / 10
                                map.push(`**${index++}.** ${tag} >> ${user.progress.points}/${total} (${sum}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ)`)
                            } else {
                                i++
                            }

                        }
                    }

                    embed.setTitle(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —É—Ä–æ–≤–µ–Ω—é —Ä–∞–∑–≤–∏—Ç–∏—è –≤ –≥–∏–ª—å–¥–∏–∏`)
                        .setTimestamp(Date.now())
                        .setDescription(`${map.slice(0, 10).join('\n')}
                
\* *–ò—Å–∫–ª—é—á–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ ${i} —á–µ–ª–æ–≤–µ–∫(–∞) –∏–∑-–∑–∞ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.*`)

                    await int.editReply({
                        embeds: [embed],
                        fetchReply: true
                    })
                }
            }
        })
    } catch (e) {
        const admin = await client.users.fetch(`491343958660874242`)
        console.log(e)
        await admin.send({
            content: `-> \`\`\`${e.stack}\`\`\``
        }).catch()
    }



}
module.exports = {
    category: `items`,
    plugin: {
        id: "items",
        name: "–ü—Ä–µ–¥–º–µ—Ç—ã"
    },
    data: new SlashCommandBuilder()
        .setName(`leaderboard`)
        .setDescription(`–õ—É—á—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º`)
        .setDMPermission(false),
    execute
};