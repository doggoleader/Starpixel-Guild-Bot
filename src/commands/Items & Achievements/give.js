const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { execute } = require('../../events/client/start_bot/ready');
const { User } = require(`../../schemas/userdata`);
const ch_list = require(`../../discord structure/channels.json`)
const chalk = require(`chalk`);
const linksInfo = require(`../../discord structure/links.json`)
const { calcActLevel, getLevel } = require(`../../functions`)

module.exports = {
    category: `admin_only`,
    plugin: {
        id: "items",
        name: "–ü—Ä–µ–¥–º–µ—Ç—ã"
    },
    data: new SlashCommandBuilder()
        .setName(`give`)
        .setDescription(`–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`)
        .setDMPermission(false)
        .addStringOption(option => option
            .setName(`—Ç–∏–ø`)
            .setDescription(`–¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞`)
            .setAutocomplete(true)
            .setRequired(true)
        )
        .addUserOption(option => option
            .setName(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`)
            .setDescription(`–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç`)
            .setRequired(true)
        )
        .addNumberOption(option => option
            .setName(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`)
            .setDescription(`–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–¥–∞–≤–∞–µ–º–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞`)
            .setRequired(true)
        ),

    async autoComplete(interaction, client) {

        const focusedValue = interaction.options.getFocused();
        const choices = ['–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤', '–†—É–º–±–∏–∫–∏', '–ë–∏–ª–µ—Ç—ã', '–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∏–≥—Ä—ã'];
        const filtered = choices.filter(choice => choice.toLowerCase().includes(focusedValue.toLowerCase()));;
        await interaction.respond(
            filtered.map(choice => ({ name: choice, value: choice })),
        );
    },
    async execute(interaction, client) {
        try {
            const embed = new EmbedBuilder()
                .setAuthor({
                    name: `‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Ä–æ–ª—å!`
                })
                .setDescription(`–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ —Ä–æ–ª—å \`${interaction.guild.roles.cache.get(`320880176416161802`).name}\`!
–ù–æ –≤—ã –≤—Å—ë –µ—â—ë –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É \`/profile update\``)
                .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                .setColor(`DarkRed`)
                .setTimestamp(Date.now())

            if (!interaction.member.roles.cache.has(`320880176416161802`)) return interaction.reply({
                embeds: [embed],
                ephemeral: true
            })
            const member = interaction.options.getMember(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`) || interaction.member
            if (!member.roles.cache.has(`504887113649750016`)) return interaction.reply({
                content: `–î–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–∏–ª—å–¥–∏–∏!`,
                ephemeral: true
            })
            const user = interaction.options.getUser(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`) || interaction.member.user;
            const userData = await User.findOne({ userid: user.id })
            switch (interaction.options.getString(`—Ç–∏–ø`)) {
                case `–û–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`: {

                    let cur_exp = userData.exp + interaction.options.getNumber(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`)
                    let cur_level = userData.level
                    let total_exp = calcActLevel(0, cur_level, cur_exp)
                    let level_exp = getLevel(total_exp)
                    let level = level_exp[0], exp = level_exp[1]

                    userData.level = level
                    userData.exp = exp

                    userData.save();
                    client.ActExp(userData.userid)
                    await interaction.reply({
                        content: `–í—ã–¥–∞–Ω–æ ${interaction.options.getNumber(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`)}üåÄ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user}!`,
                        ephemeral: true
                    })
                    console.log(chalk.blackBright(`[${new Date()}]`) + chalk.green(`[${user.username} –ø–æ–ª—É—á–∏–ª –æ–ø—ã—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏]`) + chalk.gray(`: –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ ${userData.exp} –æ–ø—ã—Ç–∞ –∏ ${userData.level} —É—Ä–æ–≤–µ–Ω—å.`))
                };

                    break;
                case `–û–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤`: {
                    userData.rank += interaction.options.getNumber(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`)
                    userData.save();

                    await interaction.reply({
                        content: `–í—ã–¥–∞–Ω–æ ${interaction.options.getNumber(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`)}üí† –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user}! –£ –Ω–µ–≥–æ —Ç–µ–ø–µ—Ä—å ${userData.rank} –æ–ø—ã—Ç–∞ —Ä–∞–Ω–≥–æ–≤!`,
                        ephemeral: true
                    })
                    console.log(chalk.blackBright(`[${new Date()}]`) + chalk.green(`[${user.username} –ø–æ–ª—É—á–∏–ª –æ–ø—ã—Ç —Ä–∞–Ω–≥–æ–≤]`) + chalk.gray(`: –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ ${userData.rank} –æ–ø—ã—Ç–∞ —Ä–∞–Ω–≥–æ–≤.`))

                }

                    break;
                case `–†—É–º–±–∏–∫–∏`: {
                    userData.rumbik += interaction.options.getNumber(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`)
                    userData.progress.items.find(it => it.name == 'RUMBIKS_TOTAL').total_items += interaction.options.getNumber(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`)
                    userData.save();
                    await interaction.reply({
                        content: `–í—ã–¥–∞–Ω–æ ${interaction.options.getNumber(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`)}<:Rumbik:883638847056003072> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user}! –£ –Ω–µ–≥–æ —Ç–µ–ø–µ—Ä—å ${userData.rumbik} —Ä—É–º–±–∏–∫–æ–≤!`,
                        ephemeral: true
                    })

                    console.log(chalk.blackBright(`[${new Date()}]`) + chalk.green(`[${user.username} –ø–æ–ª—É—á–∏–ª —Ä—É–º–±–∏–∫–∏]`) + chalk.gray(`: –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ ${userData.rumbik} —Ä—É–º–±–∏–∫–æ–≤.`))
                }

                    break;

                case `–ë–∏–ª–µ—Ç—ã`: {
                    userData.tickets += interaction.options.getNumber(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`)
                    userData.progress.items.find(it => it.name == 'TICKETS_TOTAL').total_items += interaction.options.getNumber(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`)
                    userData.save();
                    await interaction.reply({
                        content: `–í—ã–¥–∞–Ω–æ ${interaction.options.getNumber(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`)}üè∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user}! –£ –Ω–µ–≥–æ —Ç–µ–ø–µ—Ä—å ${userData.tickets} –±–∏–ª–µ—Ç–æ–≤!`,
                        ephemeral: true
                    })

                    console.log(chalk.blackBright(`[${new Date()}]`) + chalk.green(`[${user.username} –ø–æ–ª—É—á–∏–ª –±–∏–ª–µ—Ç—ã]`) + chalk.gray(`: –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ ${userData.tickets} –±–∏–ª–µ—Ç–æ–≤.`))
                }

                    break;
                case `–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∏–≥—Ä—ã`: {
                    userData.visited_games += interaction.options.getNumber(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`)
                    userData.save();
                    await interaction.reply({
                        content: `–í—ã–¥–∞–Ω–æ ${interaction.options.getNumber(`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`)}üé≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user}! –£ –Ω–µ–≥–æ —Ç–µ–ø–µ—Ä—å ${userData.visited_games} –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∏–≥—Ä!`,
                        ephemeral: true
                    })

                    console.log(chalk.blackBright(`[${new Date()}]`) + chalk.green(`[${user.username} –ø–æ–ª—É—á–∏–ª —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∏–≥—Ä—ã]`) + chalk.gray(`: –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ ${userData.visited_games} –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∏–≥—Ä.`))
                }

                    break;

                default: {
                    await interaction.reply({
                        content: `–î–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!`,
                        ephemeral: true
                    })
                }
                    break;
            }
        } catch (e) {
            const admin = await client.users.fetch(`491343958660874242`)
            console.log(e)
            let options = interaction?.options.data.map(a => {
                return `{
"status": true,
"name": "${a.name}",
"type": ${a.type},
"autocomplete": ${a?.autocomplete ? true : false},
"value": "${a?.value ? a.value : "No value"}",
"user": "${a?.user?.id ? a.user.id : "No User"}",
"channel": "${a?.channel?.id ? a.channel.id : "No Channel"}",
"role": "${a?.role?.id ? a.role.id : "No Role"}",
"attachment": "${a?.attachment?.url ? a.attachment.url : "No Attachment"}"
}`
            })
            await admin.send(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`)
            await admin.send(`=> ${e}.
**–ö–æ–º–∞–Ω–¥–∞**: \`${interaction.commandName}\`
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: ${interaction.member}
**–ö–∞–Ω–∞–ª**: ${interaction.channel}
**–û–ø—Ü–∏–∏**: \`\`\`json
${interaction.options.data.length <= 0 ? `{"status": false}` : options.join(`,\n`)}
\`\`\``)
            await admin.send(`‚óæ`)
        }

    }
}