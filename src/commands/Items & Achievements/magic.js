const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { joinVoiceChannel } = require('@discordjs/voice');

const fetch = require(`node-fetch`);
const api = process.env.hypixel_apikey;
const { User } = require(`../../schemas/userdata`)
const { Guild } = require(`../../schemas/guilddata`)
const chalk = require(`chalk`);
const prettyMilliseconds = require(`pretty-ms`); //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï
const linksInfo = require(`../../discord structure/links.json`)

async function autoComplete(interaction, client) {
    switch (interaction.options.getSubcommand()) {
        case `first`: {
            const focusedValue = interaction.options.getFocused();
            const choices = [
                'blow',
                'cold',
                'flame'
            ];
            const filtered = choices.filter(choice => choice.toLowerCase().includes(focusedValue.toLowerCase()));;
            await interaction.respond(
                filtered.map(choice => ({ name: choice, value: choice })),
            );
        }

            break;
        case `second`: {
            const focusedValue = interaction.options.getFocused();
            const choices = [
                'bat',
                'curse',
                'potion'
            ];
            const filtered = choices.filter(choice => choice.toLowerCase().includes(focusedValue.toLowerCase()));;
            await interaction.respond(
                filtered.map(choice => ({ name: choice, value: choice })),
            );
        }

            break;
        case `third`: {
            const focusedValue = interaction.options.getFocused();
            const choices = [
                'blood',
                'frog',
                'scare'
            ];
            const filtered = choices.filter(choice => choice.toLowerCase().includes(focusedValue.toLowerCase()));;
            await interaction.respond(
                filtered.map(choice => ({ name: choice, value: choice })),
            );
        }

            break;
        case `fourth`: {
            const focusedValue = interaction.options.getFocused();
            const choices = [
                'attack',
                'baby',
                'scan'
            ];
            const filtered = choices.filter(choice => choice.toLowerCase().includes(focusedValue.toLowerCase()));;
            await interaction.respond(
                filtered.map(choice => ({ name: choice, value: choice })),
            );
        }

            break;

        default: {
            await interaction.reply({
                content: `–î–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!`,
                ephemeral: true
            })
        }
            break;
    }

}
/**
 * 
 * @param {import("discord.js").ChatInputCommandInteraction} interaction Interaction
 * @param {import("../../misc_functions/Exporter").StarpixelClient} client Client
 * 
 * Interaction main function
 */
async function execute(interaction, client) {
    try {

        const user = interaction.options.getUser(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`)
        const member = interaction.member

        switch (interaction.options.getSubcommand()) {
            case `first`: {
                const embed = new EmbedBuilder()
                    .setAuthor({
                        name: `‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Ä–æ–ª—å!`
                    })
                    .setDescription(`–í—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ä–∞–Ω–≥ \`${interaction.guild.roles.cache.get(`553593734479216661`).name}\` –∏–ª–∏ –≤—ã—à–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É!`)
                    .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                    .setColor(`DarkRed`)
                    .setTimestamp(Date.now())



                if (!member.roles.cache.has(`553593734479216661`) && !member.roles.cache.has(`553593136895623208`) && !member.roles.cache.has(`553593133884112900`) && !member.roles.cache.has(`553593136027533313`) && !member.roles.cache.has(`553593976037310489`) && !member.roles.cache.has(`780487593485008946`) && !member.roles.cache.has(`849695880688173087`) && !member.roles.cache.has(`992122876394225814`) && !member.roles.cache.has(`992123014831419472`) && !member.roles.cache.has(`992123019793276961`)) return interaction.reply({
                    embeds: [embed],
                    ephemeral: true
                })

                switch (interaction.options.getString(`–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ`)) {
                    case `blow`: {
                        if (!user) {
                            await interaction.reply({
                                content: `${member} :magic_wand:   :dash:  :cloud_tornado:`
                            })
                        } else if (user) {
                            await interaction.reply({
                                content: `${member} :magic_wand:   :dash:  :cloud_tornado: ${user}`
                            })
                        }
                    }

                        break;
                    case `cold`: {
                        if (!user) {
                            await interaction.reply({
                                content: `${member} :magic_wand:   :dash:  :cold_face:`
                            })
                        } else if (user) {
                            await interaction.reply({
                                content: `${member} :magic_wand:   :dash:  :cold_face: ${user}`
                            })
                        }
                    }

                        break;
                    case `flame`: {
                        if (!user) {
                            await interaction.reply({
                                content: `${member} :magic_wand:   :dash:  :fire:`
                            })
                        } else if (user) {
                            await interaction.reply({
                                content: `${member} :magic_wand:   :dash:  :fire: ${user}`
                            })
                        }
                    }

                        break;

                    default: {
                        await interaction.reply({
                            content: `–î–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!`,
                            ephemeral: true
                        })
                    }
                        break;
                }
            }

                break;
            case `second`: {
                const embed = new EmbedBuilder()
                    .setAuthor({
                        name: `‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Ä–æ–ª—å!`
                    })
                    .setDescription(`–í—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ä–∞–Ω–≥ \`${interaction.guild.roles.cache.get(`553593136027533313`).name}\` –∏–ª–∏ –≤—ã—à–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É!`)
                    .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                    .setColor(`DarkRed`)
                    .setTimestamp(Date.now())



                if (!member.roles.cache.has(`553593136027533313`) && !member.roles.cache.has(`553593976037310489`) && !member.roles.cache.has(`780487593485008946`) && !member.roles.cache.has(`849695880688173087`) && !member.roles.cache.has(`992122876394225814`) && !member.roles.cache.has(`992123014831419472`) && !member.roles.cache.has(`992123019793276961`)) return interaction.reply({
                    embeds: [embed],
                    ephemeral: true
                })

                switch (interaction.options.getString(`–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ`)) {
                    case `bat`: {
                        if (!user) {
                            await interaction.reply({
                                content: `:bat: ${member} –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ª–µ—Ç—É—á—É—é –º—ã—à—å –∏ –ø–æ–∫–∏–¥–∞–µ—Ç –ª—é–¥–µ–π...`
                            })
                        } else if (user) {
                            await interaction.reply({
                                content: `:bat: ${member} –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ª–µ—Ç—É—á—É—é –º—ã—à—å –∏ –ø–æ–∫–∏–¥–∞–µ—Ç ${user}...`
                            })
                        }
                    }

                        break;
                    case `curse`: {
                        if (!user) {
                            await interaction.reply({
                                content: `üà≤ –ü—Ä–æ–∫–ª—è—Ç–∏—è... –û–Ω–∏ —Ç–∞–∫ —É–∂–∞—Å–Ω—ã... –∏ –ø–æ—ç—Ç–æ–º—É ${member} –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è –ø—Ä–æ–∫–ª—è—Ç–∏–µ!`
                            })
                        } else if (user) {
                            await interaction.reply({
                                content: `üà≤ –ü—Ä–æ–∫–ª—è—Ç–∏—è... –û–Ω–∏ —Ç–∞–∫ —É–∂–∞—Å–Ω—ã... –∏ –ø–æ—ç—Ç–æ–º—É ${member} –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –Ω–∞ ${user} –ø—Ä–æ–∫–ª—è—Ç–∏–µ!`
                            })
                        }
                    }

                        break;
                    case `potion`: {
                        if (!user) {
                            await interaction.reply({
                                content: `üçæ ${member} –≤–∞—Ä–∏—Ç –≤–æ–ª—à–µ–±–Ω–æ–µ –∑–µ–ª—å–µ... –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Å–∫–æ—Ä–æ –∫—Ç–æ-—Ç–æ –±—É–¥–µ—Ç –æ—Ç—Ä–∞–≤–ª–µ–Ω....`
                            })
                        } else if (user) {
                            await interaction.reply({
                                content: `üçæ ${member} –≤–∞—Ä–∏—Ç –≤–æ–ª—à–µ–±–Ω–æ–µ –∑–µ–ª—å–µ... –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, ${user} —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ—Ç—Ä–∞–≤–ª–µ–Ω....`
                            })
                        }
                    }

                        break;

                    default: {
                        await interaction.reply({
                            content: `–î–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!`,
                            ephemeral: true
                        })
                    }
                        break;
                }
            }

                break;
            case `third`: {
                const embed = new EmbedBuilder()
                    .setAuthor({
                        name: `‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Ä–æ–ª—å!`
                    })
                    .setDescription(`–í—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ä–∞–Ω–≥ \`${interaction.guild.roles.cache.get(`780487593485008946`).name}\` –∏–ª–∏ –≤—ã—à–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É!`)
                    .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                    .setColor(`DarkRed`)
                    .setTimestamp(Date.now())



                if (!member.roles.cache.has(`780487593485008946`) && !member.roles.cache.has(`849695880688173087`) && !member.roles.cache.has(`992122876394225814`) && !member.roles.cache.has(`992123014831419472`) && !member.roles.cache.has(`992123019793276961`)) return interaction.reply({
                    embeds: [embed],
                    ephemeral: true
                })

                switch (interaction.options.getString(`–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ`)) {
                    case `blood`: {
                        if (!user) {
                            await interaction.reply({
                                content: `ü©∏ ${member} –≤—ã—Å–∞—Å—ã–≤–∞–µ—Ç –∏–∑ –≤–æ–∑–¥—É—Ö–∞ –≤—Å—é –∫—Ä–æ–≤—å! –°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∂—É—Ç–∫–æ..`
                            })
                        } else if (user) {
                            await interaction.reply({
                                content: `ü©∏ ${member} –≤—ã—Å–∞—Å—ã–≤–∞–µ—Ç –∏–∑ ${user} –≤—Å—é –∫—Ä–æ–≤—å! –°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∂—É—Ç–∫–æ..`
                            })
                        }
                    }

                        break;
                    case `frog`: {
                        if (!user) {
                            await interaction.reply({
                                content: `:frog: ${member} –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ª—è–≥—É—à–∫—É... –ö–∞–∫–∞—è –∂–∞–ª–æ—Å—Ç—å!`
                            })
                        } else if (user) {
                            await interaction.reply({
                                content: `:frog: ${member} –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç ${user} –≤ –ª—è–≥—É—à–∫—É... –ö–∞–∫–∞—è –∂–∞–ª–æ—Å—Ç—å!`
                            })
                        }
                    }

                        break;
                    case `scare`: {
                        if (!user) {
                            await interaction.reply({
                                content: `üëª –ü–µ—Ä–µ–¥ –∫–æ—à–∫–æ–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–µ–º–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥—Ä–æ–∑–∞... –í–Ω–µ–∑–∞–ø–Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è ${member} –∏ –ø—É–≥–∞–µ—Ç –∫–æ—à–µ—á–∫—É.`
                            })
                        } else if (user) {
                            await interaction.reply({
                                content: `üëª –ü–µ—Ä–µ–¥ ${user} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–µ–º–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥—Ä–æ–∑–∞... –í–Ω–µ–∑–∞–ø–Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è ${member} –∏ –ø—É–≥–∞–µ—Ç ${user}.`
                            })
                        }
                    }

                        break;

                    default: {
                        await interaction.reply({
                            content: `–î–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!`,
                            ephemeral: true
                        })
                    }
                        break;
                }
            }

                break;
            case `fourth`: {
                const embed = new EmbedBuilder()
                    .setAuthor({
                        name: `‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Ä–æ–ª—å!`
                    })
                    .setDescription(`–í—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ä–∞–Ω–≥ \`${interaction.guild.roles.cache.get(`930520087797051452`).name}\` –∏–ª–∏ –≤—ã—à–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É!`)
                    .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                    .setColor(`DarkRed`)
                    .setTimestamp(Date.now())



                if (!member.roles.cache.has(`930520087797051452`)) return interaction.reply({
                    embeds: [embed],
                    ephemeral: true
                })

                switch (interaction.options.getString(`–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ`)) {
                    case `attack`: {
                        if (!user) {
                            await interaction.reply({
                                content: `‚óæ

${member} –∞—Ç–∞–∫—É–µ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è.
:left_facing_fist::robot::right_facing_fist:

‚óæ`
                            })
                        } else if (user) {
                            await interaction.reply({
                                content: `‚óæ

${member} –∞—Ç–∞–∫—É–µ—Ç ${user}.
:left_facing_fist::robot::right_facing_fist:

‚óæ`
                            })
                        }
                    }

                        break;
                    case `baby`: {
                        const choose = [`—Ü–µ–ª—É–µ—Ç`, `—É–∫—É—Ç—ã–≤–∞–µ—Ç`, `–æ–±–Ω–∏–º–∞–µ—Ç`, `—Å–º–æ—Ç—Ä–∏—Ç –Ω–∞`]
                        let random = choose[Math.floor(Math.random() * choose.length)]
                        if (!user) {
                            await interaction.reply({
                                content: `‚óæ

${member} ${random} —Å–∞–º–æ–≥–æ —Å–µ–±—è.
:robot:  :heart: 

‚óæ`
                            })
                        } else if (user) {
                            await interaction.reply({
                                content: `‚óæ

${member} ${random} ${user}.
:robot:  :heart: 

‚óæ`
                            })
                        }
                    }

                        break;
                    case `scan`: {
                        const choose = [`–ø–æ–∫—É—à–∞—Ç—å`, `—É—á–∏—Ç—å—Å—è`, `–Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ –∑–≤—ë–∑–¥–∞–º–∏`, `–ø–æ—Å–ø–∞—Ç—å`, `–ø–æ–∏–≥—Ä–∞—Ç—å`, `—Å–≤–æ—é –≥–∏–ª—å–¥–∏—é`, `—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–∏–ª—å–¥–∏–∏`, `–Ω—è–Ω—é`, `—Å–µ–±—è`]
                        let random = choose[Math.floor(Math.random() * choose.length)]
                        if (!user) {
                            await interaction.reply({
                                content: `‚óæ

${member} —Å–∫–∞–Ω–∏—Ä—É–µ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è.
:robot: –û–Ω –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —ç—Ç–æ—Ç –æ–Ω –ª—é–±–∏—Ç ${random}.

‚óæ`
                            })
                        } else if (user) {
                            await interaction.reply({
                                content: `‚óæ

${member} —Å–∫–∞–Ω–∏—Ä—É–µ—Ç ${user}.
:robot: –û–Ω –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –ª—é–±–∏—Ç ${random}.

‚óæ`
                            })
                        }
                    }

                        break;

                    default: {
                        await interaction.reply({
                            content: `–î–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!`,
                            ephemeral: true
                        })
                    }
                        break;
                }
            }

                break;

            default: {
                await interaction.reply({
                    content: `–î–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!`,
                    ephemeral: true
                })
            }
                break;
        }
    } catch (e) {
        const admin = await client.users.fetch(`491343958660874242`)
        console.log(e)
        let options = interaction?.options.data.map(a => {
            return `{
"status": true,
"name": "${a.name}",
"type": ${a.type},
"autocomplete": ${a?.autocomplete ? true : false},
"value": "${a?.value ? a.value : "No value"}",
"user": "${a?.user?.id ? a.user.id : "No User"}",
"channel": "${a?.channel?.id ? a.channel.id : "No Channel"}",
"role": "${a?.role?.id ? a.role.id : "No Role"}",
"attachment": "${a?.attachment?.url ? a.attachment.url : "No Attachment"}"
}`
        })
        await admin.send(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`)
        await admin.send(`=> ${e}.
**–ö–æ–º–∞–Ω–¥–∞**: \`${interaction.commandName}\`
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: ${interaction.member}
**–ö–∞–Ω–∞–ª**: ${interaction.channel}
**–û–ø—Ü–∏–∏**: \`\`\`json
${interaction.options.data.length <= 0 ? `{"status": false}` : options.join(`,\n`)}
\`\`\``)
        await admin.send(`‚óæ`)
    }


}
module.exports = {
    category: `mag`,
    plugin: {
        id: "misc",
        name: "–†–∞–∑–Ω–æ–µ"
    },
    data: new SlashCommandBuilder()
        .setName(`magic`)
        .setDescription(`–ú–∞–≥–∏—è –≥–∏–ª—å–¥–∏–∏`)
        .setDMPermission(false)
        .addSubcommand(subcommand => subcommand
            .setName(`first`)
            .setDescription(`–ú–∞–≥–∏—è –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è`)
            .addStringOption(option => option
                .setName(`–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ`)
                .setDescription(`–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è –º–∞–≥–∞ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è`)
                .setAutocomplete(true)
                .setRequired(true)
            )
            .addUserOption(option => option
                .setName(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`)
                .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ`)
                .setRequired(false)
            )
        )
        .addSubcommand(subcommand => subcommand
            .setName(`second`)
            .setDescription(`–ú–∞–≥–∏—è –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è`)
            .addStringOption(option => option
                .setName(`–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ`)
                .setDescription(`–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è –º–∞–≥–∞ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è`)
                .setAutocomplete(true)
                .setRequired(true)
            )
            .addUserOption(option => option
                .setName(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`)
                .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ`)
                .setRequired(false)
            )
        )
        .addSubcommand(subcommand => subcommand
            .setName(`third`)
            .setDescription(`–ú–∞–≥–∏—è —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è`)
            .addStringOption(option => option
                .setName(`–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ`)
                .setDescription(`–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è –º–∞–≥–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è`)
                .setAutocomplete(true)
                .setRequired(true)
            )
            .addUserOption(option => option
                .setName(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`)
                .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ`)
                .setRequired(false)
            )
        )
        .addSubcommand(subcommand => subcommand
            .setName(`fourth`)
            .setDescription(`–ú–∞–≥–∏—è —á–µ—Ç–≤—ë—Ä—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è`)
            .addStringOption(option => option
                .setName(`–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ`)
                .setDescription(`–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è –º–∞–≥–∞ —á–µ—Ç–≤—ë—Ä—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è`)
                .setAutocomplete(true)
                .setRequired(true)
            )
            .addUserOption(option => option
                .setName(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`)
                .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ`)
                .setRequired(false)
            )
        ),
    autoComplete,
    execute
};