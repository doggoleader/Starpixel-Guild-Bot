const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, GuildMember, ButtonBuilder, ButtonStyle, UserSelectMenuBuilder } = require('discord.js');
const { joinVoiceChannel } = require('@discordjs/voice');

const fetch = require(`node-fetch`);
const api = process.env.hypixel_apikey;
const { User } = require(`../../schemas/userdata`)
const { Guild } = require(`../../schemas/guilddata`)
const chalk = require(`chalk`);

/**
 * 
 * @param {import("discord.js").ChatInputCommandInteraction} interaction Interaction
 * @param {import("../../misc_functions/Exporter").StarpixelClient} client Client
 * 
 * Interaction main function
 */
async function execute(interaction, client) {
    try {
        let settings = {
            magicID: null,
            memberFrom: interaction.member,
            memberTo: null
        }
        await interaction.deferReply({ ephemeral: true, fetchReply: true })
        const userData = await User.findOne({ userid: interaction.user.id })
        if (userData.rank_number < 1) return interaction.editReply({
            content: `–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å **–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –≥–∏–ª—å–¥–∏–∏** –∏–ª–∏ –≤—ã—à–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞–≥–∏–∏ –≥–∏–ª—å–¥–∏–∏!`
        })
        let options = []
        if (userData.rank_number >= 1) {
            options.push(
                {
                    label: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –≤–µ—Ç—Ä–∞`,
                    value: `blow`,
                    emoji: `üå¨Ô∏è`,
                    description: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –º–∞–≥–∞ —É—Ä–æ–≤–Ω—è I`
                },
                {
                    label: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ —Ö–æ–ª–æ–¥–∞`,
                    value: `cold`,
                    emoji: `ü•∂`,
                    description: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –º–∞–≥–∞ —É—Ä–æ–≤–Ω—è I`
                },
                {
                    label: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –æ–≥–Ω—è`,
                    value: `flame`,
                    emoji: `üî•`,
                    description: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –º–∞–≥–∞ —É—Ä–æ–≤–Ω—è I`
                }
            )
        }
        if (userData.rank_number >= 4) {
            options.push(
                {
                    label: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –ª–µ—Ç—É—á–µ–π –º—ã—à–∏`,
                    value: `bat`,
                    emoji: `ü¶á`,
                    description: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –º–∞–≥–∞ —É—Ä–æ–≤–Ω—è II`
                },
                {
                    label: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ–∫–ª—è—Ç–∏—è`,
                    value: `curse`,
                    emoji: `üàπ`,
                    description: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –º–∞–≥–∞ —É—Ä–æ–≤–Ω—è II`
                },
                {
                    label: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è –≥–æ—Ç–æ–≤–∫–∏ –∑–µ–ª–∏–π`,
                    value: `potion`,
                    emoji: `üç∂`,
                    description: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –º–∞–≥–∞ —É—Ä–æ–≤–Ω—è II`
                }
            )
        }
        if (userData.rank_number >= 6) {
            options.push(
                {
                    label: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –≤–∞–º–ø–∏—Ä–∞`,
                    value: `blood`,
                    emoji: `ü©∏`,
                    description: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –º–∞–≥–∞ —É—Ä–æ–≤–Ω—è III`
                },
                {
                    label: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –≤ –ª—è–≥—É—à–∫—É`,
                    value: `frog`,
                    emoji: `üê∏`,
                    description: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –º–∞–≥–∞ —É—Ä–æ–≤–Ω—è III`
                },
                {
                    label: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –∏—Å–ø—É–≥–∞`,
                    value: `scare`,
                    emoji: `üòà`,
                    description: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –º–∞–≥–∞ —É—Ä–æ–≤–Ω—è III`
                }
            )
        }
        if (userData.rank_number >= 8) {
            options.push(
                {
                    label: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –∞—Ç–∞–∫–∏`,
                    value: `attack`,
                    emoji: `üí™`,
                    description: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –º–∞–≥–∞ —É—Ä–æ–≤–Ω—è IV`
                },
                {
                    label: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ —É—Ö–∞–∂–∏–≤–∞–Ω–∏—è`,
                    value: `baby`,
                    emoji: `‚ù§`,
                    description: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –º–∞–≥–∞ —É—Ä–æ–≤–Ω—è IV`
                },
                {
                    label: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è`,
                    value: `scan`,
                    emoji: `üõ°`,
                    description: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –º–∞–≥–∞ —É—Ä–æ–≤–Ω—è IV`
                }
            )
        }

        const menu = new ActionRowBuilder()
            .addComponents(
                new StringSelectMenuBuilder()
                    .setCustomId(`magic_menu`)
                    .setDisabled(options.length <= 0)
                    .setOptions(options.length > 0 ? options : {
                        label: `–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –º–∞–≥–∏–∏`,
                        value: 'no_magic'
                    })
            )

        const embed = new EmbedBuilder()
            .setColor(Number(client.information.bot_color))
            .setDescription(`–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –∏–∑ –ø–µ—Ä–µ—á–Ω—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö!
- –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è –º–∞–≥–∞ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–Ω—ã —Å–æ **–°–ü–ï–¶–ò–ê–õ–ò–°–¢–ê –ì–ò–õ–¨–î–ò–ò**
- –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è –º–∞–≥–∞ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–Ω—ã —Å **–ß–ï–ú–ü–ò–û–ù–ê –ì–ò–õ–¨–î–ò–ò**
- –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è –º–∞–≥–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–Ω—ã —Å **–õ–ï–ì–ï–ù–î–´ –ì–ò–õ–¨–î–ò–ò**
- –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è –º–∞–≥–∞ —á–µ—Ç–≤—ë—Ä—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–Ω—ã —Å **–õ–û–†–î–ê –ì–ò–õ–¨–î–ò–ò**`)

        const msg = await interaction.editReply({
            embeds: [embed],
            components: [menu]
        })
        const collector = await msg.createMessageComponentCollector();
        collector.on('collect', async (i) => {
            if (i.customId == `magic_menu`) {
                await i.deferUpdate()
                settings.magicID = i.values[0];

                const userMenu = new ActionRowBuilder()
                    .addComponents(
                        new UserSelectMenuBuilder()
                            .setCustomId(`magic_usermenu`)
                            .setPlaceholder(`–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞`)
                    )

                const buttons = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`magic_back`)
                            .setLabel(`–ù–∞–∑–∞–¥`)
                            .setEmoji(`‚¨Ö`)
                            .setStyle(ButtonStyle.Danger)
                    )
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`magic_nouser`)
                            .setEmoji(`‚ùå`)
                            .setLabel(`–ë–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`)
                            .setStyle(ButtonStyle.Secondary)
                    )

                const embed2 = new EmbedBuilder()
                    .setColor(Number(client.information.bot_color))
                    .setDescription(`–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å–≤–æ–µ–π –º–∞–≥–∏–µ–π –≤ –≥–ª–∞–≤–Ω–æ–º —á–∞—Ç–µ!
–í—ã–±–∏—Ä–∞—è "–ë–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", –≤—ã –¥–µ–π—Å—Ç–≤—É–µ—Ç–µ –º–∞–≥–∏–µ–π –Ω–∞ –≤–µ—Å—å —á–∞—Ç.

–ù–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ!`)

                await interaction.editReply({
                    embeds: [embed2],
                    components: [userMenu, buttons]
                })
            } else if (i.customId == `magic_usermenu`) {

                const memberTo = i.members.first();
                settings.memberTo = memberTo;

                const msg = getMessage(settings.magicID, settings.memberFrom, settings.memberTo);

                await i.reply({
                    content: `${msg}`
                })
            } else if (i.customId == `magic_back`) {
                await i.deferUpdate();
                settings.magicID = null;
                settings.memberTo = null;

                await interaction.editReply({
                    embeds: [embed],
                    components: [menu]
                })
            } else if (i.customId == `magic_nouser`) {
                settings.memberTo = null;

                const msg = getMessage(settings.magicID, settings.memberFrom, settings.memberTo);

                await i.reply({
                    content: `${msg}`
                })
            }
        })
    } catch (e) {
        const admin = await client.users.fetch(`491343958660874242`)
        console.log(e)
        await admin.send({
            content: `-> \`\`\`${e.stack}\`\`\``
        }).catch()
    }


}
module.exports = {
    category: `mag`,
    plugin: {
        id: "misc",
        name: "–†–∞–∑–Ω–æ–µ"
    },
    data: new SlashCommandBuilder()
        .setName(`magic`)
        .setDescription(`–ú–∞–≥–∏—è –≥–∏–ª—å–¥–∏–∏`)
        .setDMPermission(false),
    execute
};


/**
 * 
 * @param {String} id ID of available magic
 * @param {GuildMember} memberFrom Command Executor
 * @param {GuildMember=} memberTo Member of the Guild
 * @returns {String} The message of the used magic
 */
function getMessage(id, memberFrom, memberTo) {
    const strings = {
        "blow": `${memberFrom} :magic_wand:   :dash:  :cloud_tornado: ${memberTo ? memberTo : ""}`,
        "cold": `${memberFrom} :magic_wand:   :dash:  :cold_face: ${memberTo ? memberTo : ""}`,
        "flame": `${memberFrom} :magic_wand:   :dash:  :fire: ${memberTo ? memberTo : ""}`,
        "bat": `:bat: ${memberFrom} –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ª–µ—Ç—É—á—É—é –º—ã—à—å –∏ –ø–æ–∫–∏–¥–∞–µ—Ç ${memberTo ? memberTo : "–ª—é–¥–µ–π"}...`,
        "curse": `üà≤ –ü—Ä–æ–∫–ª—è—Ç–∏—è... –û–Ω–∏ —Ç–∞–∫ —É–∂–∞—Å–Ω—ã... –∏ –ø–æ—ç—Ç–æ–º—É ${memberFrom} –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –Ω–∞ ${memberTo ? memberTo : "—Å–∞–º–æ–≥–æ —Å–µ–±—è"} –ø—Ä–æ–∫–ª—è—Ç–∏–µ!`,
        "potion": `üçæ ${memberFrom} –≤–∞—Ä–∏—Ç –≤–æ–ª—à–µ–±–Ω–æ–µ –∑–µ–ª—å–µ... –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, ${memberTo ? memberTo : "–∫—Ç–æ-—Ç–æ"} —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ—Ç—Ä–∞–≤–ª–µ–Ω....`,
        "blood": `ü©∏ ${memberFrom} –≤—ã—Å–∞—Å—ã–≤–∞–µ—Ç –∏–∑ ${memberTo ? memberTo : "–≤–æ–∑–¥—É—Ö–∞"} –≤—Å—é –∫—Ä–æ–≤—å! –°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∂—É—Ç–∫–æ..`,
        "frog": `:frog: ${memberFrom} –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç${memberTo ? ` <@` + memberTo.id + `>` : "—Å—è"} –≤ –ª—è–≥—É—à–∫—É... –ö–∞–∫–∞—è –∂–∞–ª–æ—Å—Ç—å!`,
        "scare": `üëª –ü–µ—Ä–µ–¥ ${memberTo ? memberTo : "–∫–æ—à–∫–æ–π"} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–µ–º–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥—Ä–æ–∑–∞... –í–Ω–µ–∑–∞–ø–Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è ${memberFrom} –∏ –ø—É–≥–∞–µ—Ç ${memberTo ? memberTo : "–∫–æ—à–∫—É"}.`,
        "attack": `‚óæ

${memberFrom} –∞—Ç–∞–∫—É–µ—Ç ${memberTo ? memberTo : "—Å–∞–º–æ–≥–æ —Å–µ–±—è"}.
:left_facing_fist::robot::right_facing_fist:

‚óæ`,
        "baby": `‚óæ

${memberFrom} %%word%% ${memberTo ? memberTo : "—Å–∞–º–æ–≥–æ —Å–µ–±—è"}.
:robot:  :heart: 

‚óæ`,
        "scan": `‚óæ

${memberFrom} —Å–∫–∞–Ω–∏—Ä—É–µ—Ç ${memberTo ? memberTo : "—Å–∞–º–æ–≥–æ —Å–µ–±—è"}.
:robot: –û–Ω –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –ª—é–±–∏—Ç %%word%%.

‚óæ`
    }

    let finalWord = strings[id]
    if (id == 'baby') {
        let choose = [`—Ü–µ–ª—É–µ—Ç`, `—É–∫—É—Ç—ã–≤–∞–µ—Ç`, `–æ–±–Ω–∏–º–∞–µ—Ç`, `—Å–º–æ—Ç—Ä–∏—Ç –Ω–∞`]
        let item = choose[Math.floor(Math.random() * choose.length)]
        finalWord = finalWord.replace(`%%word%%`, item)
    } else if (id == 'scan') {
        const choose = [`–ø–æ–∫—É—à–∞—Ç—å`, `—É—á–∏—Ç—å—Å—è`, `–Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ –∑–≤—ë–∑–¥–∞–º–∏`, `–ø–æ—Å–ø–∞—Ç—å`, `–ø–æ–∏–≥—Ä–∞—Ç—å`, `—Å–≤–æ—é –≥–∏–ª—å–¥–∏—é`, `—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–∏–ª—å–¥–∏–∏`, `–Ω—è–Ω—é`, `—Å–µ–±—è`]
        let item = choose[Math.floor(Math.random() * choose.length)]
        finalWord = finalWord.replace(`%%word%%`, item)
    }
    return finalWord;
}