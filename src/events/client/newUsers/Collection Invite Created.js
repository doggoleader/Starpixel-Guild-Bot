const { User } = require(`../../../schemas/userdata`)
const { Guild } = require(`../../../schemas/guilddata`)
const { ChannelType, ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder } = require(`discord.js`)
const chalk = require(`chalk`);
const prettyMilliseconds = require(`pretty-ms`)
const { checkPlugin } = require("../../../functions");
let plugin = {
    id: "new_users",
    name: "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
}
async function execute(invite, client) {
    if (!await checkPlugin(invite.guild.id, plugin.id)) return
    const { invites } = client
    await invites.get(invite.guild.id).set(invite.code, invite.uses);
    await askForBypass(invite, client)
}

module.exports = {
    name: 'inviteCreate',
    plugin: plugin,
    execute
}


async function askForBypass(invite, client) {
    const guildData = await Guild.findOne({ id: invite.guild.id });
    const member = await invite.guild.members.fetch(invite.inviter.id)
    const buttons = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('no_bypass')
                .setLabel(`–ù–µ—Ç`)
                .setEmoji(`üö´`)
                .setStyle(ButtonStyle.Danger)
        )
        .addComponents(
            new ButtonBuilder()
                .setCustomId('yes_bypass')
                .setLabel(`–î–∞`)
                .setEmoji(`‚úÖ`)
                .setStyle(ButtonStyle.Success)
        )
    const buttonsEdited = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('no_bypass')
                .setLabel(`–ù–µ—Ç`)
                .setEmoji(`‚ùå`)
                .setStyle(ButtonStyle.Danger)
                .setDisabled(true)
        )
        .addComponents(
            new ButtonBuilder()
                .setCustomId('yes_bypass')
                .setLabel(`–î–∞`)
                .setEmoji(`‚úÖ`)
                .setStyle(ButtonStyle.Success)
                .setDisabled(true)
        )
    const embed = new EmbedBuilder()
        .setColor(Number(client.information.bot_color))
        .setDescription(`## –°–¥–µ–ª–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ª–∏—Ü–µ–Ω–∑–∏–∏?
–í—ã–±–∏—Ä–∞—è "–î–∞", —Å–æ–∑–¥–∞–Ω–Ω–∞—è –≤–∞–º–∏ —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
- –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ä–∞–≤–µ–Ω —Å—Ä–æ–∫—É –¥–µ–π—Å—Ç–≤–∏—è —Å –º–æ–º–µ–Ω—Ç–∞ –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Å—Ç–∞–Ω–µ—Ç —Ä–∞–≤–Ω—ã–º 1, —Ç.–µ. —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ

–ü—Ä–æ—á–∏–µ —É—Å–ª–æ–≤–∏—è:
- –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ª—é–±–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä Discord –ø—Ä–∏ –ø–æ–º–æ—â–∏ –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
- –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é Minecraft
- –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –±–µ–∑ –ª–∏—Ü–µ–Ω–∑–∏–∏ Minecraft, –≤–∞–º –ø—Ä–∏–¥—ë—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫
- –ü–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ –æ–Ω–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞

**–í—ã —Å–æ–≤–µ—Ä—à–∞–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:** ${invite.url}`)
    switch (guildData.global_settings.no_license_applications) {
        case `enabled_members`: {
            if (member.roles.cache.has("504887113649750016")) {
                await member.send({
                    embeds: [embed],
                    components: [buttons]
                }).catch().then(async msg => {
                    const collector = await msg.createMessageComponentCollector()

                    collector.on('collect', async i => {
                        if (i.customId == `yes_bypass`) {
                            guildData.invites.bypass_invite_codes.push(invite.code)
                            guildData.save()
                            await i.reply({
                                content: `–°—Å—ã–ª–∫–∞ ${invite.url} —Å—Ç–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ª–∏—Ü–µ–Ω–∑–∏–∏!`
                            })
                            await msg.edit({
                                components: [buttonsEdited]
                            })
                        } else if (i.customId == 'no_bypass') {
                            await i.reply({
                                content: `–°—Å—ã–ª–∫–∞ ${invite.url} —Å—Ç–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ª–∏—Ü–µ–Ω–∑–∏–∏!`
                            })
                            await msg.edit({
                                components: [buttonsEdited]
                            })
                        }
                        await collector.stop();
                    })
                })
            }
        }
            break;
        case `enabled_staff`: {
            if (member.roles.cache.has("563793535250464809")) {
                await member.send({
                    embeds: [embed],
                    components: [buttons]
                }).catch().then(async msg => {
                    const collector = await msg.createMessageComponentCollector()

                    collector.on('collect', async i => {
                        if (i.customId == `yes_bypass`) {
                            guildData.invites.bypass_invite_codes.push(invite.code)
                            guildData.save()
                            await i.reply({
                                content: `–°—Å—ã–ª–∫–∞ ${invite.url} —Å—Ç–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ª–∏—Ü–µ–Ω–∑–∏–∏!`
                            })
                            await msg.edit({
                                components: [buttonsEdited]
                            })
                        } else if (i.customId == 'no_bypass') {
                            await i.reply({
                                content: `–°—Å—ã–ª–∫–∞ ${invite.url} —Å—Ç–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ª–∏—Ü–µ–Ω–∑–∏–∏!`
                            })
                            await msg.edit({
                                components: [buttonsEdited]
                            })
                        }
                        await collector.stop();
                    })
                })
            }
        }
            break;
        default:
            break;
    }
}