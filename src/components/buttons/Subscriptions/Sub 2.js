const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { joinVoiceChannel } = require('@discordjs/voice');
const { execute } = require('../../../events/client/start_bot/ready');
const fetch = require(`node-fetch`);
const api = process.env.hypixel_apikey;
const { User } = require(`../../../schemas/userdata`)
const { Guild } = require(`../../../schemas/guilddata`)
const chalk = require(`chalk`);
const prettyMilliseconds = require(`pretty-ms`); //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï
const ch_list = require(`../../../discord structure/channels.json`)
const linksInfo = require(`../../../discord structure/links.json`)

module.exports = {
    plugin: {
        id: "items",
        name: "–ü—Ä–µ–¥–º–µ—Ç—ã"
    },
    data: {
        name: `sub_second`
    },

    async execute(interaction, client) {
        try {
            const { user, member, guild, channel } = interaction
            const userData = await User.findOne({ userid: user.id })
            const embed = new EmbedBuilder()
                .setAuthor({
                    name: `‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Ä–æ–ª—å!`
                })
                .setDescription(`–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ —Ä–æ–ª—å \`${interaction.guild.roles.cache.get(`1007290181847613530`).name}\`!`)
                .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                .setColor(`DarkRed`)
                .setTimestamp(Date.now())
            if (!member.roles.cache.has(`1007290181847613530`)) return interaction.reply({
                embeds: [embed],
                ephemeral: true
            })

            const cd = new EmbedBuilder()
                .setColor(Number(linksInfo.bot_color))
                .setAuthor({
                    name: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É`
                })
                .setDescription(`–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ ${prettyMilliseconds(userData.cooldowns.sub_2 - Date.now(), { verbose: true, secondsDecimalDigits: 0 })}!`)
                .setTimestamp(Date.now())
                .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)

            if (userData.cooldowns.sub_2 > Date.now()) return interaction.reply({
                embeds: [cd],
                ephemeral: true
            });

            await interaction.deferUpdate()
            const loot = [
                {
                    group: 1,
                    name: `–ú–∞–ª–µ–Ω—å–∫—É—é –∫–æ—Ä–æ–±–∫—É`,
                    roleID: `510932601721192458`,
                    chance: 35,
                    "rarity": "Uncommon",
                    "type": "Box",
                },
                {
                    group: 1,
                    name: `–ú–µ—à–æ—á–µ–∫`,
                    roleID: `819930814388240385`,
                    chance: 40,
                    "rarity": "Common",
                    "type": "Box",
                },
                {
                    group: 1,
                    name: `–ë–æ–ª—å—à—É—é –∫–æ—Ä–æ–±–∫—É`,
                    roleID: `521248091853291540`,
                    chance: 25,
                    "rarity": "Rare",
                    "type": "Box",
                },
                {
                    group: 1,
                    name: `–û–≥—Ä–æ–º–Ω—É—é –∫–æ—Ä–æ–±–∫—É`,
                    roleID: `992820494900412456`,
                    chance: 10,
                    "rarity": "Epic",
                    "type": "Box",
                },
                {
                    group: 1,
                    name: `–ö–æ—Ä–æ–ª–µ–≤—Å–∫—É—é –∫–æ—Ä–æ–±–∫—É`,
                    roleID: `584673040470769667`,
                    chance: 7,
                    "rarity": "Epic",
                    "type": "Box",
                }
            ]
            let chances = []
            let sum_loot = 0;
            for (let i_loot = 0; i_loot < loot.length; i_loot++) {
                if (loot[i_loot].rarity == "Common") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.common
                    chances.push(loot[i_loot].chance * userData.box_chances.common)
                } else if (loot[i_loot].rarity == "Uncommon") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.uncommon
                    chances.push(loot[i_loot].chance * userData.box_chances.uncommon)
                } else if (loot[i_loot].rarity == "Rare") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.rare
                    chances.push(loot[i_loot].chance * userData.box_chances.rare)
                } else if (loot[i_loot].rarity == "Epic") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.epic
                    chances.push(loot[i_loot].chance * userData.box_chances.epic)
                } else if (loot[i_loot].rarity == "Legendary") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.legendary
                    chances.push(loot[i_loot].chance * userData.box_chances.legendary)
                } else if (loot[i_loot].rarity == "Mythical") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.mythical
                    chances.push(loot[i_loot].chance * userData.box_chances.mythical)
                } else if (loot[i_loot].rarity == "RNG") {
                    sum_loot += loot[i_loot].chance * userData.box_chances.RNG
                    chances.push(loot[i_loot].chance * userData.box_chances.RNG)
                } else {
                    sum_loot += loot[i_loot].chance * 1
                    chances.push(loot[i_loot].chance * 1)
                    console.log(`–ü—Ä–µ–¥–º–µ—Ç ${loot[i_loot].loot_name} –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏!`)
                }
            }
            let r_loot = Math.floor(Math.random() * sum_loot);
            let i_loot = 0;
            for (let s = chances[0]; s <= r_loot; s += chances[i_loot]) {
                i_loot++;
            }
            let allChances = 0;
            for (let loo of loot) {
                allChances += loo.chance
            }
            let finalChance1 = ((loot[i_loot].chance / allChances) * 100).toFixed(1)
            const msg = await interaction.guild.channels.cache.get(ch_list.box).send({
                content: `‚óæ
${user} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–æ—Ä–æ–±–∫—É –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ II —É—Ä–æ–≤–Ω—è...
|‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî~€û~‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî|
\`${loot[i_loot].name}.\` (–®–∞–Ω—Å: \`${finalChance1}%\`)
–û—Ç–∫—Ä–æ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã.
|‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî~€û~‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî|
‚óæ`
            })
            if (loot[i_loot].group == 1) {
                if (!member.roles.cache.has(loot[i_loot].roleID)) {
                    member.roles.add(loot[i_loot].roleID)
                    await msg.react(`‚úÖ`)
                } else {
                    if (userData.stacked_items.length < userData.upgrades.inventory_size) {
                        await userData.stacked_items.push(loot[i_loot].roleID)
                        await msg.react("‚úÖ")
                    } else {
                        await interaction.guild.channels.cache.get(ch_list.box).send({
                            content: `–ú—ã –Ω–µ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω. –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª <#1141026403765211136>!`
                        })
                        await msg.react("üö´")
                    }
                }
            }



            userData.cooldowns.sub_2 = Date.now() + (1000 * 60 * 60 * 24 * 7)
            userData.save()



        } catch (e) {
            const admin = await client.users.fetch(`491343958660874242`)
            console.log(e)
            let options = interaction?.options.data.map(a => {
                return `{
"status": true,
"name": "${a.name}",
"type": ${a.type},
"autocomplete": ${a?.autocomplete ? true : false},
"value": "${a?.value ? a.value : "No value"}",
"user": "${a?.user?.id ? a.user.id : "No User"}",
"channel": "${a?.channel?.id ? a.channel.id : "No Channel"}",
"role": "${a?.role?.id ? a.role.id : "No Role"}",
"attachment": "${a?.attachment?.url ? a.attachment.url : "No Attachment"}"
}`
            })
            await admin.send(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`)
            await admin.send(`=> ${e}.
**–ö–æ–º–∞–Ω–¥–∞**: \`${interaction.commandName}\`
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: ${interaction.member}
**–ö–∞–Ω–∞–ª**: ${interaction.channel}
**–û–ø—Ü–∏–∏**: \`\`\`json
${interaction.options.data.length <= 0 ? `{"status": false}` : options.join(`,\n`)}
\`\`\``)
            await admin.send(`‚óæ`)
        }


    }
};