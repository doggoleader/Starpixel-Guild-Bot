const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ComponentType, ButtonStyle } = require('discord.js');
const fetch = require(`node-fetch`)
const { joinVoiceChannel } = require('@discordjs/voice');

const wait = require(`node:timers/promises`).setTimeout
const api = process.env.hypixel_apikey;
const { Temp } = require(`../../../schemas/temp_items`);
const { User } = require(`../../../schemas/userdata`)
const { Guild } = require(`../../../schemas/guilddata`)
const chalk = require(`chalk`);
const prettyMilliseconds = require(`pretty-ms`); //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï
const ch_list = require(`../../../discord structure/channels.json`)
const { isOneEmoji } = require(`is-emojis`)
/**
 * 
 * @param {import("discord.js").ButtonInteraction} interaction Interaction
 * @param {import("../../../misc_functions/Exporter").StarpixelClient} client Client
 * 
 * Interaction main function
 */
async function execute(interaction, client) {
    try {
        const { guild, member, user } = interaction
        const guildData = await Guild.findOne({ id: guild.id })
        const userData = await User.findOne({ userid: user.id })
        role = `780487592859795456`
        const no_role = new EmbedBuilder()
            .setAuthor({
                name: `‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Ä–æ–ª—å!`
            })
            .setDescription(`–í—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ä–æ–ª—å \`${interaction.guild.roles.cache.get(role).name}\`, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É!`)
            .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
            .setColor(`DarkRed`)
            .setTimestamp(Date.now())

        if (!member.roles.cache.has(role)) return interaction.reply({
            embeds: [no_role],
            ephemeral: true
        })

        const cd = new EmbedBuilder()
            .setColor(Number(client.information.bot_color))
            .setAuthor({
                name: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É`
            })
            .setDescription(`–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ ${prettyMilliseconds(userData.cooldowns.neptune - Date.now(), { verbose: true, secondsDecimalDigits: 0 })}!`)

        if (userData.cooldowns.neptune > Date.now()) return interaction.reply({
            embeds: [cd],
            ephemeral: true
        })

        const ramkas = [
            {
                name: `–†–ê–ú–ö–ê –î–õ–Ø –ù–ò–ö–ê ‚ù¶`,
                r1: `‚ù¶`,
                r2: `‚ù¶`
            },
            {
                name: `–†–ê–ú–ö–ê –î–õ–Ø –ù–ò–ö–ê ‡Æê`,
                r1: `‡Æê`,
                r2: `‡Æê`
            },
            {
                name: `–†–ê–ú–ö–ê –î–õ–Ø –ù–ò–ö–ê ‚ùÄ`,
                r1: `‚ùÄ`,
                r2: `‚ùÄ`
            },
            {
                name: `–†–ê–ú–ö–ê –î–õ–Ø –ù–ò–ö–ê ‚ùâ`,
                r1: `‚ùâ`,
                r2: `‚ùâ`
            },
            {
                name: `–†–ê–ú–ö–ê –î–õ–Ø –ù–ò–ö–ê ‚úæ`,
                r1: `‚úæ`,
                r2: `‚úæ`
            },
            {
                name: `–†–ê–ú–ö–ê –î–õ–Ø –ù–ò–ö–ê ‚óâ`,
                r1: `‚óâ`,
                r2: `‚óâ`
            },
            {
                name: `–†–ê–ú–ö–ê –î–õ–Ø –ù–ò–ö–ê ‚äô`,
                r1: `‚äô`,
                r2: `‚äô`
            },
            {
                name: `–†–ê–ú–ö–ê –î–õ–Ø –ù–ò–ö–ê ‡∂ß`,
                r1: `‡∂ß`,
                r2: `‡∂ß`
            },
            {
                name: `–†–ê–ú–ö–ê –î–õ–Ø –ù–ò–ö–ê Áõä`,
                r1: `Áõä`,
                r2: `Áõä`
            },
            {
                name: `–†–ê–ú–ö–ê –î–õ–Ø –ù–ò–ö–ê ‡Ø∏`,
                r1: `‡Ø∏`,
                r2: `‡Ø∏`
            },
            {
                name: `–†–ê–ú–ö–ê –î–õ–Ø –ù–ò–ö–ê ‡Øµ`,
                r1: `‡Øµ`,
                r2: `‡Øµ`
            }
        ]

        const r_ramka = ramkas[Math.floor(Math.random() * ramkas.length)]
        const setup = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('setup')
                    .setLabel('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')
                    .setStyle(ButtonStyle.Success)
                    .setEmoji(`‚¨ÜÔ∏è`)
            )
        const reply = await interaction.reply({
            content: `‚óæ
üß• ${user}... –ù–µ–ø—Ç—É–Ω –∑–æ–≤—ë—Ç —Ç–µ–±—è.
–í —ç—Ç–æ—Ç —Ä–∞–∑ –æ–Ω –¥–∞—ë—Ç —Ç–µ–±–µ \`${r_ramka.name}\`!
:crystal_ball: –ù–µ–æ–±—Ö–æ–¥–∏–º —Ä–∞–Ω–≥ \"–ó–≤—ë–∑–¥–æ—á–∫–∞ –≥–∏–ª—å–¥–∏–∏\".
–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–º–∫—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\" –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥...
‚óæ`,
            components: [setup],
            fetchReply: true,
            ephemeral: true
        });

        const filter = i => i.customId === 'setup';

        const collector = reply.createMessageComponentCollector({ filter, componentType: ComponentType.Button, time: 60000 })

        collector.on(`collect`, async (i) => {
            if (i.user.id === member.user.id) {
                if (r_ramka.name.startsWith(`–†–ê–ú–ö–ê –î–õ–Ø –ù–ò–ö–ê`) && (userData.rank_number >= 5)) {
                    userData.displayname.ramka1 = r_ramka.r1
                    userData.displayname.ramka2 = r_ramka.r2
                    i.reply({
                        content: `–û–∂–∏–¥–∞–π—Ç–µ! –°–∫–æ—Ä–æ –≤–∞—à–∞ —Ä–∞–º–∫–∞ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ï—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –≤–æ–ø—Ä–æ—Å-–º–æ–¥–µ—Ä–∞–º!`,
                        ephemeral: true
                    })
                    await setup.components[0]
                        .setDisabled(true)
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji(`üïì`)
                        .setLabel(`–ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...`)
                }
                else {
                    await setup.components[0]
                        .setDisabled(true)
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji(`‚ùå`)
                        .setLabel(`–ù–∏–∑–∫–∏–π —Ä–∞–Ω–≥`)

                    i.reply({
                        content: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–±–µ –¥–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã –º–æ–∂–µ—Ç–µ –≤ –∫–∞–Ω–∞–ª–µ <#931620901882068992>!`,
                        ephemeral: true
                    })
                }

                await interaction.editReply({
                    content: `‚óæ
üß• ${user}... –ù–µ–ø—Ç—É–Ω –∑–æ–≤—ë—Ç —Ç–µ–±—è.
–í —ç—Ç–æ—Ç —Ä–∞–∑ –æ–Ω –¥–∞—ë—Ç —Ç–µ–±–µ \`${r_ramka.name}\`!
:crystal_ball: –ù–µ–æ–±—Ö–æ–¥–∏–º —Ä–∞–Ω–≥ \"–ó–≤—ë–∑–¥–æ—á–∫–∞ –≥–∏–ª—å–¥–∏–∏\".
–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–º–∫—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\" –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥...
‚óæ`,
                    components: [setup],
                    fetchReply: true
                })
                userData.save()
                collector.stop()
            } else {
                i.reply({ content: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–Ω–æ–ø–æ—á–∫—É!`, ephemeral: true });
            }
        })
        collector.on(`end`, async (err) => {
            await setup.components[0]
                .setDisabled(true)
                .setStyle(ButtonStyle.Secondary)

            await interaction.editReply({
                content: `‚óæ
üß• ${user}... –ù–µ–ø—Ç—É–Ω –∑–æ–≤—ë—Ç —Ç–µ–±—è.
–í —ç—Ç–æ—Ç —Ä–∞–∑ –æ–Ω –¥–∞—ë—Ç —Ç–µ–±–µ \`${r_ramka.name}\`!
:crystal_ball: –ù–µ–æ–±—Ö–æ–¥–∏–º —Ä–∞–Ω–≥ \"–ó–≤—ë–∑–¥–æ—á–∫–∞ –≥–∏–ª—å–¥–∏–∏\".
–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–º–∫—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\" –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥...
‚óæ`,
                components: [setup]
            })
        });

        userData.cooldowns.neptune = Date.now() + (1000 * 60 * 60 * 24 * 30) * (1 - (userData.perks.decrease_cooldowns * 0.1))
        if (userData.cd_remind.includes('neptune')) {
            let ITEM_ID = userData.cd_remind.findIndex(item_id => item_id == 'neptune')
            userData.cd_remind.splice(ITEM_ID, 1)
        }
        userData.save()
    } catch (e) {
        const admin = await client.users.fetch(`491343958660874242`)
        console.log(e)
        let options = interaction?.options.data.map(a => {
            return `{
"status": true,
"name": "${a.name}",
"type": ${a.type},
"autocomplete": ${a?.autocomplete ? true : false},
"value": "${a?.value ? a.value : "No value"}",
"user": "${a?.user?.id ? a.user.id : "No User"}",
"channel": "${a?.channel?.id ? a.channel.id : "No Channel"}",
"role": "${a?.role?.id ? a.role.id : "No Role"}",
"attachment": "${a?.attachment?.url ? a.attachment.url : "No Attachment"}"
}`
        })
        await admin.send(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`)
        await admin.send(`=> ${e}.
**ID –º–æ–¥–µ–ª–∏**: \`${interaction.customId}\`
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: ${interaction.member}
**–ö–∞–Ω–∞–ª**: ${interaction.channel}
**–û–ø—Ü–∏–∏**: \`\`\`json
${interaction.options.data.length <= 0 ? `{"status": false}` : options.join(`,\n`)}
\`\`\``)
        await admin.send(`‚óæ`)
    }

}
module.exports = {
    plugin: {
        id: "items",
        name: "–ü—Ä–µ–¥–º–µ—Ç—ã"
    },
    data: {
        name: "myth_neptune"
    },
    execute
}