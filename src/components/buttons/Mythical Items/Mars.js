const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ComponentType, ButtonStyle } = require('discord.js');
const fetch = require(`node-fetch`)
const { joinVoiceChannel } = require('@discordjs/voice');
const { execute } = require('../../../events/client/start_bot/ready');
const wait = require(`node:timers/promises`).setTimeout
const api = process.env.hypixel_apikey;
const { Temp } = require(`../../../schemas/temp_items`);
const { User } = require(`../../../schemas/userdata`)
const { Guild } = require(`../../../schemas/guilddata`)
const chalk = require(`chalk`);
const prettyMilliseconds = require(`pretty-ms`); //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï
const linksInfo = require(`../../../discord structure/links.json`)
const ch_list = require(`../../../discord structure/channels.json`)
const { isOneEmoji } = require(`is-emojis`)
module.exports = {
    plugin: {
        id: "items",
        name: "–ü—Ä–µ–¥–º–µ—Ç—ã"
    },
    data: {
        name: "myth_mars"
    },
    async execute(interaction, client) {
        try {
            const { guild, member, user } = interaction
            const guildData = await Guild.findOne({ id: guild.id })
            const userData = await User.findOne({ userid: user.id })
            if (!userData.onlinemode) return interaction.reply({
                content: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ú–∞—Ä—Å, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –Ω–µ–ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç!`,
                ephemeral: true
            })
            let role = `597746057203548160`
            const no_role = new EmbedBuilder()
                .setAuthor({
                    name: `‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Ä–æ–ª—å!`
                })
                .setDescription(`–í—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ä–æ–ª—å \`${interaction.guild.roles.cache.get(role).name}\`, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É!`)
                .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                .setColor(`DarkRed`)
                .setTimestamp(Date.now())

            if (!member.roles.cache.has(role)) return interaction.reply({
                embeds: [no_role],
                ephemeral: true
            })

            const cd = new EmbedBuilder()
                .setColor(Number(linksInfo.bot_color))
                .setAuthor({
                    name: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É`
                })
                .setDescription(`–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ ${prettyMilliseconds(userData.cooldowns.mars - Date.now(), { verbose: true, secondsDecimalDigits: 0 })}!`)

            if (userData.cooldowns.mars > Date.now()) return interaction.reply({
                embeds: [cd],
                ephemeral: true
            })

            const quests = require(`../../../jsons/Quests.json`)

            const quest = quests.mars[Math.floor(Math.random() * quests.mars.length)]

            const ids = quest.quest_code.split(`.`)
            if (quest.id !== 2) {
                const response = await fetch(`https://api.hypixel.net/player?uuid=${userData.uuid}`, {
                    headers: {
                        "API-Key": api,
                        "Content-Type": "application/json"
                    }
                })
                if (response.ok) {
                    let json = await response.json()
                    let gameInfo = json.player.stats[ids[0]][ids[1]]
                    if (!gameInfo) gameInfo = 0
                    userData.quests.mars.activated.status = false
                    userData.quests.mars.activated.id = quest.id
                    userData.quests.mars.activated.required = quest.require + gameInfo
                }
            } else if (quest.id == 2) {
                const response = await fetch(`https://api.hypixel.net/guild?player=${userData.uuid}`, {
                    headers: {
                        "API-Key": api,
                        "Content-Type": "application/json"
                    }
                })
                if (response.ok) {
                    let json = await response.json()
                    let gMember = json.guild.members.find(member => member.uuid == userData.uuid)
                    if (!gMember) return interaction.reply({
                        content: `–ü–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –≤–∞—Å –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ –≥–∏–ª—å–¥–∏–∏ –Ω–∞ Hypixel! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≥–∏–ª—å–¥–∏–∏, —É–∫–∞–∑–∞–≤ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º!`,
                        ephemeral: true
                    })
                    userData.quests.mars.activated.status = false
                    userData.quests.mars.activated.id = quest.id
                    userData.quests.mars.activated.required = quest.require
                }
            }
            await interaction.reply({
                content: `:older_woman: ${user} –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—â–∏ —É –ú–∞—Ä—Å–∞!

:scroll: –î–ª—è —ç—Ç–æ –µ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ:
\`${quest.quest}\`
:crown: –í –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–≥—Ä–∞–¥—ã –æ–Ω –ø–æ–ª—É—á–∏—Ç ${quest.reward}!
üíí –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º –∫–≤–µ—Å—Ç–µ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å –µ–≥–æ, –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \`/quests mars\`!

–ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â—å —É –ú–∞—Ä—Å–∞ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏!`,
                ephemeral: true
            })
            userData.cooldowns.mars = Date.now() + (1000 * 60 * 60 * 24 * 14)
            userData.save()
        } catch (e) {
            const admin = await client.users.fetch(`491343958660874242`)
            console.log(e)
            let options = interaction?.options.data.map(a => {
                return `{
"status": true,
"name": "${a.name}",
"type": ${a.type},
"autocomplete": ${a?.autocomplete ? true : false},
"value": "${a?.value ? a.value : "No value"}",
"user": "${a?.user?.id ? a.user.id : "No User"}",
"channel": "${a?.channel?.id ? a.channel.id : "No Channel"}",
"role": "${a?.role?.id ? a.role.id : "No Role"}",
"attachment": "${a?.attachment?.url ? a.attachment.url : "No Attachment"}"
}`
            })
            await admin.send(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`)
            await admin.send(`=> ${e}.
**ID –º–æ–¥–µ–ª–∏**: \`${interaction.customId}\`
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: ${interaction.member}
**–ö–∞–Ω–∞–ª**: ${interaction.channel}
**–û–ø—Ü–∏–∏**: \`\`\`json
${interaction.options.data.length <= 0 ? `{"status": false}` : options.join(`,\n`)}
\`\`\``)
            await admin.send(`‚óæ`)
        }

    }
}