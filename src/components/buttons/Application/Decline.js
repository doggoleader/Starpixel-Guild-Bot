const { SlashCommandBuilder, ModalBuilder, TextInputBuilder, ActionRowBuilder, TextInputStyle, InteractionType, ButtonBuilder, ButtonStyle, ComponentType } = require('discord.js');

const { Apply } = require(`../../../schemas/applications`)
const linksInfo = require(`../../../discord structure/links.json`)
/**
 * 
 * @param {import("discord.js").ButtonInteraction} interaction Interaction
 * @param {import("../../../misc_functions/Exporter").StarpixelClient} client Client
 * 
 * Interaction main function
 */
async function execute(interaction, client) {
    try {
        await interaction.deferReply({ fetchReply: true, ephemeral: true })
        let appData = await Apply.findOne({ applicationid: interaction.message.id })
        appData.status = `–û—Ç–∫–ª–æ–Ω–µ–Ω–∞`
        appData.officer = interaction.user.id
        const buttons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`app_decline`)
                    .setEmoji(`‚ùå`)
                    .setLabel(`–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É`)
                    .setStyle(ButtonStyle.Danger)
                    .setDisabled(true)
            )
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`app_waiting`)
                    .setEmoji(`üïë`)
                    .setLabel(`–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ`)
                    .setStyle(ButtonStyle.Secondary)
            )
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`app_accept`)
                    .setEmoji(`‚úÖ`)
                    .setLabel(`–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É`)
                    .setStyle(ButtonStyle.Success)
                    .setDisabled(true)
            )
        const embed = new EmbedBuilder()
            .setTitle(`–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${interaction.user.username}`)
            .setColor(Number(linksInfo.bot_color))
            .setDescription(`**–ó–ê–Ø–í–ö–ê**
1. –ò–º—è - \`${appData.que1}\`.
2. –ù–∏–∫–Ω–µ–π–º - \`${appData.que2 ? appData.que2 : "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞"}\`.
3. –í–æ–∑—Ä–∞—Å—Ç - \`${appData.que3}\`.
4. –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–π—Ç–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª - \`${appData.que4}\`.
5. –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ - \`${appData.que5}\`.
        
6. –ü–æ—á–µ–º—É –≤—ã –∂–µ–ª–∞–µ—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –∏–º–µ–Ω–Ω–æ –∫ –Ω–∞–º –≤ –≥–∏–ª—å–¥–∏—é?
\`${appData.que6}\`.
        
7. –ö–∞–∫ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—à–µ–π –≥–∏–ª—å–¥–∏–∏?
\`${appData.que7}\`.

**–ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—Ñ–∏—Ü–µ—Ä–æ–º ${interaction.member}**
**–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏**: ${appData.status}`)
            .setFooter({ text: `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏ –ª—é–±–æ–º —Ä–µ—à–µ–Ω–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.` })
        await interaction.message.edit({
            embeds: [embed],
            components: [buttons]
        })
        appData.save()

        await interaction.editReply({
            content: `–ó–∞—è–≤–∫–∞ <@${appData.userid}> –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!`
        })
    } catch (e) {
        const admin = await client.users.fetch(`491343958660874242`)
        console.log(e)
        let options = interaction?.options.data.map(a => {
            return `{
"status": true,
"name": "${a.name}",
"type": ${a.type},
"autocomplete": ${a?.autocomplete ? true : false},
"value": "${a?.value ? a.value : "No value"}",
"user": "${a?.user?.id ? a.user.id : "No User"}",
"channel": "${a?.channel?.id ? a.channel.id : "No Channel"}",
"role": "${a?.role?.id ? a.role.id : "No Role"}",
"attachment": "${a?.attachment?.url ? a.attachment.url : "No Attachment"}"
}`
        })
        await admin.send(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`)
        await admin.send(`=> ${e}.
**ID –º–æ–¥–µ–ª–∏**: \`${interaction.customId}\`
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: ${interaction.member}
**–ö–∞–Ω–∞–ª**: ${interaction.channel}
**–û–ø—Ü–∏–∏**: \`\`\`json
${interaction.options.data.length <= 0 ? `{"status": false}` : options.join(`,\n`)}
\`\`\``)
        await admin.send(`‚óæ`)
    }

}
module.exports = {
    plugin: {
        id: "new_users",
        name: "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    },
    data: {
        name: "app_decline"
    },
    execute
}