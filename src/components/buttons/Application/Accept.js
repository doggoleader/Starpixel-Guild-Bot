const { SlashCommandBuilder, ModalBuilder, TextInputBuilder, ActionRowBuilder, TextInputStyle, InteractionType, ButtonBuilder, ButtonStyle, ComponentType, channelLink, ChannelType, EmbedBuilder, } = require('discord.js');
const { Apply } = require(`../../../schemas/applications`)
const ch_list = require(`../../../discord structure/channels.json`)
/**
 * 
 * @param {import("discord.js").ButtonInteraction} interaction Interaction
 * @param {import("../../../misc_functions/Exporter").StarpixelClient} client Client
 * 
 * Interaction main function
 */
async function execute(interaction, client) {
    try {
        await interaction.deferReply({ fetchReply: true, ephemeral: true })
        let appData = await Apply.findOne({ applicationid: interaction.message.id })
        const member = await interaction.guild.members.fetch(appData.userid)
        const ch = await interaction.guild.channels.fetch(ch_list.application).then(async channel => {
            const thread = await channel.threads.create({
                name: `–ó–∞—è–≤–∫–∞ - ${appData.que2 ? appData.que2 : member.user.displayName}`,
                type: ChannelType.PrivateThread,
                reason: `–ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω`,
                invitable: false
            })
            await thread.members.add(interaction.user.id)
            await thread.members.add(appData.userid)
            const buttonLock = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`app_int_decline`)
                        .setEmoji(`‚ùå`)
                        .setLabel(`–û—Ç–∫–ª–æ–Ω–∏—Ç—å`)
                        .setStyle(ButtonStyle.Danger)
                )
            /* .addComponents(
                new ButtonBuilder()
                .setCustomId(`app_int_start`)
                .setEmoji(`üé§`)
                .setLabel(`–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é`)
                .setStyle(ButtonStyle.Primary)
            ) */
            await thread.send({
                content: `<@${appData.userid}>, –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞. –¢–µ–ø–µ—Ä—å –≤ –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É, –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —Å –Ω–∏–º –æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é.
                    
–ñ–µ–ª–∞—é –≤–∞–º —É–¥–∞—á–∏!`,
                components: [buttonLock]
            })
            appData.threadid = thread.id
        })
        appData.officer = interaction.user.id
        appData.status = `–ü—Ä–∏–Ω—è—Ç–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é`
        const buttons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`app_decline`)
                    .setEmoji(`‚ùå`)
                    .setLabel(`–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É`)
                    .setStyle(ButtonStyle.Danger)
                    .setDisabled(true)
            )
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`app_waiting`)
                    .setEmoji(`üïë`)
                    .setLabel(`–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ`)
                    .setStyle(ButtonStyle.Secondary)
            )
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`app_accept`)
                    .setEmoji(`‚úÖ`)
                    .setLabel(`–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É`)
                    .setStyle(ButtonStyle.Success)
                    .setDisabled(true)
            )
        const embed = new EmbedBuilder()
            .setTitle(`–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${interaction.user.username}`)
            .setColor(Number(client.information.bot_color))
            .setDescription(`**–ó–ê–Ø–í–ö–ê**
1. –ò–º—è - \`${appData.que1}\`.
2. –ù–∏–∫–Ω–µ–π–º - \`${appData.que2 ? appData.que2 : "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞"}\`.
3. –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ - \`${appData.que5}\`.
4. –°–ª—ã—à–∞–ª–∏ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –≥–∏–ª—å–¥–∏–µ–π —Å–≤–æ–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞?
\`${appData.que6}\`.
5. –ö–∞–∫ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—à–µ–π –≥–∏–ª—å–¥–∏–∏?
\`${appData.que7 ? appData.que7 : "–û—Ç–≤–µ—Ç –Ω–µ –¥–∞–Ω"}\`.
    
**–ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—Ñ–∏—Ü–µ—Ä–æ–º ${interaction.member}**
**–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏**: ${appData.status}`)
            .setFooter({ text: `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏ –ª—é–±–æ–º —Ä–µ—à–µ–Ω–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.` })
        await interaction.message.edit({
            embeds: [embed],
            components: [buttons]
        })

        await interaction.editReply({
            content: `–ó–∞—è–≤–∫–∞ <@${appData.userid}> –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é!`
        })
        appData.save()
    } catch (e) {
        const admin = await client.users.fetch(`491343958660874242`)
        console.log(e)
        await admin.send({
            content: `-> \`\`\`${e.stack}\`\`\``
        }).catch()
    }

}
module.exports = {
    plugin: {
        id: "new_users",
        name: "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    },
    data: {
        name: "app_accept"
    },
    execute
}