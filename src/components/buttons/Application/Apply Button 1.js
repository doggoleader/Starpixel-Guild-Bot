const { SlashCommandBuilder, ModalBuilder, TextInputBuilder, ActionRowBuilder, TextInputStyle, InteractionType, ButtonBuilder, ButtonStyle, ComponentType, EmbedBuilder } = require('discord.js');
const { Guild } = require(`../../../schemas/guilddata`)
const { Apply } = require(`../../../schemas/applications`)
const chalk = require(`chalk`)
const ch_list = require(`../../../discord structure/channels.json`)
/**
 * 
 * @param {import("discord.js").ButtonInteraction} interaction Interaction
 * @param {import("../../../misc_functions/Exporter").StarpixelClient} client Client
 * 
 * Interaction main function
 */
async function execute(interaction, client) {
    try {

        const member = interaction.member
        const guild = interaction.guild
        if (member.roles.cache.has(`504887113649750016`)) {
            const embed = new EmbedBuilder()
                .setAuthor({
                    name: `‚ùó –í—ã —É–∂–µ –≤ –≥–∏–ª—å–¥–∏–∏!`
                })
                .setDescription(`–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏ Starpixel! –ó–∞—á–µ–º –≤–∞–º –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫—É –µ—â—ë —Ä–∞–∑? üòÇ`)
                .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                .setColor(`DarkRed`)
                .setTimestamp(Date.now())

            return interaction.reply({
                embeds: [embed],
                ephemeral: true
            })
        }
        const guildData = await Guild.findOne({
            id: interaction.guild.id
        })
        let appData = await Apply.findOne({ userid: interaction.user.id, guildid: interaction.guild.id }) || new Apply({ userid: interaction.user.id, guildid: interaction.guild.id })
        if (appData.rules_accepted == false) return interaction.reply({
            content: `–í—ã –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤ <#${ch_list.rules}>!`,
            ephemeral: true
        })
        if (appData.applied == true) return interaction.reply({
            content: `–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –≤ –≥–∏–ª—å–¥–∏—é!`,
            ephemeral: true
        })
        let haveAcc = appData.onlinemode
        if (guildData.global_settings.no_license_applications == "enabled_everyone") {
            if (!haveAcc) return interaction.reply({
                content: `–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —à–∞–≥ 1!`,
                ephemeral: true
            })

        }

        if (haveAcc == "no") {

            if (appData.status == `–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏`) return interaction.reply({
                content: `–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ—ë –∏–∑–º–µ–Ω–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ \`–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É\` –∏ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è! (–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏, —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è!)`,
                ephemeral: true
            })
            let apply = new ModalBuilder()
                .setCustomId(`apply1`)
                .setTitle(`–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (1/2)`)

            let question1 = new TextInputBuilder()
                .setCustomId(`first`)
                .setLabel(`–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?`)
                .setPlaceholder(`–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è.`)
                .setRequired(true)
                .setStyle(TextInputStyle.Short)
                .setValue(appData.que1)

            let question3 = new TextInputBuilder()
                .setCustomId(`third`)
                .setLabel(`–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?`)
                .setPlaceholder(`–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤! –ù–∞–ø—Ä–∏–º–µ—Ä: 17`)
                .setRequired(true)
                .setMaxLength(2)
                .setStyle(TextInputStyle.Short)
                .setValue(appData.que3)

            let question4 = new TextInputBuilder()
                .setCustomId(`fourth`)
                .setLabel(`–ú–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –ø–æ–π—Ç–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª?`)
                .setPlaceholder(`–ù–∞–ª–∏—á–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —Ç–æ–∂–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.`)
                .setRequired(true)
                .setStyle(TextInputStyle.Short)
                .setValue(appData.que4)

            let question5 = new TextInputBuilder()
                .setCustomId(`fifth`)
                .setLabel(`–û–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –ª–∏ –≤—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏?`)
                .setPlaceholder(`–ù–∞–ø–∏—à–∏—Ç–µ, –≥–æ—Ç–æ–≤—ã –ª–∏ —Å–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –ª–∏ –≤—ã —Å –Ω–∏–º–∏.`)
                .setRequired(true)
                .setStyle(TextInputStyle.Short)
                .setValue(appData.que5)

            apply.addComponents(new ActionRowBuilder().addComponents(question1)).addComponents(new ActionRowBuilder().addComponents(question3)).addComponents(new ActionRowBuilder().addComponents(question4)).addComponents(new ActionRowBuilder().addComponents(question5))
            await interaction.showModal(apply)
        } else {
            if (appData.status == `–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏`) return interaction.reply({
                content: `–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ—ë –∏–∑–º–µ–Ω–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ \`–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É\` –∏ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è! (–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏, —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è!)`,
                ephemeral: true
            })
            let apply = new ModalBuilder()
                .setCustomId(`apply1`)
                .setTitle(`–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (1/2)`)

            let question1 = new TextInputBuilder()
                .setCustomId(`first`)
                .setLabel(`–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?`)
                .setPlaceholder(`–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è.`)
                .setRequired(true)
                .setStyle(TextInputStyle.Short)
                .setValue(appData.que1)

            let question2 = new TextInputBuilder()
                .setCustomId(`second`)
                .setLabel(`–ö–∞–∫–æ–π —É –≤–∞—Å –Ω–∏–∫–Ω–µ–π–º –≤ Minecraft?`)
                .setPlaceholder(`–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.`)
                .setRequired(true)
                .setStyle(TextInputStyle.Short)
                .setMaxLength(16)
                .setValue(appData.que2)

            let question3 = new TextInputBuilder()
                .setCustomId(`third`)
                .setLabel(`–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?`)
                .setPlaceholder(`–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤! –ù–∞–ø—Ä–∏–º–µ—Ä: 17`)
                .setRequired(true)
                .setMaxLength(2)
                .setStyle(TextInputStyle.Short)
                .setValue(appData.que3)

            let question4 = new TextInputBuilder()
                .setCustomId(`fourth`)
                .setLabel(`–ú–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –ø–æ–π—Ç–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª?`)
                .setPlaceholder(`–ù–∞–ª–∏—á–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —Ç–æ–∂–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.`)
                .setRequired(true)
                .setStyle(TextInputStyle.Short)
                .setValue(appData.que4)

            let question5 = new TextInputBuilder()
                .setCustomId(`fifth`)
                .setLabel(`–û–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –ª–∏ –≤—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏?`)
                .setPlaceholder(`–ù–∞–ø–∏—à–∏—Ç–µ, –≥–æ—Ç–æ–≤—ã –ª–∏ —Å–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –ª–∏ –≤—ã —Å –Ω–∏–º–∏.`)
                .setRequired(true)
                .setStyle(TextInputStyle.Short)
                .setValue(appData.que5)
            apply.addComponents(new ActionRowBuilder().addComponents(question1)).addComponents(new ActionRowBuilder().addComponents(question2)).addComponents(new ActionRowBuilder().addComponents(question3)).addComponents(new ActionRowBuilder().addComponents(question4)).addComponents(new ActionRowBuilder().addComponents(question5))
            await interaction.showModal(apply)
        }
    } catch (e) {
        const admin = await client.users.fetch(`491343958660874242`)
        console.log(e)
        let options = interaction?.options.data.map(a => {
            return `{
"status": true,
"name": "${a.name}",
"type": ${a.type},
"autocomplete": ${a?.autocomplete ? true : false},
"value": "${a?.value ? a.value : "No value"}",
"user": "${a?.user?.id ? a.user.id : "No User"}",
"channel": "${a?.channel?.id ? a.channel.id : "No Channel"}",
"role": "${a?.role?.id ? a.role.id : "No Role"}",
"attachment": "${a?.attachment?.url ? a.attachment.url : "No Attachment"}"
}`
        })
        await admin.send(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`)
        await admin.send(`=> ${e}.
**ID –∫–Ω–æ–ø–∫–∏**: \`${interaction.customId}\`
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: ${interaction.member}
**–ö–∞–Ω–∞–ª**: ${interaction.channel}
**–û–ø—Ü–∏–∏**: \`\`\`json
${interaction.options.data.length <= 0 ? `{"status": false}` : options.join(`,\n`)}
\`\`\``)
        await admin.send(`‚óæ`)
    }

}

module.exports = {
    plugin: {
        id: "new_users",
        name: "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    },
    data: {
        name: "apply1"
    },
    execute
}
