const { SlashCommandBuilder, ModalBuilder, TextInputBuilder, ActionRowBuilder, TextInputStyle, InteractionType, ButtonBuilder, ButtonStyle, ComponentType, EmbedBuilder } = require('discord.js');
const { Guild } = require(`../../../schemas/guilddata`)
const { Apply } = require(`../../../schemas/applications`)
const chalk = require(`chalk`)
const ch_list = require(`../../../discord structure/channels.json`)
/**
 * 
 * @param {import("discord.js").ButtonInteraction} interaction Interaction
 * @param {import("../../../misc_functions/Exporter").StarpixelClient} client Client
 * 
 * Interaction main function
 */
async function execute(interaction, client) {
    try {

        const member = interaction.member
        const guild = interaction.guild
        if (member.roles.cache.has(`504887113649750016`)) {
            const embed = new EmbedBuilder()
                .setAuthor({
                    name: `‚ùó –í—ã —É–∂–µ –≤ –≥–∏–ª—å–¥–∏–∏!`
                })
                .setDescription(`–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏ Starpixel! –ó–∞—á–µ–º –≤–∞–º –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫—É –µ—â—ë —Ä–∞–∑? üòÇ`)
                .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                .setColor(`DarkRed`)
                .setTimestamp(Date.now())

            return interaction.reply({
                embeds: [embed],
                ephemeral: true
            })
        }
        const guildData = await Guild.findOne({
            id: interaction.guild.id
        })
        let appData = await Apply.findOne({ userid: interaction.user.id, guildid: interaction.guild.id }) || new Apply({ userid: interaction.user.id, guildid: interaction.guild.id })
        if (appData.rules_accepted == false) return interaction.reply({
            content: `–í—ã –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤ <#${ch_list.rules}>!`,
            ephemeral: true
        })
        if (appData.applied == true) return interaction.reply({
            content: `–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –≤ –≥–∏–ª—å–¥–∏—é!`,
            ephemeral: true
        })/* 
        if (guildData.global_settings.no_license_applications == "enabled_everyone") {
            if (!haveAcc) return interaction.reply({
                content: `–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —à–∞–≥ 1!`,
                ephemeral: true
            })

        } */


        if (appData.applied) return interaction.reply({
            content: `–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ—ë –∏–∑–º–µ–Ω–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ \`–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É\` –∏ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è! (–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏, —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è!)`,
            ephemeral: true
        })
        let apply = new ModalBuilder()
            .setCustomId(`apply1`)
            .setTitle(`–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (1/2)`)

        let question1 = new TextInputBuilder()
            .setCustomId(`first`)
            .setLabel(`–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?`)
            .setPlaceholder(`–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è.`)
            .setRequired(true)
            .setStyle(TextInputStyle.Short)
            .setValue(appData.que1 ? appData.que1 : "")


        let question2 = new TextInputBuilder()
            .setCustomId(`second`)
            .setLabel(`–ö–∞–∫–æ–π —É –≤–∞—Å –Ω–∏–∫–Ω–µ–π–º –≤ Minecraft?`)
            .setPlaceholder(`–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)`)
            .setRequired(false)
            .setStyle(TextInputStyle.Short)
            .setMaxLength(16)
            .setValue(appData.que2 ? appData.que2 : "")

        let question3 = new TextInputBuilder()
            .setCustomId(`third`)
            .setLabel(`–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏?`)
            .setPlaceholder(`–ù–∞–ø–∏—à–∏—Ç–µ, –≥–æ—Ç–æ–≤—ã –ª–∏ —Å–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –ª–∏ –≤—ã —Å –Ω–∏–º–∏.`)
            .setRequired(true)
            .setStyle(TextInputStyle.Short)
            .setValue(appData.que5 ? appData.que5 : "")

        let question4 = new TextInputBuilder()
            .setCustomId(`fourth`)
            .setLabel(`–°–ª—ã—à–∞–ª–∏ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –≥–∏–ª—å–¥–∏–µ–π —Å–≤–æ–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞?`)
            .setPlaceholder(`–°–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞—ë—Ç—Å—è –ø–æ –º–æ—Ç–∏–≤–∞–º –¥–∞–ª—ë–∫–∏—Ö –∑–µ–º–µ–ª—å.`)
            .setRequired(true)
            .setStyle(TextInputStyle.Short)
            .setValue(appData.que6 ? appData.que6 : "")

        let question5 = new TextInputBuilder()
            .setCustomId(`fifth`)
            .setLabel(`–ö–∞–∫ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—à–µ–π –≥–∏–ª—å–¥–∏–∏?`)
            .setPlaceholder(`–ù–∞–ø–∏—à–∏—Ç–µ, –≥–¥–µ –∏ –∫–∞–∫ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—à–µ–π –≥–∏–ª—å–¥–∏–∏. (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)`)
            .setRequired(false)
            .setStyle(TextInputStyle.Paragraph)
            .setValue(appData.que7 ? appData.que7 : "")

        apply.addComponents(new ActionRowBuilder().addComponents(question1)).addComponents(new ActionRowBuilder().addComponents(question2)).addComponents(new ActionRowBuilder().addComponents(question3)).addComponents(new ActionRowBuilder().addComponents(question4)).addComponents(new ActionRowBuilder().addComponents(question5))
        await interaction.showModal(apply)

    } catch (e) {
        const admin = await client.users.fetch(`491343958660874242`)
        console.log(e)
        await admin.send({
            content: `-> \`\`\`${e.stack}\`\`\``
        }).catch()
    }

}

module.exports = {
    plugin: {
        id: "new_users",
        name: "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    },
    data: {
        name: "apply1"
    },
    execute
}
