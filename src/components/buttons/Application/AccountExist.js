const { SlashCommandBuilder, ModalBuilder, TextInputBuilder, ActionRowBuilder, TextInputStyle, InteractionType, ButtonBuilder, ButtonStyle, ComponentType, EmbedBuilder } = require('discord.js');

const { Apply } = require(`../../../schemas/applications`)
const chalk = require(`chalk`)
const ch_list = require(`../../../discord structure/channels.json`)
/**
 * 
 * @param {import("discord.js").ButtonInteraction} interaction Interaction
 * @param {import("../../../misc_functions/Exporter").StarpixelClient} client Client
 * 
 * Interaction main function
 */
async function execute(interaction, client) {
    try {

        const member = interaction.member
        const guild = interaction.guild
        if (member.roles.cache.has(`504887113649750016`)) {
            const embed = new EmbedBuilder()
                .setAuthor({
                    name: `‚ùó –í—ã —É–∂–µ –≤ –≥–∏–ª—å–¥–∏–∏!`
                })
                .setDescription(`–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏ Starpixel! –ó–∞—á–µ–º –≤–∞–º –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫—É –µ—â—ë —Ä–∞–∑? üòÇ`)
                .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
                .setColor(`DarkRed`)
                .setTimestamp(Date.now())

            return interaction.reply({
                embeds: [embed],
                ephemeral: true
            })
        }

        let appData = await Apply.findOne({ userid: interaction.user.id, guildid: interaction.guild.id }) || new Apply({ userid: interaction.user.id, guildid: interaction.guild.id })
        if (appData.rules_accepted == false) return interaction.reply({
            content: `–í—ã –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤ <#${ch_list.rules}>!`,
            ephemeral: true
        })
        if (appData.applied == true) return interaction.reply({
            content: `–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –≤ –≥–∏–ª—å–¥–∏—é!`,
            ephemeral: true
        })
        appData.onlinemode = "yes";
        appData.save()

        await interaction.reply({
            content: `–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏, —á—Ç–æ —É –≤–∞—Å **–µ—Å—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—è Minecraft**!`,
            ephemeral: true
        })

    } catch (e) {
        const admin = await client.users.fetch(`491343958660874242`)
        console.log(e)
        let options = interaction?.options.data.map(a => {
            return `{
"status": true,
"name": "${a.name}",
"type": ${a.type},
"autocomplete": ${a?.autocomplete ? true : false},
"value": "${a?.value ? a.value : "No value"}",
"user": "${a?.user?.id ? a.user.id : "No User"}",
"channel": "${a?.channel?.id ? a.channel.id : "No Channel"}",
"role": "${a?.role?.id ? a.role.id : "No Role"}",
"attachment": "${a?.attachment?.url ? a.attachment.url : "No Attachment"}"
}`
        })
        await admin.send(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`)
        await admin.send(`=> ${e}.
**ID –∫–Ω–æ–ø–∫–∏**: \`${interaction.customId}\`
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: ${interaction.member}
**–ö–∞–Ω–∞–ª**: ${interaction.channel}
**–û–ø—Ü–∏–∏**: \`\`\`json
${interaction.options.data.length <= 0 ? `{"status": false}` : options.join(`,\n`)}
\`\`\``)
        await admin.send(`‚óæ`)
    }

}

module.exports = {
    plugin: {
        id: "new_users",
        name: "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    },
    data: {
        name: "account_exist"
    },
    execute
}
