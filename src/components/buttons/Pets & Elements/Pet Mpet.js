const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const fetch = require(`node-fetch`);
const api = process.env.hypixel_apikey;
const { User } = require(`../../../schemas/userdata`)
const chalk = require(`chalk`);
const prettyMilliseconds = require(`pretty-ms`); //–î–û–ë–ê–í–ò–¢–¨ –í –î–†–£–ì–ò–ï
const ch_list = require(`../../../discord structure/channels.json`)
/**
 * 
 * @param {import("discord.js").ButtonInteraction} interaction Interaction
 * @param {import("../../../misc_functions/Exporter").StarpixelClient} client Client
 * 
 * Interaction main function
 */
async function execute(interaction, client) {
    try {
        const { member, user, channel, guild } = interaction
        const userData = await User.findOne({ userid: user.id })

        let role = `605696079819964426`
        const no_role = new EmbedBuilder()
            .setAuthor({
                name: `‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Ä–æ–ª—å!`
            })
            .setDescription(`–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ —Ä–æ–ª—å \`${interaction.guild.roles.cache.get(role).name}\`!`)
            .setThumbnail(`https://i.imgur.com/6IE3lz7.png`)
            .setColor(`DarkRed`)
            .setTimestamp(Date.now())
        if (!member.roles.cache.has(role)) return interaction.reply({
            embeds: [no_role],
            ephemeral: true
        })
        const cd = new EmbedBuilder()
            .setColor(Number(client.information.bot_color))
            .setAuthor({
                name: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É`
            })
            .setDescription(`–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ ${prettyMilliseconds(userData.cooldowns.mpet - Date.now(), { verbose: true, secondsDecimalDigits: 0 })}!`)

        if (userData.cooldowns.mpet > Date.now()) return interaction.reply({
            embeds: [cd],
            ephemeral: true
        })
        let pet = [
            {
                dropChance: 25,
                name: "–û–Ω –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–∫ –Ω–∞–≤—ã–∫–∞ \`–ó–∞—â–∏—Ç–∞ –æ—Ç –æ–≥–Ω—è\`. üî•"
            },
            {
                dropChance: 25,
                name: "–û–Ω –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–∫ –Ω–∞–≤—ã–∫–∞ \`–£–¥–∞—Ä –º–æ–ª–Ω–∏–∏\`. üî•"
            },
            {
                dropChance: 25,
                name: "–û–Ω –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–∫ –Ω–∞–≤—ã–∫–∞ \`–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–º–µ–Ω–µ–º\`. üî•"
            },
            {
                dropChance: 25,
                name: "–û–Ω –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ —É—Ä–æ–∫–∞."
            },


        ]

        try {
            await interaction.deferUpdate()

            let sum_act = 0;
            for (let i_act = 0; i_act < pet.length; i_act++) {
                sum_act += pet[i_act].dropChance;
            }
            let r_act = Math.floor(Math.random() * sum_act);
            let i_act = 0;
            for (let s = pet[0].dropChance; s <= r_act; s += pet[i_act].dropChance) {
                i_act++;
            }

            await interaction.guild.channels.cache.get(ch_list.elem).send(
                `:black_medium_small_square:
${user} –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –∫ –ü–∏—Ç–æ–º—Ü—É –û–≥–Ω—è üê≤.
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
${pet[i_act].name}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
:black_medium_small_square:`
            );
            if (pet[i_act].name == `–û–Ω –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–∫ –Ω–∞–≤—ã–∫–∞ \`–ó–∞—â–∏—Ç–∞ –æ—Ç –æ–≥–Ω—è\`. üî•` && userData.elements.fire_resistance < 1) {
                userData.elements.fire_resistance += 1
                console.log(chalk.blackBright(`[${new Date()}]`) + chalk.magenta(`[–ü–æ–ª—É—á–µ–Ω –Ω–∞–≤—ã–∫]`) + chalk.white(`: ${member.user.username} –ø–æ–ª—É—á–∏–ª –Ω–∞–≤—ã–∫ ${pet[i_act].name}`))

            } else if (pet[i_act].name == `–û–Ω –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–∫ –Ω–∞–≤—ã–∫–∞ \`–£–¥–∞—Ä –º–æ–ª–Ω–∏–∏\`. üî•` && userData.elements.lightning < 1) {
                userData.elements.lightning += 1
                console.log(chalk.blackBright(`[${new Date()}]`) + chalk.magenta(`[–ü–æ–ª—É—á–µ–Ω –Ω–∞–≤—ã–∫]`) + chalk.white(`: ${member.user.username} –ø–æ–ª—É—á–∏–ª –Ω–∞–≤—ã–∫ ${pet[i_act].name}`))

            } else if (pet[i_act].name == `–û–Ω –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–∫ –Ω–∞–≤—ã–∫–∞ \`–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–º–µ–Ω–µ–º\`. üî•` && userData.elements.flame < 1) {
                userData.elements.flame += 1
                console.log(chalk.blackBright(`[${new Date()}]`) + chalk.magenta(`[–ü–æ–ª—É—á–µ–Ω –Ω–∞–≤—ã–∫]`) + chalk.white(`: ${member.user.username} –ø–æ–ª—É—á–∏–ª –Ω–∞–≤—ã–∫ ${pet[i_act].name}`))

            } else {
                console.log(chalk.blackBright(`[${new Date()}]`) + chalk.magenta(`[–ü–æ–ª—É—á–µ–Ω –Ω–∞–≤—ã–∫]`) + chalk.white(`: ${member.user.username} –ø–æ–ª—É—á–∏–ª –Ω–∞–≤—ã–∫ ${pet[i_act].name}`))
            }
            userData.cooldowns.mpet = Date.now() + (1000 * 60 * 60 * 24 * 4) * (1 - (userData.perks.decrease_cooldowns * 0.1))
            if (userData.cd_remind.includes('mpet')) {
                let ITEM_ID = userData.cd_remind.findIndex(item_id => item_id == 'mpet')
                userData.cd_remind.splice(ITEM_ID, 1)
            }
            userData.save()
        } catch (error) {
            console.log(chalk.blackBright(`[${new Date()}]`) + chalk.red(`[–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞–≤—ã–∫–æ–≤]`) + chalk.white(`: ${member.user.username} –ø—Ä–µ–≤—ã—Å–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≤—ã–∫–∞ ${pet[i_act].name}`))
        }


    } catch (e) {
        const admin = await client.users.fetch(`491343958660874242`)
        console.log(e)
        await admin.send({
            content: `-> \`\`\`${e.stack}\`\`\``
        }).catch()
    }


}

module.exports = {
    plugin: {
        id: "items",
        name: "–ü—Ä–µ–¥–º–µ—Ç—ã"
    },
    data: {
        name: `pets_mpet`
    },
    execute

};