const { SlashCommandBuilder, ModalBuilder, TextInputBuilder, ActionRowBuilder, TextInputStyle, InteractionType, ButtonBuilder, ButtonStyle, ComponentType, EmbedBuilder } = require('discord.js');
const { Apply } = require(`../../../schemas/applications`)
const linksInfo = require(`../../../discord structure/links.json`);
const ch_list = require(`../../../discord structure/channels.json`);
const { User } = require('../../../schemas/userdata');
const api = process.env.hypixel_apikey
const { tasks } = require(`../../../jsons/New Start.json`);
const fetch = require(`node-fetch`);
const { getProperty } = require('../../../functions');
const marathon = require(`../../../jsons/Marathon.json`)
/**
 * 
 * @param {import("discord.js").StringSelectMenuInteraction} interaction Interaction
 * @param {import("../../../misc_functions/Exporter").StarpixelClient} client Client
 * 
 * Interaction main function
 */
async function execute(interaction, client) {
    try {
        await interaction.deferReply({ ephemeral: true, fetchReply: true })
        const { member, user, guild } = interaction;
        const userData = await User.findOne({ userid: user.id, guildid: guild.id })
        if (!userData.onlinemode) return interaction.editReply({
            content: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω–æ–µ –º–µ–Ω—é, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –Ω–µ–ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç!`,
            ephemeral: true
        })
        const response = await fetch(`https://api.hypixel.net/player?uuid=${userData.uuid}`, {
            headers: {
                "API-Key": api,
                "Content-Type": "application/json"
            }
        })
        let json_pl
        if (response.ok) {
            json_pl = await response.json()
        }

        const action = interaction.values[0];
        const quest = marathon.ids.find(q => q.id == userData.quests.marathon.activated.id)
        if (!quest) return interaction.editReply({
            content: `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –∫–≤–µ—Å—Ç!`,
            ephemeral: true
        })
        const ids = quest.code.split(`.`)
        if (action == `info`) {
            let wins = await getProperty(json_pl.player.stats, quest.code)
            if (!wins) wins = 0
            let fin_res
            if (userData.quests.marathon.activated.required - wins <= 0) fin_res = 0
            else fin_res = userData.quests.marathon.activated.required - wins
            const embed = new EmbedBuilder()
                .setTitle(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä–∞—Ñ–æ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`)
                .setColor(Number(linksInfo.bot_color))
                .setThumbnail(`https://minotar.net/helm/${userData.uuid}.png`)
                .setTimestamp(Date.now())
                .setDescription(`**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –º–∞—Ä–∞—Ñ–æ–Ω–µ**

**–ò–≥—Ä–∞**: ${quest.game}
**–ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥**: ${quest.req}
**–°—Ç–∞–¥–∏—è**: ${userData.quests.marathon.activated.stage}

**–ü–æ–±–µ–¥ –≤ —Ä–µ–∂–∏–º–µ —Å–µ–π—á–∞—Å**: ${wins}
**–ü–æ–±–µ–¥ –Ω–∞ –∫–æ–Ω–µ—Ü —Å—Ç–∞–¥–∏–∏**: ${userData.quests.marathon.activated.required}
**–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–±–µ–¥**: ${fin_res}

**–°—Ç–∞—Ç—É—Å**: \`${userData.quests.marathon.activated.status ? `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞` : `‚ùå –ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`}\``)

            await interaction.editReply({
                embeds: [embed]
            })
        } else if (action == `end`) {
            let wins = await getProperty(json_pl.player.stats, quest.code)
            if (!wins) wins = 0
            if (userData.quests.marathon.activated.status == true) return interaction.editReply({
                content: `–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ—Ç –∫–≤–µ—Å—Ç!`,
                ephemeral: true
            })
            if (wins < userData.quests.marathon.activated.required) return interaction.editReply({
                content: `–í—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∫–≤–µ—Å—Ç–∞! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–µ—Å—Ç–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –æ–ø—Ü–∏—é "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"!`,
                ephemeral: true
            })
            let stage = userData.quests.marathon.activated.stage
            let str
            if (stage == 1) {
                let reward = `510932601721192458`
                str = `<@&${reward}>`

                if (member.roles.cache.has(reward)) {
                    if (userData.stacked_items.length < userData.upgrades.inventory_size) {
                        await userData.stacked_items.push(reward)
                    } else return interaction.editReply({
                        content: `–ú—ã –Ω–µ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω. –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª <#1141026403765211136>!`,
                        ephemeral: true
                    })
                } else {
                    await member.roles.add(reward)
                }
            } else if (stage == 2) {
                let reward = `521248091853291540`
                str = `<@&${reward}>`

                if (member.roles.cache.has(reward)) {
                    if (userData.stacked_items.length < userData.upgrades.inventory_size) {
                        await userData.stacked_items.push(reward)
                    } else return interaction.editReply({
                        content: `–ú—ã –Ω–µ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω. –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª <#1141026403765211136>!`,
                        ephemeral: true
                    })
                } else {
                    await member.roles.add(reward)
                }
            } else if (stage == 3) {
                let reward = 50
                str = `${reward}üí†`

                userData.rank += reward
            } else if (stage == 4) {
                let reward = `992820494900412456`
                str = `<@&${reward}>`

                if (member.roles.cache.has(reward)) {
                    if (userData.stacked_items.length < userData.upgrades.inventory_size) {
                        await userData.stacked_items.push(reward)
                    } else return interaction.editReply({
                        content: `–ú—ã –Ω–µ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω. –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª <#1141026403765211136>!`,
                        ephemeral: true
                    })
                } else {
                    await member.roles.add(reward)
                }
            } else if (stage == 5) {
                let reward = `730891493375475786`
                if (member.roles.cache.has(reward)) reward = `584673040470769667`
                str = `<@&${reward}>`
                userData.quests.marathon.stats.total_mar += 1
                if (member.roles.cache.has(reward)) {
                    if (userData.stacked_items.length < userData.upgrades.inventory_size) {
                        await userData.stacked_items.push(reward)
                    } else return interaction.editReply({
                        content: `–ú—ã –Ω–µ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω. –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª <#1141026403765211136>!`,
                        ephemeral: true
                    })
                } else {
                    await member.roles.add(reward)
                }
            }
            userData.quests.marathon.stats.total_stages += 1


            userData.quests.marathon.completed.push(stage)
            userData.quests.marathon.activated.status = true
            userData.save()

            const embed = new EmbedBuilder()
                .setTitle(`–°—Ç–∞–¥–∏—è ${stage} –º–∞—Ä–∞—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username} –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!`)
                .setColor(Number(linksInfo.bot_color))
                .setThumbnail(`https://minotar.net/helm/${userData.uuid}.png`)
                .setTimestamp(Date.now())
                .setDescription(`**–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ ${stage} —Å—Ç–∞–¥–∏—é –º–∞—Ä–∞—Ñ–æ–Ω–∞!**

**–ò–≥—Ä–∞**: ${quest.game}
**–ù–∞–≥—Ä–∞–¥–∞**: ${str}
**–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥**: ${wins}`)
            await interaction.editReply({
                embeds: [embed]
            })

            await interaction.guild.channels.cache.get(ch_list.main)
                .send({
                    embeds: [embed.setDescription(`**${member} –≤—ã–ø–æ–ª–Ω–∏–ª ${stage} —Å—Ç–∞–¥–∏—é –º–∞—Ä–∞—Ñ–æ–Ω–∞!**

**–ò–≥—Ä–∞**: ${quest.game}
**–ù–∞–≥—Ä–∞–¥–∞**: ${str}
**–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥**: ${wins}`)]
                })
        }
    } catch (e) {
        const admin = await client.users.fetch(`491343958660874242`)
        console.log(e)
        let options = interaction?.options.data.map(a => {
            return `{
"status": true,
"name": "${a.name}",
"type": ${a.type},
"autocomplete": ${a?.autocomplete ? true : false},
"value": "${a?.value ? a.value : "No value"}",
"user": "${a?.user?.id ? a.user.id : "No User"}",
"channel": "${a?.channel?.id ? a.channel.id : "No Channel"}",
"role": "${a?.role?.id ? a.role.id : "No Role"}",
"attachment": "${a?.attachment?.url ? a.attachment.url : "No Attachment"}"
}`
        })
        await admin.send(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`)
        await admin.send(`=> ${e}.
**ID –º–µ–Ω—é**: \`${interaction.customId}\`
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: ${interaction.member}
**–ö–∞–Ω–∞–ª**: ${interaction.channel}
**–û–ø—Ü–∏–∏**: \`\`\`json
${interaction.options.data.length <= 0 ? `{"status": false}` : options.join(`,\n`)}
\`\`\``)
        await admin.send(`‚óæ`)
    }


}

module.exports = {
    plugin: {
        id: "hypixel",
        name: "Hypixel"
    },
    data: {
        name: "marathon_check_menu"
    },
    execute
}