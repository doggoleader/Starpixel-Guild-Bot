const { SlashCommandBuilder, ModalBuilder, TextInputBuilder, ActionRowBuilder, TextInputStyle, InteractionType, ButtonBuilder, ButtonStyle, ComponentType, StringSelectMenuBuilder, EmbedBuilder } = require('discord.js');
const { Apply } = require(`../../../schemas/applications`)
const linksInfo = require(`../../../discord structure/links.json`);
const ch_list = require(`../../../discord structure/channels.json`);
const { User } = require('../../../schemas/userdata');
const api = process.env.hypixel_apikey
const { tasks } = require(`../../../jsons/New Start.json`);
const fetch = require(`node-fetch`);
const { getProperty, mentionCommand } = require('../../../functions');
const { Polls } = require('../../../schemas/polls');
/**
 * 
 * @param {import("discord.js").StringSelectMenuInteraction} interaction Interaction
 * @param {import("../../../misc_functions/Exporter").StarpixelClient} client Client
 * 
 * Interaction main function
 */
async function execute(interaction, client) {
    try {
        const { member, guild, channel, values, user } = interaction
        const userData = await User.findOne({
            userid: user.id
        })
        const backButtons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`profile_sets_back_1`)
                    .setLabel(`–ù–∞–∑–∞–¥`)
                    .setEmoji(`‚¨Ö`)
                    .setStyle(ButtonStyle.Danger)
            )
        const value = values[0]
        switch (value) {
            case `birthday_wishes`: {
                const newValue = new ActionRowBuilder()
                    .addComponents(
                        new StringSelectMenuBuilder()
                            .setCustomId(`new_value`)
                            .setPlaceholder(`–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏`)
                            .setOptions(
                                {
                                    label: `–í–∫–ª—é—á–∏—Ç—å`,
                                    value: `1`,
                                    emoji: `‚úÖ`
                                },
                                {
                                    label: `–û—Ç–∫–ª—é—á–∏—Ç—å`,
                                    value: `0`,
                                    emoji: `‚ùå`
                                }
                            )
                    )
                const embed = new EmbedBuilder()
                    .setTitle(`üéÇ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è`)
                    .setColor(Number(linksInfo.bot_color))
                    .setDescription(`–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤–∞—Å —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –±—É–¥–µ—Ç –ª–∏ –±–æ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª—è—Ç—å –≤–∞—Å –≤ –¥–µ–Ω—å –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è.
### –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
- –ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, –æ–¥–Ω–∞–∫–æ –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–æ–ª—å <@&983441364903665714> –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π!`)

                const msg = await interaction.update({
                    embeds: [embed],
                    components: [newValue, backButtons],
                    ephemeral: true
                })

                const collector = msg.createMessageComponentCollector()
                collector.on('collect', async i => {
                    if (i.customId == `new_value`) {
                        const val = Boolean(Number(i.values[0]))
                        userData.pers_settings.birthday_wishes = val
                        userData.save()
                        await i.reply({
                            content: `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: \`${val ? `–í–∫–ª—é—á–µ–Ω–æ ‚úÖ` : `–í—ã–∫–ª—é—á–µ–Ω–æ ‚ùå`}\``,
                            ephemeral: true
                        })
                    } else if (i.customId == `profile_sets_back_1`) {
                        const { embed: emb, selectmenu } = require(`../../../misc_functions/Exporter`)
                        await i.update({
                            embeds: [emb],
                            components: [selectmenu]
                        })
                        collector.stop()
                    }
                })

                collector.on('end', async err => {

                })
            }
                break;
            case `profile_view`: {
                const newValue = new ActionRowBuilder()
                    .addComponents(
                        new StringSelectMenuBuilder()
                            .setCustomId(`new_value`)
                            .setPlaceholder(`–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏`)
                            .setOptions(
                                {
                                    label: `–í–∫–ª—é—á–∏—Ç—å`,
                                    value: `1`,
                                    emoji: `‚úÖ`
                                },
                                {
                                    label: `–û—Ç–∫–ª—é—á–∏—Ç—å`,
                                    value: `0`,
                                    emoji: `‚ùå`
                                }
                            )
                    )
                const embed = new EmbedBuilder()
                    .setTitle(`üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏`)
                    .setColor(Number(linksInfo.bot_color))
                    .setDescription(`–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–ª–∏ –∑–∞–ø—Ä–µ—â–∞–µ—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∞—à ${mentionCommand(client, 'profile')}.
### –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
- –û—Ñ–∏—Ü–µ—Ä—ã –∏ –≤—ã—à–µ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É —Å–º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.`)

                const msg = await interaction.update({
                    embeds: [embed],
                    components: [newValue, backButtons],
                    ephemeral: true
                })

                const collector = msg.createMessageComponentCollector()
                collector.on('collect', async i => {
                    if (i.customId == `new_value`) {
                        const val = Boolean(Number(i.values[0]))
                        userData.pers_settings.profile_view = val
                        userData.save()
                        await i.reply({
                            content: `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: \`${val ? `–í–∫–ª—é—á–µ–Ω–æ ‚úÖ` : `–í—ã–∫–ª—é—á–µ–Ω–æ ‚ùå`}\``,
                            ephemeral: true
                        })
                    } else if (i.customId == `profile_sets_back_1`) {
                        const { embed: emb, selectmenu } = require(`../../../misc_functions/Exporter`)
                        await i.update({
                            embeds: [emb],
                            components: [selectmenu]
                        })
                        collector.stop()
                    }
                })

                collector.on('end', async err => {

                })
            }
                break;
            case `marks_view`: {
                const newValue = new ActionRowBuilder()
                    .addComponents(
                        new StringSelectMenuBuilder()
                            .setCustomId(`new_value`)
                            .setPlaceholder(`–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏`)
                            .setOptions(
                                {
                                    label: `–í–∫–ª—é—á–∏—Ç—å`,
                                    value: `1`,
                                    emoji: `‚úÖ`
                                },
                                {
                                    label: `–û—Ç–∫–ª—é—á–∏—Ç—å`,
                                    value: `0`,
                                    emoji: `‚ùå`
                                }
                            )
                    )
                const embed = new EmbedBuilder()
                    .setTitle(`üßß –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–Ω–∞—á–∫–æ–≤ –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏`)
                    .setColor(Number(linksInfo.bot_color))
                    .setDescription(`–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–ª–∏ –∑–∞–ø—Ä–µ—â–∞–µ—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∞—à ${mentionCommand(client, 'marks check')}.
### –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
- –û—Ñ–∏—Ü–µ—Ä—ã –∏ –≤—ã—à–µ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É —Å–º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∞—à–∏ –∑–Ω–∞—á–∫–∏.`)

                const msg = await interaction.update({
                    embeds: [embed],
                    components: [newValue, backButtons],
                    ephemeral: true
                })

                const collector = msg.createMessageComponentCollector()
                collector.on('collect', async i => {
                    if (i.customId == `new_value`) {
                        const val = Boolean(Number(i.values[0]))
                        userData.pers_settings.marks_view = val
                        userData.save()
                        await i.reply({
                            content: `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: \`${val ? `–í–∫–ª—é—á–µ–Ω–æ ‚úÖ` : `–í—ã–∫–ª—é—á–µ–Ω–æ ‚ùå`}\``,
                            ephemeral: true
                        })
                    } else if (i.customId == `profile_sets_back_1`) {
                        const { embed: emb, selectmenu } = require(`../../../misc_functions/Exporter`)
                        await i.update({
                            embeds: [emb],
                            components: [selectmenu]
                        })
                        collector.stop()
                    }
                })

                collector.on('end', async err => {

                })
            }
                break;
            case `is_in_leaderboard`: {
                const newValue = new ActionRowBuilder()
                    .addComponents(
                        new StringSelectMenuBuilder()
                            .setCustomId(`new_value`)
                            .setPlaceholder(`–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏`)
                            .setOptions(
                                {
                                    label: `–í–∫–ª—é—á–∏—Ç—å`,
                                    value: `1`,
                                    emoji: `‚úÖ`
                                },
                                {
                                    label: `–û—Ç–∫–ª—é—á–∏—Ç—å`,
                                    value: `0`,
                                    emoji: `‚ùå`
                                }
                            )
                    )
                const embed = new EmbedBuilder()
                    .setTitle(`üèÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–∞—Ö –ª–∏–¥–µ—Ä–æ–≤`)
                    .setColor(Number(linksInfo.bot_color))
                    .setDescription(`–ò–∑–º–µ–Ω—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞—Å –≤ —Å–ø–∏—Å–∫–∞—Ö –ª–∏–¥–µ—Ä–æ–≤ –≤ ${mentionCommand(client, 'leaderboard')}.
### –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
- –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–∞—Ö –ª–∏–¥–µ—Ä–æ–≤, –∞ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ—é –∏—Å—Ç–∏–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Ç–æ–ø–∞—Ö, –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –¥–∞–Ω–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É.
- –ù–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ–∑–æ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ª–∏–¥–µ—Ä–æ–≤.`)

                const msg = await interaction.update({
                    embeds: [embed],
                    components: [newValue, backButtons],
                    ephemeral: true
                })

                const collector = msg.createMessageComponentCollector()
                collector.on('collect', async i => {
                    if (i.customId == `new_value`) {
                        const val = Boolean(Number(i.values[0]))
                        userData.pers_settings.is_in_leaderboard = val
                        userData.save()
                        await i.reply({
                            content: `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: \`${val ? `–í–∫–ª—é—á–µ–Ω–æ ‚úÖ` : `–í—ã–∫–ª—é—á–µ–Ω–æ ‚ùå`}\``,
                            ephemeral: true
                        })
                    } else if (i.customId == `profile_sets_back_1`) {
                        const { embed: emb, selectmenu } = require(`../../../misc_functions/Exporter`)
                        await i.update({
                            embeds: [emb],
                            components: [selectmenu]
                        })
                        collector.stop()
                    }
                })

                collector.on('end', async err => {

                })
            }
                break;
            case `view_settings`: {
                let i = 1
                const embed = new EmbedBuilder()
                    .setTitle(`–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏`)
                    .setColor(Number(linksInfo.bot_color))
                    .setDescription(`**–ù–∞—Å—Ç—Ä–æ–π–∫–∏**:
**${i++}.** üéÇ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è: \`${userData.pers_settings.birthday_wishes ? `–í–∫–ª—é—á–µ–Ω–æ` : `–í—ã–∫–ª—é—á–µ–Ω–æ`}\`
**${i++}.** üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏: \`${userData.pers_settings.profile_view ? `–í–∫–ª—é—á–µ–Ω–æ` : `–í—ã–∫–ª—é—á–µ–Ω–æ`}\`
**${i++}.** üßß –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–Ω–∞—á–∫–æ–≤ –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏: \`${userData.pers_settings.marks_view ? `–í–∫–ª—é—á–µ–Ω–æ` : `–í—ã–∫–ª—é—á–µ–Ω–æ`}\`
**${i++}.** üèÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–∞—Ö –ª–∏–¥–µ—Ä–æ–≤: \`${userData.pers_settings.is_in_leaderboard ? `–í–∫–ª—é—á–µ–Ω–æ` : `–í—ã–∫–ª—é—á–µ–Ω–æ`}\``)

                await interaction.reply({
                    embeds: [embed],
                    ephemeral: true
                })

            }
                break;

            default:
                break;
        }
    } catch (e) {
        const admin = await client.users.fetch(`491343958660874242`)
        console.log(e)
        let options = interaction?.options.data.map(a => {
            return `{
"status": true,
"name": "${a.name}",
"type": ${a.type},
"autocomplete": ${a?.autocomplete ? true : false},
"value": "${a?.value ? a.value : "No value"}",
"user": "${a?.user?.id ? a.user.id : "No User"}",
"channel": "${a?.channel?.id ? a.channel.id : "No Channel"}",
"role": "${a?.role?.id ? a.role.id : "No Role"}",
"attachment": "${a?.attachment?.url ? a.attachment.url : "No Attachment"}"
}`
        })
        await admin.send(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`)
        await admin.send(`=> ${e}.
**ID –º–µ–Ω—é**: \`${interaction.customId}\`
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: ${interaction.member}
**–ö–∞–Ω–∞–ª**: ${interaction.channel}
**–û–ø—Ü–∏–∏**: \`\`\`json
${interaction.options.data.length <= 0 ? `{"status": false}` : options.join(`,\n`)}
\`\`\``)
        await admin.send(`‚óæ`)
    }


}
module.exports = {
    plugin: {
        id: "items",
        name: "–ü—Ä–µ–¥–º–µ—Ç—ã"
    },
    data: {
        name: "profile_settings"
    },
    execute
}